Contract Adress: 0x59bf73063bb645f3df40d9b05a117be6344e1eda
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetFactory.sol
interface ISetFactory {
    /* ============ External Functions ============ */
    /**
     * Exchange components for Set tokens
     *
     * @param  _set          Address of the Set to issue
     * @param  _quantity     Number of tokens to issue
     */
    function issue(
        address _set,
        uint256 _quantity
    )
        external;
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (ISetFactory);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Balance of token for a specified address
    *
    * @param who  The address
    * @return uint256 Balance of address
    */
    function balanceOf(
        address who
    )
        external
        view
        returns (uint256);
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.factory().issue(set, fitMintAmount);
        set.transfer(msg.sender, set.balanceOf(this));
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610a6d806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b506100706109bb565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff6109d316565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff6109f016565b9063ffffffff610a1e16565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b8a600160a060020a031663c45a01556040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b5051604080517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018890529151919092169163867904b491604480830192600092919082900301818387803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b5050604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038f16935063a9059cbb9250339184916370a08231916024808201926020929091908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915251604480830192600092919082900301818387803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b5050506000303111159050610769576040513390303180156108fc02916000818181858888f19350505050158015610767573d6000803e3d6000fd5b505b600094505b88518510156109ae57888581518110151561078557fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b1580156107f357600080fd5b505af1158015610807573d6000803e3d6000fd5b505050506040513d602081101561081d57600080fd5b505111156109a357604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561089157600080fd5b505af11580156108a5573d6000803e3d6000fd5b505050506040513d60208110156108bb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d602081101561093457600080fd5b505115156109a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b60019094019361076e565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000828201838110156109e557600080fd5b8091505b5092915050565b600080831515610a0357600091506109e9565b50828202828482811515610a1357fe5b04146109e557600080fd5b600080808311610a2d57600080fd5b8284811515610a3857fe5b049493505050505600a165627a7a7230582072f07da822ac037337ccc7be06096c41ea628c695bf3d0498a9224dbb8c129490029
Contract_Creation_Code_ARM:



Contract Adress: 0x0a7f20c58c3014e1dfb7f9d460d8bc2202f7bf1f
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (address);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.mint(msg.sender, fitMintAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610903806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b50610070610851565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff61086916565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff61088616565b9063ffffffff6108b416565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038d16916340c10f1991604480830192600092919082900301818387803b1580156105ad57600080fd5b505af11580156105c1573d6000803e3d6000fd5b50505060003031111590506105ff576040513390303180156108fc02916000818181858888f193505050501580156105fd573d6000803e3d6000fd5b505b600094505b885185101561084457888581518110151561061b57fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b505050506040513d60208110156106b357600080fd5b5051111561083957604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561072757600080fd5b505af115801561073b573d6000803e3d6000fd5b505050506040513d602081101561075157600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b505050506040513d60208110156107ca57600080fd5b5051151561083957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190940193610604565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008282018381101561087b57600080fd5b8091505b5092915050565b600080831515610899576000915061087f565b508282028284828115156108a957fe5b041461087b57600080fd5b6000808083116108c357600080fd5b82848115156108ce57fe5b049493505050505600a165627a7a72305820d341b91ee0ca9e493e91914ba74126a94615b536c8d5bf35054679fd8762e96a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xcb089b8ae76b5df461d40e957603f7a59aea9e0d
Contract Name: Arroundtoken
Contract_Source_Code: 
pragma solidity 0.5.0;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
 * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract ERC20 is IERC20 {
    using SafeMath for uint256;
    mapping (address => uint256) internal _balances;
    mapping (address => mapping (address => uint256)) private _allowed;
    uint256 internal _totalSupply;
    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }
    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * Beware that changing an allowance with this method brings the risk that someone may use both the old
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    /**
     * @dev Transfer tokens from one address to another
     * @param from address The address which you want to send tokens from
     * @param to address The address which you want to transfer to
     * @param value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param addedValue The amount of tokens to increase the allowance by.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
     * @dev Decrease the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To decrement
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param subtractedValue The amount of tokens to decrease the allowance by.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
    * @dev Transfer token for a specified addresses
    * @param from The address to transfer from.
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
    */
    constructor() public {
        owner = msg.sender;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
    _;
    }
}
contract Claimable is Ownable {
    address public pendingOwner;
    /**
     * @dev Modifier throws if called by any account other than the pendingOwner.
     */
    modifier onlyPendingOwner() {
        require(msg.sender == pendingOwner);
        _;
    }
    /**
     * @dev Allows the current owner to set the pendingOwner address.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) onlyOwner public {
        pendingOwner = newOwner;
    }
    /**
     * @dev Allows the pendingOwner address to finalize the transfer.
     */
    function claimOwnership() onlyPendingOwner public {
        emit OwnershipTransferred(owner, pendingOwner);
        owner = pendingOwner;
        pendingOwner = address(0);
    }
}
/**
 * @title Arroundtoken
 * @dev The Arroundtoken contract is ERC20-compatible token processing contract
 * with additional  features like multiTransfer and reclaimTokens
 *
 */
contract Arroundtoken is ERC20, Claimable {
    using SafeMath for uint256;
    uint64 public constant TDE_FINISH = 1542326400;//!!!!Check before deploy
    // 1542326400  GMT: 16 November 2018 г., 00:00:00
    // 1542326399  GMT: 15 November 2018 г., 23:59:59
    //////////////////////
    // State var       ///
    //////////////////////
    string  public name;
    string  public symbol;
    uint8   public decimals;
    address public accTDE;
    address public accFoundCDF;
    address public accFoundNDF1;
    address public accFoundNDF2;
    address public accFoundNDF3;
    address public accTeam;
    address public accBounty;
    // Implementation of frozen funds
    mapping(address => uint64) public frozenAccounts;
    //////////////
    // EVENTS    //
    ///////////////
    event NewFreeze(address _acc, uint64 _timestamp);
    event BatchDistrib(uint8 cnt, uint256 batchAmount);
    /**
     * @param _accTDE - main address for token distribution
     * @param _accFoundCDF  - address for CDF Found tokens (WP)
     * @param _accFoundNDF1 - address for NDF Found tokens (WP)
     * @param _accFoundNDF2 - address for NDF Found tokens (WP)
     * @param _accFoundNDF3 - address for NDF Found tokens (WP)
     * @param _accTeam - address for team tokens, will frozzen by one year
     * @param _accBounty - address for bounty tokens 
     * @param _initialSupply - subj
     */  
    constructor (
        address _accTDE, 
        address _accFoundCDF,
        address _accFoundNDF1,
        address _accFoundNDF2,
        address _accFoundNDF3,
        address _accTeam,
        address _accBounty, 
        uint256 _initialSupply
    )
    public 
    {
        require(_accTDE       != address(0));
        require(_accFoundCDF  != address(0));
        require(_accFoundNDF1 != address(0));
        require(_accFoundNDF2 != address(0));
        require(_accFoundNDF3 != address(0));
        require(_accTeam      != address(0));
        require(_accBounty    != address(0));
        require(_initialSupply > 0);
        name           = "Arround";
        symbol         = "ARR";
        decimals       = 18;
        accTDE         = _accTDE;
        accFoundCDF    = _accFoundCDF;
        accFoundNDF1   = _accFoundNDF1;
        accFoundNDF2   = _accFoundNDF2;
        accFoundNDF3   = _accFoundNDF3;
        accTeam        = _accTeam;
        accBounty      = _accBounty;
        _totalSupply   = _initialSupply * (10 ** uint256(decimals));// All ARR tokens in the world
       //Initial token distribution
        _balances[_accTDE]       = 1104000000 * (10 ** uint256(decimals)); // TDE,      36.8%=28.6+8.2 
        _balances[_accFoundCDF]  = 1251000000 * (10 ** uint256(decimals)); // CDF,      41.7%
        _balances[_accFoundNDF1] =  150000000 * (10 ** uint256(decimals)); // 0.50*NDF, 10.0%
        _balances[_accFoundNDF2] =  105000000 * (10 ** uint256(decimals)); // 0.35*NDF, 10.0%
        _balances[_accFoundNDF3] =   45000000 * (10 ** uint256(decimals)); // 0.15*NDF, 10.0%
        _balances[_accTeam]      =  300000000 * (10 ** uint256(decimals)); // team,     10.0%
        _balances[_accBounty]    =   45000000 * (10 ** uint256(decimals)); // Bounty,    1.5%
        require(  _totalSupply ==  3000000000 * (10 ** uint256(decimals)), "Total Supply exceeded!!!");
        emit Transfer(address(0), _accTDE,       1104000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundCDF,  1251000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF1,  150000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF2,  105000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF3,   45000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accTeam,       300000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accBounty,      45000000 * (10 ** uint256(decimals)));
        //initisl freeze
        frozenAccounts[_accTeam]      = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF2] = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF3] = TDE_FINISH + 63158400; //+(3600*24*365)*2 +3600*24(leap year 2020)
        emit NewFreeze(_accTeam,        TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF2,   TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF3,   TDE_FINISH + 63158400);
    }
    modifier onlyTokenKeeper() {
        require(
            msg.sender == accTDE || 
            msg.sender == accFoundCDF ||
            msg.sender == accFoundNDF1 ||
            msg.sender == accBounty
        );
        _;
    }
    function() external { } 
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transfer(address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.transfer(_to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[_from] < now);
        return super.transferFrom(_from, _to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function approve(address _spender, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.approve(_spender, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function increaseAllowance(address _spender, uint _addedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.increaseAllowance(_spender, _addedValue);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function decreaseAllowance(address _spender, uint _subtractedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.decreaseAllowance(_spender, _subtractedValue);
    }
    /**
     * @dev Batch transfer function. Allow to save up 50% of gas
     */
    function multiTransfer(address[] calldata  _investors, uint256[] calldata   _value )  
        external 
        onlyTokenKeeper 
        returns (uint256 _batchAmount)
    {
        require(_investors.length <= 255); //audit recommendation
        require(_value.length == _investors.length);
        uint8      cnt = uint8(_investors.length);
        uint256 amount = 0;
        for (uint i=0; i<cnt; i++){
            amount = amount.add(_value[i]);
            require(_investors[i] != address(0));
            _balances[_investors[i]] = _balances[_investors[i]].add(_value[i]);
            emit Transfer(msg.sender, _investors[i], _value[i]);
        }
        require(amount <= _balances[msg.sender]);
        _balances[msg.sender] = _balances[msg.sender].sub(amount);
        emit BatchDistrib(cnt, amount);
        return amount;
    }
    /**
     * @dev Owner can claim any tokens that transfered to this contract address
     */
    function reclaimToken(ERC20 token) external onlyOwner {
        require(address(token) != address(0));
        uint256 balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
    }
}
  //***************************************************************
  // Based on best practice of https://github.com/Open Zeppelin/zeppelin-solidity
  // Adapted and amended by IBERGroup; 
  // Code released under the MIT License(see git root).
  ////**************************************************************
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"reclaimToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_investors","type":"address[]"},{"name":"_value","type":"uint256[]"}],"name":"multiTransfer","outputs":[{"name":"_batchAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF3","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TDE_FINISH","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF1","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundCDF","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTDE","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccounts","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF2","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accBounty","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_accTDE","type":"address"},{"name":"_accFoundCDF","type":"address"},{"name":"_accFoundNDF1","type":"address"},{"name":"_accFoundNDF2","type":"address"},{"name":"_accFoundNDF3","type":"address"},{"name":"_accTeam","type":"address"},{"name":"_accBounty","type":"address"},{"name":"_initialSupply","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_acc","type":"address"},{"indexed":false,"name":"_timestamp","type":"uint64"}],"name":"NewFreeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"cnt","type":"uint8"},{"indexed":false,"name":"batchAmount","type":"uint256"}],"name":"BatchDistrib","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0x44B173CbdFC9946963D871c3f8b680d6A7085e2c
Contract Name: lottery
Contract_Source_Code: 
pragma solidity 0.4.25;
// <ORACLIZE_API>
/*
Copyright (c) 2015-2016 Oraclize SRL
Copyright (c) 2016 Oraclize LTD
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary
pragma solidity >=0.4.18;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version
contract OraclizeI {
    address public cbAddress;
    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);
    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);
    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);
    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);
    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);
    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);
    function getPrice(string _datasource) public returns (uint _dsprice);
    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);
    function setProofType(byte _proofType) external;
    function setCustomGasPrice(uint _gasPrice) external;
    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);
}
contract OraclizeAddrResolverI {
    function getAddress() public returns (address _addr);
}
/*
Begin solidity-cborutils
https://github.com/smartcontractkit/solidity-cborutils
MIT License
Copyright (c) 2018 SmartContract ChainLink, Ltd.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
library Buffer {
    struct buffer {
        bytes buf;
        uint capacity;
    }
    function init(buffer memory buf, uint _capacity) internal pure {
        uint capacity = _capacity;
        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);
        // Allocate space for the buffer data
        buf.capacity = capacity;
        assembly {
            let ptr := mload(0x40)
            mstore(buf, ptr)
            mstore(ptr, 0)
            mstore(0x40, add(ptr, capacity))
        }
    }
    function resize(buffer memory buf, uint capacity) private pure {
        bytes memory oldbuf = buf.buf;
        init(buf, capacity);
        append(buf, oldbuf);
    }
    function max(uint a, uint b) private pure returns(uint) {
        if(a > b) {
            return a;
        }
        return b;
    }
    /**
     * @dev Appends a byte array to the end of the buffer. Resizes if doing so
     *      would exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {
        if(data.length + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, data.length) * 2);
        }
        uint dest;
        uint src;
        uint len = data.length;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Start address = buffer address + buffer length + sizeof(buffer length)
            dest := add(add(bufptr, buflen), 32)
            // Update buffer length
            mstore(bufptr, add(buflen, mload(data)))
            src := add(data, 32)
        }
        // Copy word-length chunks while possible
        for(; len >= 32; len -= 32) {
            assembly {
                mstore(dest, mload(src))
            }
            dest += 32;
            src += 32;
        }
        // Copy remaining bytes
        uint mask = 256 ** (32 - len) - 1;
        assembly {
            let srcpart := and(mload(src), not(mask))
            let destpart := and(mload(dest), mask)
            mstore(dest, or(destpart, srcpart))
        }
        return buf;
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, uint8 data) internal pure {
        if(buf.buf.length + 1 > buf.capacity) {
            resize(buf, buf.capacity * 2);
        }
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length)
            let dest := add(add(bufptr, buflen), 32)
            mstore8(dest, data)
            // Update buffer length
            mstore(bufptr, add(buflen, 1))
        }
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {
        if(len + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, len) * 2);
        }
        uint mask = 256 ** len - 1;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length) + len
            let dest := add(add(bufptr, buflen), len)
            mstore(dest, or(and(mload(dest), not(mask)), data))
            // Update buffer length
            mstore(bufptr, add(buflen, len))
        }
        return buf;
    }
}
library CBOR {
    using Buffer for Buffer.buffer;
    uint8 private constant MAJOR_TYPE_INT = 0;
    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
    uint8 private constant MAJOR_TYPE_BYTES = 2;
    uint8 private constant MAJOR_TYPE_STRING = 3;
    uint8 private constant MAJOR_TYPE_ARRAY = 4;
    uint8 private constant MAJOR_TYPE_MAP = 5;
    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {
        if(value <= 23) {
            buf.append(uint8((major << 5) | value));
        } else if(value <= 0xFF) {
            buf.append(uint8((major << 5) | 24));
            buf.appendInt(value, 1);
        } else if(value <= 0xFFFF) {
            buf.append(uint8((major << 5) | 25));
            buf.appendInt(value, 2);
        } else if(value <= 0xFFFFFFFF) {
            buf.append(uint8((major << 5) | 26));
            buf.appendInt(value, 4);
        } else if(value <= 0xFFFFFFFFFFFFFFFF) {
            buf.append(uint8((major << 5) | 27));
            buf.appendInt(value, 8);
        }
    }
    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {
        buf.append(uint8((major << 5) | 31));
    }
    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {
        encodeType(buf, MAJOR_TYPE_INT, value);
    }
    function encodeInt(Buffer.buffer memory buf, int value) internal pure {
        if(value >= 0) {
            encodeType(buf, MAJOR_TYPE_INT, uint(value));
        } else {
            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));
        }
    }
    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {
        encodeType(buf, MAJOR_TYPE_BYTES, value.length);
        buf.append(value);
    }
    function encodeString(Buffer.buffer memory buf, string value) internal pure {
        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);
        buf.append(bytes(value));
    }
    function startArray(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);
    }
    function startMap(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);
    }
    function endSequence(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);
    }
}
/*
End solidity-cborutils
 */
contract usingOraclize {
    uint constant day = 60*60*24;
    uint constant week = 60*60*24*7;
    uint constant month = 60*60*24*30;
    byte constant proofType_NONE = 0x00;
    byte constant proofType_TLSNotary = 0x10;
    byte constant proofType_Ledger = 0x30;
    byte constant proofType_Android = 0x40;
    byte constant proofType_Native = 0xF0;
    byte constant proofStorage_IPFS = 0x01;
    uint8 constant networkID_auto = 0;
    uint8 constant networkID_mainnet = 1;
    uint8 constant networkID_testnet = 2;
    uint8 constant networkID_morden = 2;
    uint8 constant networkID_consensys = 161;
    OraclizeAddrResolverI OAR;
    OraclizeI oraclize;
    modifier oraclizeAPI {
        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))
            oraclize_setNetwork(networkID_auto);
        if(address(oraclize) != OAR.getAddress())
            oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    modifier coupon(string code){
        oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    function oraclize_setNetwork(uint8 networkID) internal returns(bool){
      return oraclize_setNetwork();
      networkID; // silence the warning and remain backwards compatible
    }
    function oraclize_setNetwork() internal returns(bool){
        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet
            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
            oraclize_setNetworkName("eth_mainnet");
            return true;
        }
        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet
            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
            oraclize_setNetworkName("eth_ropsten3");
            return true;
        }
        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet
            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
            oraclize_setNetworkName("eth_kovan");
            return true;
        }
        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet
            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
            oraclize_setNetworkName("eth_rinkeby");
            return true;
        }
        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge
            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
            return true;
        }
        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide
            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
            return true;
        }
        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity
            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
            return true;
        }
        return false;
    }
    function __callback(bytes32 myid, string result) public {
        __callback(myid, result, new bytes(0));
    }
    function __callback(bytes32 myid, string result, bytes proof) public {
      return;
      myid; result; proof; // Silence compiler warnings
    }
    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource);
    }
    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource, gaslimit);
    }
    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(0, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(timestamp, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(0, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_cbAddress() oraclizeAPI internal returns (address){
        return oraclize.cbAddress();
    }
    function oraclize_setProof(byte proofP) oraclizeAPI internal {
        return oraclize.setProofType(proofP);
    }
    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {
        return oraclize.setCustomGasPrice(gasPrice);
    }
    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){
        return oraclize.randomDS_getSessionPubKeyHash();
    }
    function getCodeSize(address _addr) constant internal returns(uint _size) {
        assembly {
            _size := extcodesize(_addr)
        }
    }
    function parseAddr(string _a) internal pure returns (address){
        bytes memory tmp = bytes(_a);
        uint160 iaddr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i=2; i<2+2*20; i+=2){
            iaddr *= 256;
            b1 = uint160(tmp[i]);
            b2 = uint160(tmp[i+1]);
            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;
            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;
            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;
            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;
            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;
            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;
            iaddr += (b1*16+b2);
        }
        return address(iaddr);
    }
    function strCompare(string _a, string _b) internal pure returns (int) {
        bytes memory a = bytes(_a);
        bytes memory b = bytes(_b);
        uint minLength = a.length;
        if (b.length < minLength) minLength = b.length;
        for (uint i = 0; i < minLength; i ++)
            if (a[i] < b[i])
                return -1;
            else if (a[i] > b[i])
                return 1;
        if (a.length < b.length)
            return -1;
        else if (a.length > b.length)
            return 1;
        else
            return 0;
    }
    function indexOf(string _haystack, string _needle) internal pure returns (int) {
        bytes memory h = bytes(_haystack);
        bytes memory n = bytes(_needle);
        if(h.length < 1 || n.length < 1 || (n.length > h.length))
            return -1;
        else if(h.length > (2**128 -1))
            return -1;
        else
        {
            uint subindex = 0;
            for (uint i = 0; i < h.length; i ++)
            {
                if (h[i] == n[0])
                {
                    subindex = 1;
                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])
                    {
                        subindex++;
                    }
                    if(subindex == n.length)
                        return int(i);
                }
            }
            return -1;
        }
    }
    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _be = bytes(_e);
        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
        bytes memory babcde = bytes(abcde);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];
        return string(babcde);
    }
    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {
        return strConcat(_a, _b, _c, _d, "");
    }
    function strConcat(string _a, string _b, string _c) internal pure returns (string) {
        return strConcat(_a, _b, _c, "", "");
    }
    function strConcat(string _a, string _b) internal pure returns (string) {
        return strConcat(_a, _b, "", "", "");
    }
    // parseInt
    function parseInt(string _a) internal pure returns (uint) {
        return parseInt(_a, 0);
    }
    // parseInt(parseFloat*10^_b)
    function parseInt(string _a, uint _b) internal pure returns (uint) {
        bytes memory bresult = bytes(_a);
        uint mint = 0;
        bool decimals = false;
        for (uint i=0; i<bresult.length; i++){
            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){
                if (decimals){
                   if (_b == 0) break;
                    else _b--;
                }
                mint *= 10;
                mint += uint(bresult[i]) - 48;
            } else if (bresult[i] == 46) decimals = true;
        }
        if (_b > 0) mint *= 10**_b;
        return mint;
    }
    function uint2str(uint i) internal pure returns (string){
        if (i == 0) return "0";
        uint j = i;
        uint len;
        while (j != 0){
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (i != 0){
            bstr[k--] = byte(48 + i % 10);
            i /= 10;
        }
        return string(bstr);
    }
    using CBOR for Buffer.buffer;
    function stra2cbor(string[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeString(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    function ba2cbor(bytes[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeBytes(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    string oraclize_network_name;
    function oraclize_setNetworkName(string _network_name) internal {
        oraclize_network_name = _network_name;
    }
    function oraclize_getNetworkName() internal view returns (string) {
        return oraclize_network_name;
    }
    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){
        require((_nbytes > 0) && (_nbytes <= 32));
        // Convert from seconds to ledger timer ticks
        _delay *= 10;
        bytes memory nbytes = new bytes(1);
        nbytes[0] = byte(_nbytes);
        bytes memory unonce = new bytes(32);
        bytes memory sessionKeyHash = new bytes(32);
        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
        assembly {
            mstore(unonce, 0x20)
            // the following variables can be relaxed
            // check relaxed random contract under ethereum-examples repo
            // for an idea on how to override and replace comit hash vars
            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))
            mstore(sessionKeyHash, 0x20)
            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)
        }
        bytes memory delay = new bytes(32);
        assembly {
            mstore(add(delay, 0x20), _delay)
        }
        bytes memory delay_bytes8 = new bytes(8);
        copyBytes(delay, 24, 8, delay_bytes8, 0);
        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];
        bytes32 queryId = oraclize_query("random", args, _customGasLimit);
        bytes memory delay_bytes8_left = new bytes(8);
        assembly {
            let x := mload(add(delay_bytes8, 0x20))
            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))
        }
        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));
        return queryId;
    }
    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {
        oraclize_randomDS_args[queryId] = commitment;
    }
    mapping(bytes32=>bytes32) oraclize_randomDS_args;
    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;
    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){
        bool sigok;
        address signer;
        bytes32 sigr;
        bytes32 sigs;
        bytes memory sigr_ = new bytes(32);
        uint offset = 4+(uint(dersig[3]) - 0x20);
        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);
        bytes memory sigs_ = new bytes(32);
        offset += 32 + 2;
        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);
        assembly {
            sigr := mload(add(sigr_, 32))
            sigs := mload(add(sigs_, 32))
        }
        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);
        if (address(keccak256(pubkey)) == signer) return true;
        else {
            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);
            return (address(keccak256(pubkey)) == signer);
        }
    }
    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {
        bool sigok;
        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)
        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);
        copyBytes(proof, sig2offset, sig2.length, sig2, 0);
        bytes memory appkey1_pubkey = new bytes(64);
        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);
        bytes memory tosign2 = new bytes(1+65+32);
        tosign2[0] = byte(1); //role
        copyBytes(proof, sig2offset-65, 65, tosign2, 1);
        bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);
        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);
        if (sigok == false) return false;
        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)
        bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
        bytes memory tosign3 = new bytes(1+65);
        tosign3[0] = 0xFE;
        copyBytes(proof, 3, 65, tosign3, 1);
        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);
        copyBytes(proof, 3+65, sig3.length, sig3, 0);
        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);
        return sigok;
    }
    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        require((_proof[0] == "L") && (_proof[1] == "P") && (_proof[2] == 1));
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        require(proofVerified);
        _;
    }
    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        if ((_proof[0] != "L")||(_proof[1] != "P")||(_proof[2] != 1)) return 1;
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        if (proofVerified == false) return 2;
        return 0;
    }
    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){
        bool match_ = true;
        require(prefix.length == n_random_bytes);
        for (uint256 i=0; i< n_random_bytes; i++) {
            if (content[i] != prefix[i]) match_ = false;
        }
        return match_;
    }
    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){
        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)
        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;
        bytes memory keyhash = new bytes(32);
        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);
        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;
        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);
        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);
        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)
        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;
        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.
        // This is to verify that the computed args match with the ones specified in the query.
        bytes memory commitmentSlice1 = new bytes(8+1+32);
        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);
        bytes memory sessionPubkey = new bytes(64);
        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;
        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);
        bytes32 sessionPubkeyHash = sha256(sessionPubkey);
        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match
            delete oraclize_randomDS_args[queryId];
        } else return false;
        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)
        bytes memory tosign1 = new bytes(32+8+1+32);
        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);
        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;
        // verify if sessionPubkeyHash was verified already, if not.. let's do it!
        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){
            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);
        }
        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {
        uint minLength = length + toOffset;
        // Buffer too small
        require(to.length >= minLength); // Should be a better way?
        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables
        uint i = 32 + fromOffset;
        uint j = 32 + toOffset;
        while (i < (32 + fromOffset + length)) {
            assembly {
                let tmp := mload(add(from, i))
                mstore(add(to, j), tmp)
            }
            i += 32;
            j += 32;
        }
        return to;
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    // Duplicate Solidity's ecrecover, but catching the CALL return value
    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {
        // We do our own memory management here. Solidity uses memory offset
        // 0x40 to store the current end of memory. We write past it (as
        // writes are memory extensions), but don't update the offset so
        // Solidity will reuse it. The memory used here is only needed for
        // this context.
        // FIXME: inline assembly can't access return values
        bool ret;
        address addr;
        assembly {
            let size := mload(0x40)
            mstore(size, hash)
            mstore(add(size, 32), v)
            mstore(add(size, 64), r)
            mstore(add(size, 96), s)
            // NOTE: we can reuse the request memory because we deal with
            //       the return code
            ret := call(3000, 1, 0, size, 128, size, 32)
            addr := mload(size)
        }
        return (ret, addr);
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {
        bytes32 r;
        bytes32 s;
        uint8 v;
        if (sig.length != 65)
          return (false, 0);
        // The signature format is a compact form of:
        //   {bytes32 r}{bytes32 s}{uint8 v}
        // Compact means, uint8 is not padded to 32 bytes.
        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            // Here we are loading the last 32 bytes. We exploit the fact that
            // 'mload' will pad with zeroes if we overread.
            // There is no 'mload8' to do this, but that would be nicer.
            v := byte(0, mload(add(sig, 96)))
            // Alternative solution:
            // 'byte' is not working due to the Solidity parser, so lets
            // use the second best option, 'and'
            // v := and(mload(add(sig, 65)), 255)
        }
        // albeit non-transactional signatures are not specified by the YP, one would expect it
        // to match the YP range of [27, 28]
        //
        // geth uses [0, 1] and some clients have followed. This might change, see:
        //  https://github.com/ethereum/go-ethereum/issues/2053
        if (v < 27)
          v += 27;
        if (v != 27 && v != 28)
            return (false, 0);
        return safer_ecrecover(hash, v, r, s);
    }
    function safeMemoryCleaner() internal pure {
        assembly {
            let fmem := mload(0x40)
            codecopy(fmem, codesize, sub(msize, fmem))
        }
    }
}
// </ORACLIZE_API>
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
contract SafeMath {
/**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
  */
  constructor() public {
    owner = msg.sender;
  }
  /**
    * @dev Throws if called by any account other than the owner.
  */
  modifier onlyOwner() {
    require(msg.sender == owner, "sender is not owner");
    _;
  }
  /**
    * @dev Allows the current owner to transfer control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
  */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0), "newOwner addres is zero");
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
contract lottery is Ownable, usingOraclize, SafeMath {
  /*
    * checks only Drawer address is calling
  */
  modifier onlyDrawer() {
    require(msg.sender == drawerAddress || msg.sender == owner, "sender is not drawerAddress");
    _;
  }
  /*
    * checks address is zero or not.
  */
  modifier isAddressZero {
    require(msg.sender != address(0), "new address is zero");
    _;
  }
  struct Game {
    uint endTime;
    uint ticketPrice;
    uint accumJackpotAmounts;
    bytes winningNumbers;
    bytes32 queryId;
    Ticket[] tickets;
    string hashString;
    mapping (byte => bool) winNumMapping;
    mapping (address => uint) playerTicketCount;
    mapping (uint => uint) winPlayersCount;
    mapping (uint => bool) winners;
  }
  struct Ticket {
    uint256 time;
    address player;
    bytes   numbers;
  }
  address public adminAddress;
  address public drawerAddress;
  address public feeAddress;
  bool public gameStatus;
  uint public adminFee;
  uint public gameNumber;
  uint public numbersStart;
  uint public numbersCount;
  uint public numbersCountMax;
  uint public ticketPrice;
  uint public prizeStart;
  uint public prizeNumCount;
  uint[] public winPercent;
  uint public orclizeGasPrice;
  mapping (uint => Game) public games;
  // For Players Event
  event LogBuyTicket(uint _time, address _player, bytes _numbers, uint _count, uint _ticketTotalCount);
  // For Owner Event
  event LogEndGameBegin(bool _success);
  event LogEndGameSuccess(bool _success);
  event LogEndGameFail(bool _success);
  event LogStartNewGame(bool _start, uint _gameNumber, bytes _winNumbers);
  constructor() public payable {
    // sets the Ledger authenticity proof in the constructor
    oraclize_setProof(proofType_Ledger);
    // Lottery numbers range ( numbersStart <= gameNumbers <= numbersCountMax)
    numbersStart = 1;
    numbersCount = 5;
    numbersCountMax = 25;
    ticketPrice = .01 ether;
    winPercent = [0, 0, 0, 20, 20, 60];
    prizeStart = 3;   //winPercent Index start
    prizeNumCount = 3;
    // operator`s fee 10%
    adminAddress = msg.sender;
    drawerAddress = 0xd36C57086c9fC2d06C3009207F0d4D818CAc4F63;
    feeAddress = 0x798F4A40dc6C45a812f1549402E3D9E5BA5fc9a5;
    adminFee = 10;
    gameStatus = true;
    games[gameNumber].ticketPrice = ticketPrice;
    // oraclize paramaters
    orclizeGasPrice = 400000;
  }
  /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/
  function setAdminAddress(address _admin) public onlyOwner isAddressZero {
    adminAddress = _admin;
  }
  function setDrawerAddress(address _drawer) public onlyOwner isAddressZero {
    drawerAddress = _drawer;
  }
  function setFeeAddress(address _feeAddr) public onlyOwner isAddressZero {
    feeAddress = _feeAddr;
  }
  function setAdminFee(uint _fee) public onlyOwner isAddressZero {
    require(_fee >= 0, "Fee is under 0");
    adminFee = _fee;
  }
  function setTicketPrice(uint _price) public onlyOwner isAddressZero {
    require(_price >= 0, "Price is under 0");
    ticketPrice = _price;
  }
  function kill() public onlyOwner isAddressZero {
    selfdestruct(owner);
  }
  function startGame(uint _carryOverJackpot, uint[] _totalWinCount) external onlyDrawer {
    // Set game win players count.
    for(uint i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < _totalWinCount[i]) {
        games[gameNumber].winPlayersCount[i] = _totalWinCount[i];
      }
    }
    // Start New Game.
    gameNumber++;
    games[gameNumber].ticketPrice = ticketPrice;
    games[gameNumber].accumJackpotAmounts = _carryOverJackpot;
    gameStatus = true;
    emit LogStartNewGame(gameStatus, gameNumber-1, games[gameNumber-1].winningNumbers);
  }
  function endGame() external onlyDrawer {
    gameStatus = false;
    uint numberOfBytes = 28; // number of random bytes we want the datasource to return
    uint delay = 0; // number of seconds to wait before the execution takes place
    uint callbackGas = orclizeGasPrice; // amount of gas we want Oraclize to set for the callback function
    // this function internally generates the correct oraclize_query and returns its queryId
    games[gameNumber].queryId = oraclize_newRandomDSQuery(delay, numberOfBytes, callbackGas);
    emit LogEndGameBegin(true);
  }
  function buyTicket(bytes _ticketNumber, uint _ticketCount) external payable {
    require(gameStatus, "game is processing sth");
    require(_ticketCount > 0, "ticket count should be not under 0");
    require(msg.value == mul(ticketPrice, _ticketCount), "ticket price is not equal");
    require(_ticketNumber.length == mul(numbersCount, _ticketCount), "ticket number`s length is not match");
    bytes memory pickNumbers = new bytes(numbersCount);
    for(uint i = 0; i < _ticketCount; i++) {
      for(uint j = 0; j < numbersCount; j++) {
        pickNumbers[j] = _ticketNumber[j + (numbersCount * i)];
        require(checkPickNumbers(pickNumbers[j]), "player`s pick number is wrong");
      }
      require(checkDuplicates(pickNumbers), "Lottery Numbers are duplicated");
      games[gameNumber].tickets.push(Ticket(block.timestamp, msg.sender, pickNumbers));
      games[gameNumber].playerTicketCount[msg.sender]++;
    }
    emit LogBuyTicket(block.timestamp, msg.sender, _ticketNumber, _ticketCount, games[gameNumber].tickets.length);
  }
  function getGameHistory(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint accumJackpot,
      uint ticketCount,
      uint adminFee,
      uint[] winningPercent,
      uint[] winPlayersCount,
      uint[] winNumbers
  ) {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    winNumbers = new uint[](numbersCount);
    winningPercent = new uint[](numbersCount + 1);
    winPlayersCount = new uint[](numbersCount + 1);
    uint numbersIndex;
    // save endtime and jackpot.
    endTime = games[_gameNumber].endTime;
    ticketCount = tickets.length;
    winningPercent = winPercent;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    adminFee = adminFee;
    // save game win numbers.
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        winNumbers[numbersIndex++] = i;
      }
    }
    // save game winners
    for(i = prizeStart; i < numbersCount + 1; i++) {
      winPlayersCount[i] = games[_gameNumber].winPlayersCount[i];
    }
  }
  function getPlayerAllTickets(address _player, uint _start, uint _end) external view 
    returns (
      uint[] winNumbers,
      uint[] myTickets
    )
  {
    require(_player != address(0),"address should be not 0");
    winNumbers = new uint[]((_end - _start) * numbersCount);
    uint winNumbersIndex;
    uint playerTicketIndex;
    uint playerTicketCount;
    // get all game win numbers.
    for(uint i = _start; i < _end; i++) {
      playerTicketCount += games[i].playerTicketCount[_player];
      for(uint j = 1; j < numbersCountMax + 1; j++) {
        if(games[i].winNumMapping[byte(j)]) {
          winNumbers[winNumbersIndex++] = j;
        }
      }
    }
    // get all player tickets.
    // numbersCount + 1 for gameNumber
    myTickets = new uint[](playerTicketCount * (numbersCount + 1));
    for(i = _start; i < _end; i++) {
      for(j = 0; j < games[i].tickets.length; j++) {
        if(games[i].tickets[j].player == _player) {
          // set Game Number
          myTickets[playerTicketIndex++] = i;
          // set Player Numbers
          for(uint k = 0; k < numbersCount; k++) {
            myTickets[playerTicketIndex++] = uint(games[i].tickets[j].numbers[k]);
          }
        }
      }
    }
  }
  function getPlayerTickets(address _player, uint _gameNumber) external view 
    returns (
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(_player != address(0),"address should be not 0");
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    numbers = new uint[](games[_gameNumber].playerTicketCount[_player] * numbersCount);
    time = new uint[](games[_gameNumber].playerTicketCount[_player]);
    uint timeIndex;
    uint numbersIndex;
    for(uint i = 0; i < tickets.length; i++) {
      if(tickets[i].player == _player) {
        time[timeIndex++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameWinners(uint _gameNumber) 
    external 
    view 
    returns (
      address[] player,
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    uint length;
    for(uint i = prizeStart; i < numbersCount + 1; i++){
      length += games[_gameNumber].winPlayersCount[i];
    }
    Ticket[] memory tickets = games[_gameNumber].tickets;
    player = new address[](length);
    time = new uint[](length);
    numbers = new uint[](length * numbersCount);
    uint index;
    uint numbersIndex;
    for(i = 0; i < tickets.length; i++) {
      if(games[_gameNumber].winners[i]) {
        player[index] = tickets[i].player;
        time[index++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameDetails(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint ticketPrice,
      uint ticketCount,
      uint accumJackpot,
      uint[] gameReward,
      uint[] numbers
    ) 
  {
    require(_gameNumber >= 0, "Game Number should be over 0");
    numbers = new uint[](numbersCount);
    gameReward = new uint[](numbersCount + 1);
    uint index;
    endTime = games[_gameNumber].endTime;
    ticketPrice = games[_gameNumber].ticketPrice;
    ticketCount = games[_gameNumber].tickets.length;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    gameReward = winPercent;
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        numbers[index++] = i;
      }
    }
  }
  function __callback(bytes32 _queryId, string _result, bytes _proof) public
  {
    require(msg.sender == oraclize_cbAddress(), "Should be eqaul to request");
    if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) == 0) {
      if(games[gameNumber].queryId == _queryId) {
        games[gameNumber].endTime = block.timestamp;
        uint jackpot = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice);// + games[gameNumber].accumJackpotAmounts;
        // send ethereum for operation cost.
        if(jackpot > 0) {
          feeAddress.transfer((jackpot * adminFee) / 100);
        }
        games[gameNumber].hashString = _result;
        games[gameNumber].winningNumbers = generateRandom(games[gameNumber].hashString, numbersCount, numbersCountMax);
        for (uint i = 0; i < games[gameNumber].winningNumbers.length; i++) {
          games[gameNumber].winNumMapping[games[gameNumber].winningNumbers[i]] = true;
        }
        emit LogEndGameSuccess(true);
      }
    }
    else {
      emit LogEndGameFail(false);
    }
  }
  function getGameDrawInfos() external view 
    returns (
      uint carryOverJackpot,
      uint totalTicketCount,
      uint totalWinPlayersCount,
      uint[] totalWinCount,
      uint[] playersAmounts
    ) 
  {
    uint jackpotAmounts = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice) + games[gameNumber].accumJackpotAmounts;
    jackpotAmounts -= ((games[gameNumber].tickets.length * games[gameNumber].ticketPrice) * adminFee) / 100;
    totalWinCount = new uint[](numbersCount + 1);
    playersAmounts = new uint[](numbersCount + 1);
    uint winNumberCount;
    uint sendedJackpotAmounts;
    // 1. pick win players.
    for(uint i = 0; i < games[gameNumber].tickets.length; i++) {
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if( games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])] ) {
          winNumberCount++;
        }
      }
      // 2. Win players counting.
      if(prizeStart <= winNumberCount) {
        totalWinCount[winNumberCount]++;
        totalWinPlayersCount++;
      }
      winNumberCount = 0;
    }
    // 3. calculate winners prizes.
    for(i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < totalWinCount[i]) {
        playersAmounts[i] = (jackpotAmounts * winPercent[i] / 100) / totalWinCount[i];
        sendedJackpotAmounts += (jackpotAmounts * winPercent[i] / 100);
      }
    }
    // 4. Set to carry over jackpot amounts.
    carryOverJackpot = jackpotAmounts - sendedJackpotAmounts;
    // 5. Set Total Ticket Count.
    totalTicketCount = games[gameNumber].tickets.length;
  }
  function getWinners(uint _start, uint _end) external view 
    returns (
      uint[] index,
      uint[] winCount
    ) 
  {
    uint ticketIndex;
    uint winNumberCount;
    index = new uint[](getWinnersCount(_start, _end));
    winCount = new uint[](getWinnersCount(_start, _end));
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // set winners
      if(prizeStart <= winNumberCount) {
        index[ticketIndex] = i;
        winCount[ticketIndex++] = winNumberCount;
      }
      winNumberCount = 0;
    }
  }
  function () public payable {
  }
  function sendRewardToPlayers(uint[] _winnerIndex, uint[] _winReward) external onlyDrawer {
    require(_winnerIndex.length > 0, "winner index is empty");
    require(_winReward.length > 0, "win numbers count is empty");
    for(uint i = 0; i < _winnerIndex.length; i++) {
      games[gameNumber].winners[_winnerIndex[i]] = true;
      games[gameNumber].tickets[_winnerIndex[i]].player.transfer(_winReward[i]);
    }
  }
  function generateRandom(string _stringHash, uint numbersCount, uint numbersCountMax) 
    internal
    pure 
    returns (
      bytes
    ) 
  {
    bytes32 random = keccak256(_stringHash);
    bytes memory allNumbers = new bytes(numbersCountMax);
    bytes memory winNumbers = new bytes(numbersCount);
    for (uint i = 0; i < numbersCountMax; i++) {
      allNumbers[i] = byte(i + 1);
    }
    for (i = 0; i < numbersCount; i++) {
      uint n = numbersCountMax - i;
      uint r = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % n;
      winNumbers[i] = allNumbers[r];
      allNumbers[r] = allNumbers[n - 1];
    }
    return winNumbers;
  }
  function getWinnersCount(uint _start, uint _end) internal view returns (uint ret) 
  {
    uint winNumberCount;
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // increase winner players count
      if(prizeStart <= winNumberCount) {
        ret++;
      }
      winNumberCount = 0;
    }
  }
  function checkPickNumbers(byte _number) internal returns (bool) {
    if(numbersStart <= uint(_number) && uint(_number) <= numbersCountMax) {
      return true;
    } else {
      return false;
    }
  }
  function checkDuplicates(bytes _array) internal pure returns (bool) {
    for (uint i = 0; i < _array.length - 1; i++) {
      for (uint j = i + 1; j < _array.length; j++) {
        if (_array[i] == _array[j]) return false;
      }
    }
    return true;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"games","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"accumJackpotAmounts","type":"uint256"},{"name":"winningNumbers","type":"bytes"},{"name":"queryId","type":"bytes32"},{"name":"hashString","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ticketPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"}],"name":"setTicketPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameDetails","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"gameReward","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameWinners","outputs":[{"name":"player","type":"address[]"},{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"myid","type":"bytes32"},{"name":"result","type":"string"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getWinners","outputs":[{"name":"index","type":"uint256[]"},{"name":"winCount","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_admin","type":"address"}],"name":"setAdminAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"drawerAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_winnerIndex","type":"uint256[]"},{"name":"_winReward","type":"uint256[]"}],"name":"sendRewardToPlayers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_queryId","type":"bytes32"},{"name":"_result","type":"string"},{"name":"_proof","type":"bytes"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feeAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"winPercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_ticketNumber","type":"bytes"},{"name":"_ticketCount","type":"uint256"}],"name":"buyTicket","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getGameDrawInfos","outputs":[{"name":"carryOverJackpot","type":"uint256"},{"name":"totalTicketCount","type":"uint256"},{"name":"totalWinPlayersCount","type":"uint256"},{"name":"totalWinCount","type":"uint256[]"},{"name":"playersAmounts","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"endGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"gameStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"numbersStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"orclizeGasPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_feeAddr","type":"address"}],"name":"setFeeAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_fee","type":"uint256"}],"name":"setAdminFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getPlayerAllTickets","outputs":[{"name":"winNumbers","type":"uint256[]"},{"name":"myTickets","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_gameNumber","type":"uint256"}],"name":"getPlayerTickets","outputs":[{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameHistory","outputs":[{"name":"endTime","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"adminFee","type":"uint256"},{"name":"winningPercent","type":"uint256[]"},{"name":"winPlayersCount","type":"uint256[]"},{"name":"winNumbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_drawer","type":"address"}],"name":"setDrawerAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_carryOverJackpot","type":"uint256"},{"name":"_totalWinCount","type":"uint256[]"}],"name":"startGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"gameNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeNumCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCountMax","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_time","type":"uint256"},{"indexed":false,"name":"_player","type":"address"},{"indexed":false,"name":"_numbers","type":"bytes"},{"indexed":false,"name":"_count","type":"uint256"},{"indexed":false,"name":"_ticketTotalCount","type":"uint256"}],"name":"LogBuyTicket","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameBegin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameFail","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_start","type":"bool"},{"indexed":false,"name":"_gameNumber","type":"uint256"},{"indexed":false,"name":"_winNumbers","type":"bytes"}],"name":"LogStartNewGame","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0xa85ded59ef1824154615bf2a88d136d1356839ac
Contract Name: Lottery
Contract_Source_Code: 
pragma solidity ^0.4.24;
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}
contract Lottery {
    using SafeMath for uint256;
    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%
    uint256[] public DAILY_INTEREST = [111, 133, 222, 333, 444];        // 1.11%, 2.22%, 3.33%, 4.44%
    uint256 public MARKETING_AND_TEAM_FEE = 1000;                       // 10%
    uint256 public referralPercents = 1000;                             // 10%
    uint256 constant public MAX_DIVIDEND_RATE = 25000;                  // 250%
    uint256 constant public MINIMUM_DEPOSIT = 100 finney;               // 0.1 eth
    uint256 public wave = 0;
    struct Deposit {
        uint256 amount;
        uint256 interest;
        uint256 withdrawedRate;
    }
    struct User {
        address referrer;
        uint256 referralAmount;
        uint256 firstTime;
        uint256 lastPayment;
        Deposit[] deposits;
        uint256 referBonus;
    }
    address public marketingAndTeam = 0xFaea7fa229C29526698657e7Ab7063E20581A50c; // need to change
    address public owner = 0x4e3e605b9f7b333e413E1CD9E577f2eba447f876;
    mapping(uint256 => mapping(address => User)) public users;
    event InvestorAdded(address indexed investor);
    event ReferrerAdded(address indexed investor, address indexed referrer);
    event DepositAdded(address indexed investor, uint256 indexed depositsCount, uint256 amount);
    event UserDividendPayed(address indexed investor, uint256 dividend);
    event DepositDividendPayed(address indexed investor, uint256 indexed index, uint256 deposit, uint256 totalPayed, uint256 dividend);
    event FeePayed(address indexed investor, uint256 amount);
    event BalanceChanged(uint256 balance);
    event NewWave();
    function() public payable {
        if(msg.value == 0) {
            // Dividends
            withdrawDividends();
            return;
        }
        // Deposit
        doInvest();
    }
    function withdrawDividends() internal {
        uint256 dividendsSum = getDividends(msg.sender);
        require(dividendsSum > 0);
        if (address(this).balance <= dividendsSum) {
            wave = wave.add(1);
            dividendsSum = address(this).balance;
            emit NewWave();
        }
        msg.sender.transfer(dividendsSum);
        emit UserDividendPayed(msg.sender, dividendsSum);
        emit BalanceChanged(address(this).balance);
    }
    function getDividends(address wallet) internal returns(uint256 sum) {
        User storage user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawRate = dividendRate(msg.sender, i);
            user.deposits[i].withdrawedRate = user.deposits[i].withdrawedRate.add(withdrawRate);
            sum = sum.add(user.deposits[i].amount.mul(withdrawRate).div(ONE_HUNDRED_PERCENTS));
            emit DepositDividendPayed(
                msg.sender,
                i,
                user.deposits[i].amount,
                user.deposits[i].amount.mul(user.deposits[i].withdrawedRate.div(ONE_HUNDRED_PERCENTS)),
                user.deposits[i].amount.mul(withdrawRate.div(ONE_HUNDRED_PERCENTS))
            );
        }
        user.lastPayment = now;
        sum = sum.add(user.referBonus);
        user.referBonus = 0;
    }
    function dividendRate(address wallet, uint256 index) internal view returns(uint256 rate) {
        User memory user = users[wave][wallet];
        uint256 duration = now.sub(user.lastPayment);
        rate = user.deposits[index].interest.mul(duration).div(1 days);
        uint256 leftRate = MAX_DIVIDEND_RATE.sub(user.deposits[index].withdrawedRate);
        rate = min(rate, leftRate);
    }
    function doInvest() internal {
        uint256 investment = msg.value;
        require (investment >= MINIMUM_DEPOSIT);
        User storage user = users[wave][msg.sender];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(msg.sender);
        }
        // Add referral if possible
        if (user.referrer == address(0) && msg.data.length == 20 && user.firstTime == now) {
            address newReferrer = _bytesToAddress(msg.data);
            if (newReferrer != address(0) && newReferrer != msg.sender && users[wave][newReferrer].firstTime > 0) {
                user.referrer = newReferrer;
                emit ReferrerAdded(msg.sender, newReferrer);
            }
        }
        // Referrers fees
        if (user.referrer != address(0)) {
            uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
            users[wave][user.referrer].referralAmount = users[wave][user.referrer].referralAmount.add(investment);
            users[wave][user.referrer].referBonus = users[wave][user.referrer].referBonus.add(refAmount);
        }
        // Reinvest
        investment = investment.add(getDividends(msg.sender));
        // Create deposit
        user.deposits.push(Deposit({
            amount: investment,
            interest: getUserInterest(msg.sender),
            withdrawedRate: 0
        }));
        emit DepositAdded(msg.sender, user.deposits.length, investment);
        // Marketing and Team fee
        uint256 marketingAndTeamFee = msg.value.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
        marketingAndTeam.transfer(marketingAndTeamFee);
        emit FeePayed(msg.sender, marketingAndTeamFee);
        emit BalanceChanged(address(this).balance);
    }
    function getUserInterest(address wallet) public view returns (uint256) {
        User memory user = users[wave][wallet];
        if (user.referralAmount < 1 ether) {
            if(user.referrer == address(0)) return DAILY_INTEREST[0];
            return DAILY_INTEREST[1];
        } else if (user.referralAmount < 10 ether) {
            return DAILY_INTEREST[2];
        } else if (user.referralAmount < 20 ether) {
            return DAILY_INTEREST[3];
        } else {
            return DAILY_INTEREST[4];
        }
    }
    function _bytesToAddress(bytes data) private pure returns(address addr) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            addr := mload(add(data, 20)) 
        }
    }
    function min(uint256 a, uint256 b) internal pure returns(uint256) {
        if(a < b) return a;
        return b;
    }
    function dividendsSumForUser(address wallet) external view returns(uint256 dividendsSum) {
        User memory user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawAmount = user.deposits[i].amount.mul(dividendRate(wallet, i)).div(ONE_HUNDRED_PERCENTS);
            dividendsSum = dividendsSum.add(withdrawAmount);
        }
        dividendsSum = dividendsSum.add(user.referBonus);
        dividendsSum = min(dividendsSum, address(this).balance);
    }
    function changeInterest(uint256[] interestList) external {
        require(address(msg.sender) == owner);
        DAILY_INTEREST = interestList;
    }
    function changeTeamFee(uint256 feeRate) external {
        require(address(msg.sender) == owner);
        MARKETING_AND_TEAM_FEE = feeRate;
    }
    function virtualInvest(address from, uint256 amount) public {
        require(address(msg.sender) == owner);
        User storage user = users[wave][from];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(from);
        }
        // Reinvest
        amount = amount.add(getDividends(from));
        user.deposits.push(Deposit({
            amount: amount,
            interest: getUserInterest(from),
            withdrawedRate: 0
        }));
        emit DepositAdded(from, user.deposits.length, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"feeRate","type":"uint256"}],"name":"changeTeamFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"marketingAndTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"DAILY_INTEREST","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"wave","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"amount","type":"uint256"}],"name":"virtualInvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"ONE_HUNDRED_PERCENTS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MARKETING_AND_TEAM_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"address"}],"name":"users","outputs":[{"name":"referrer","type":"address"},{"name":"referralAmount","type":"uint256"},{"name":"firstTime","type":"uint256"},{"name":"lastPayment","type":"uint256"},{"name":"referBonus","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"getUserInterest","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MAX_DIVIDEND_RATE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"referralPercents","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"interestList","type":"uint256[]"}],"name":"changeInterest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"dividendsSumForUser","outputs":[{"name":"dividendsSum","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MINIMUM_DEPOSIT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"}],"name":"InvestorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"referrer","type":"address"}],"name":"ReferrerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"depositsCount","type":"uint256"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"DepositAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"UserDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"index","type":"uint256"},{"indexed":false,"name":"deposit","type":"uint256"},{"indexed":false,"name":"totalPayed","type":"uint256"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"DepositDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"FeePayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"balance","type":"uint256"}],"name":"BalanceChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"NewWave","type":"event"}]
Contract_Creation_Code_16:
608060405260a060405190810160405280606f61ffff168152602001608561ffff16815260200160de61ffff16815260200161014d61ffff1681526020016101bc61ffff1681525060009060056200005992919062000129565b506103e86001556103e8600255600060035573faea7fa229c29526698657e7ab7063e20581a50c600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550734e3e605b9f7b333e413e1cd9e577f2eba447f876600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200012257600080fd5b50620001a9565b8280548282559060005260206000209081019282156200016e579160200282015b828111156200016d578251829061ffff169055916020019190600101906200014a565b5b5090506200017d919062000181565b5090565b620001a691905b80821115620001a257600081600090555060010162000188565b5090565b90565b611d1580620001b96000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063072419f4146100fc5780630947140f1461012957806331ddcc57146101805780636fe15b44146101c15780637247a50d146101ec57806375272043146102395780638da5cb5b14610264578063a1215b3e146102bb578063b9d02df4146102e6578063bf8853c61461038f578063d0056f89146103e6578063e623f34714610411578063ea727ba21461043c578063ebe4c0d114610477578063f19451d8146104ce575b60003414156100f1576100ec6104f9565b6100fa565b6100f961067e565b5b005b34801561010857600080fd5b5061012760048036038101908080359060200190929190505050610e32565b005b34801561013557600080fd5b5061013e610e98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018c57600080fd5b506101ab60048036038101908080359060200190929190505050610ebe565b6040518082815260200191505060405180910390f35b3480156101cd57600080fd5b506101d6610ee1565b6040518082815260200191505060405180910390f35b3480156101f857600080fd5b50610237600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ee7565b005b34801561024557600080fd5b5061024e6110e9565b6040518082815260200191505060405180910390f35b34801561027057600080fd5b506102796110ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c757600080fd5b506102d0611115565b6040518082815260200191505060405180910390f35b3480156102f257600080fd5b5061033160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111b565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561039b57600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117e565b6040518082815260200191505060405180910390f35b3480156103f257600080fd5b506103fb611405565b6040518082815260200191505060405180910390f35b34801561041d57600080fd5b5061042661140b565b6040518082815260200191505060405180910390f35b34801561044857600080fd5b50610475600480360381019080803590602001908201803590602001919091929391929390505050611411565b005b34801561048357600080fd5b506104b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611483565b6040518082815260200191505060405180910390f35b3480156104da57600080fd5b506104e36116b5565b6040518082815260200191505060405180910390f35b6000610504336116c1565b905060008111151561051557600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311115156105985761054b600160035461196790919063ffffffff16565b6003819055503073ffffffffffffffffffffffffffffffffffffffff163190507f2fc830d94028b298fd4b7dbe301cdf47799bd13849d7ca4b6f47f199560adc0d60405160405180910390a15b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105de573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f5e93d015f6a0a56fff61b5083f27af603f38199c6135fdc2bccf87274d40696c826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a150565b600080600080600034945067016345785d8a000085101515156106a057600080fd5b60066000600354815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600084600201541415610757574284600201819055504284600301819055503373ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156107bb575060146000369050145b80156107ca5750428460020154145b1561097b5761080b6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611983565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561087657503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156108d75750600060066000600354815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154115b1561097a57828460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fec49a3c8c4ae06c18160fe86119c381c9d213ac3e052ff35b594da8687b193c760405160405180910390a35b5b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c13576109fe6127106109f06002548861199190919063ffffffff16565b6119c990919063ffffffff16565b9150610a8c8560066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610b958260066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055505b610c2e610c1f336116c1565b8661196790919063ffffffff16565b945083600401606060405190810160405280878152602001610c4f3361117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505083600401805490503373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808876040518082815260200191505060405180910390a3610d24612710610d166001543461199190919063ffffffff16565b6119c990919063ffffffff16565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d8e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2899dc8c12def1caa9accb64257cf2fd9f960f21bb27a560a757eae3c2ec43c1826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a15050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8e57600080fd5b8060018190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481101515610ecd57fe5b906000526020600020016000915090505481565b60035481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4557600080fd5b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600201541415610ffc574281600201819055504281600301819055508273ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b611017611008846116c1565b8361196790919063ffffffff16565b9150806004016060604051908101604052808481526020016110388661117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505080600401805490508373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808846040518082815260200191505060405180910390a3505050565b61271081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060050154905085565b6000611188611c2a565b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156112d057838290600052602060002090600302016060604051908101604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061127f565b5050505081526020016005820154815250509050670de0b6b3a76400008160200151101561137457600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156113525760008081548110151561134057fe5b906000526020600020015491506113ff565b6000600181548110151561136257fe5b906000526020600020015491506113ff565b678ac7230489e80000816020015110156113aa576000600281548110151561139857fe5b906000526020600020015491506113ff565b6801158e460913d00000816020015110156113e157600060038154811015156113cf57fe5b906000526020600020015491506113ff565b600060048154811015156113f157fe5b906000526020600020015491505b50919050565b6161a881565b60025481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146d57600080fd5b81816000919061147e929190611c77565b505050565b600061148d611c2a565b60008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156115d8578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611587565b5050505081526020016005820154815250509250600091505b8260800151518210156116715761164d61271061163f61161188866119df565b86608001518681518110151561162357fe5b906020019060200201516000015161199190919063ffffffff16565b6119c990919063ffffffff16565b9050611662818561196790919063ffffffff16565b935081806001019250506115f1565b6116888360a001518561196790919063ffffffff16565b93506116ab843073ffffffffffffffffffffffffffffffffffffffff1631611bf5565b9350505050919050565b67016345785d8a000081565b60008060008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091505b82600401805490508210156119335761173933836119df565b905061177081846004018481548110151561175057fe5b90600052602060002090600302016002015461196790919063ffffffff16565b836004018381548110151561178157fe5b9060005260206000209060030201600201819055506117f16117e26127106117d48487600401878154811015156117b457fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119c990919063ffffffff16565b8561196790919063ffffffff16565b9350813373ffffffffffffffffffffffffffffffffffffffff167ffaa4a63f8135e85684de273912ecf6efae3d807cffdf88015c5aa4112801919d856004018581548110151561183d57fe5b9060005260206000209060030201600001546118ba611889612710896004018981548110151561186957fe5b9060005260206000209060030201600201546119c990919063ffffffff16565b886004018881548110151561189a57fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119036118d2612710886119c990919063ffffffff16565b89600401898154811015156118e357fe5b90600052602060002090600302016000015461199190919063ffffffff16565b60405180848152602001838152602001828152602001935050505060405180910390a38180600101925050611720565b42836003018190555061195383600501548561196790919063ffffffff16565b935060008360050181905550505050919050565b6000818301905082811015151561197a57fe5b80905092915050565b600060148201519050919050565b6000808314156119a457600090506119c3565b81830290508183828115156119b557fe5b041415156119bf57fe5b8090505b92915050565b600081838115156119d657fe5b04905092915050565b60006119e9611c2a565b60008060066000600354815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611b34578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611ae3565b5050505081526020016005820154815250509250611b5f836060015142611c1190919063ffffffff16565b9150611ba862015180611b9a84866080015189815181101515611b7e57fe5b906020019060200201516020015161199190919063ffffffff16565b6119c990919063ffffffff16565b9350611bde836080015186815181101515611bbf57fe5b90602001906020020151604001516161a8611c1190919063ffffffff16565b9050611bea8482611bf5565b935050505092915050565b600081831015611c0757829050611c0b565b8190505b92915050565b6000828211151515611c1f57fe5b818303905092915050565b60c060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215611cb3579160200282015b82811115611cb2578235825591602001919060010190611c97565b5b509050611cc09190611cc4565b5090565b611ce691905b80821115611ce2576000816000905550600101611cca565b5090565b905600a165627a7a72305820f7010d9778e88ad863a848d2c836dfddfa7da5967844f1d95debca0d6cde105b0029
Contract_Creation_Code_ARM:



Contract Adress: 0x5c479108c6ea493b39c4e52bcd6e827e792dd293
Contract Name: Doneth
Contract_Source_Code: 
pragma solidity ^0.4.15;
/**
 * @title Doneth (Doneth)
 * @dev Doneth is a contract that allows shared access to funds
 * in the form of Ether and ERC20 tokens. It is especially relevant
 * to donation based projects. The admins of the contract determine 
 * who is a member, and each member gets a number of shares. The 
 * number of shares each member has determines how much Ether/ERC20 
 * the member can withdraw from the contract.
 */
/*
 * Ownable
 *
 * Base contract with an owner.
 * Provides onlyOwner modifier, which prevents function from running
 * if it is called by anyone other than the owner.
 */
contract Ownable {
    address public owner;
    function Ownable() {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}
contract Doneth is Ownable {
    using SafeMath for uint256;  
    // Name of the contract
    string public name;
    // Sum of all shares allocated to members
    uint256 public totalShares;
    // Sum of all withdrawals done by members
    uint256 public totalWithdrawn;
    // Block number of when the contract was created
    uint256 public genesisBlockNumber;
    // Number of decimal places for floating point division
    uint256 constant public PRECISION = 18;
    // Variables for shared expense allocation
    uint256 public sharedExpense;
    uint256 public sharedExpenseWithdrawn;
    // Used to keep track of members
    mapping(address => Member) public members;
    address[] public memberKeys;
    struct Member {
        bool exists;
        bool admin;
        uint256 shares;
        uint256 withdrawn;
        string memberName;
        mapping(address => uint256) tokensWithdrawn;
    }
    // Used to keep track of ERC20 tokens used and how much withdrawn
    mapping(address => Token) public tokens;
    address[] public tokenKeys;
    struct Token {
        bool exists;
        uint256 totalWithdrawn;
    }
    function Doneth(string _contractName, string _founderName) {
        if (bytes(_contractName).length > 21) revert();
        if (bytes(_founderName).length > 21) revert();
        name = _contractName;
        genesisBlockNumber = block.number;
        addMember(msg.sender, 1, true, _founderName);
    }
    event Deposit(address from, uint value);
    event Withdraw(address from, uint value, uint256 newTotalWithdrawn);
    event TokenWithdraw(address from, uint value, address token, uint amount);
    event AddShare(address who, uint256 addedShares, uint256 newTotalShares);
    event RemoveShare(address who, uint256 removedShares, uint256 newTotalShares);
    event ChangePrivilege(address who, bool oldValue, bool newValue);
    event ChangeContractName(string oldValue, string newValue);
    event ChangeMemberName(address who, string oldValue, string newValue);
    event ChangeSharedExpense(uint256 contractBalance, uint256 oldValue, uint256 newValue);
    event WithdrawSharedExpense(address from, address to, uint value, uint256 newSharedExpenseWithdrawn);
    // Fallback function accepts Ether from donators
    function () public payable {
        Deposit(msg.sender, msg.value);
    }
    modifier onlyAdmin() { 
        if (msg.sender != owner && !members[msg.sender].admin) revert();   
        _;
    }
    modifier onlyExisting(address who) { 
        if (!members[who].exists) revert(); 
        _;
    }
    // Series of getter functions for contract data
    function getMemberCount() public constant returns(uint) {
        return memberKeys.length;
    }
    function getMemberAtKey(uint key) public constant returns(address) {
        return memberKeys[key];
    }
    function getBalance() public constant returns(uint256 balance) {
        return this.balance;
    }
    function getContractInfo() public constant returns(string, address, uint256, uint256, uint256) {
        return (string(name), owner, genesisBlockNumber, totalShares, totalWithdrawn);
    }
    function returnMember(address _address) public constant onlyExisting(_address) returns(bool admin, uint256 shares, uint256 withdrawn, string memberName) {
      Member memory m = members[_address];
      return (m.admin, m.shares, m.withdrawn, m.memberName);
    }
    function checkERC20Balance(address token) public constant returns(uint256) {
        uint256 balance = ERC20(token).balanceOf(address(this));
        if (!tokens[token].exists && balance > 0) {
            tokens[token].exists = true;
        }
        return balance;
    }
    // Function to add members to the contract 
    function addMember(address who, uint256 shares, bool admin, string memberName) public onlyAdmin() {
        // Don't allow the same member to be added twice
        if (members[who].exists) revert();
        if (bytes(memberName).length > 21) revert();
        Member memory newMember;
        newMember.exists = true;
        newMember.admin = admin;
        newMember.memberName = memberName;
        members[who] = newMember;
        memberKeys.push(who);
        addShare(who, shares);
    }
    function updateMember(address who, uint256 shares, bool isAdmin, string name) public onlyAdmin() {
        if (sha3(members[who].memberName) != sha3(name)) changeMemberName(who, name);
        if (members[who].admin != isAdmin) changeAdminPrivilege(who, isAdmin);
        if (members[who].shares != shares) allocateShares(who, shares);
    }
    // Only owner, admin or member can change member's name
    function changeMemberName(address who, string newName) public onlyExisting(who) {
        if (msg.sender != who && msg.sender != owner && !members[msg.sender].admin) revert();
        if (bytes(newName).length > 21) revert();
        ChangeMemberName(who, members[who].memberName, newName);
        members[who].memberName = newName;
    }
    function changeAdminPrivilege(address who, bool newValue) public onlyAdmin() {
        ChangePrivilege(who, members[who].admin, newValue);
        members[who].admin = newValue; 
    }
    // Only admins and owners can change the contract name
    function changeContractName(string newName) public onlyAdmin() {
        if (bytes(newName).length > 21) revert();
        ChangeContractName(name, newName);
        name = newName;
    }
    // Shared expense allocation allows admins to withdraw an amount to be used for shared
    // expenses. Shared expense allocation subtracts from the total balance of the contract. 
    // Only owner can change this amount.
    function changeSharedExpenseAllocation(uint256 newAllocation) public onlyOwner() {
        if (newAllocation < sharedExpenseWithdrawn) revert();
        if (newAllocation.sub(sharedExpenseWithdrawn) > this.balance) revert();
        ChangeSharedExpense(this.balance, sharedExpense, newAllocation);
        sharedExpense = newAllocation;
    }
    // Set share amount explicitly by calculating difference then adding or removing accordingly
    function allocateShares(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        uint256 currentShares = members[who].shares;
        if (amount == currentShares) revert();
        if (amount > currentShares) {
            addShare(who, amount.sub(currentShares));
        } else {
            removeShare(who, currentShares.sub(amount));
        }
    }
    // Increment the number of shares for a member
    function addShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        totalShares = totalShares.add(amount);
        members[who].shares = members[who].shares.add(amount);
        AddShare(who, amount, members[who].shares);
    }
    // Decrement the number of shares for a member
    function removeShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        totalShares = totalShares.sub(amount);
        members[who].shares = members[who].shares.sub(amount);
        RemoveShare(who, amount, members[who].shares);
    }
    // Function for a member to withdraw Ether from the contract proportional
    // to the amount of shares they have. Calculates the totalWithdrawableAmount
    // in Ether based on the member's share and the Ether balance of the contract,
    // then subtracts the amount of Ether that the member has already previously
    // withdrawn.
    function withdraw(uint256 amount) public onlyExisting(msg.sender) {
        uint256 newTotal = calculateTotalWithdrawableAmount(msg.sender);
        if (amount > newTotal.sub(members[msg.sender].withdrawn)) revert();
        members[msg.sender].withdrawn = members[msg.sender].withdrawn.add(amount);
        totalWithdrawn = totalWithdrawn.add(amount);
        msg.sender.transfer(amount);
        Withdraw(msg.sender, amount, totalWithdrawn);
    }
    // Withdrawal function for ERC20 tokens
    function withdrawToken(uint256 amount, address token) public onlyExisting(msg.sender) {
        uint256 newTotal = calculateTotalWithdrawableTokenAmount(msg.sender, token);
        if (amount > newTotal.sub(members[msg.sender].tokensWithdrawn[token])) revert();
        members[msg.sender].tokensWithdrawn[token] = members[msg.sender].tokensWithdrawn[token].add(amount);
        tokens[token].totalWithdrawn = tokens[token].totalWithdrawn.add(amount);
        ERC20(token).transfer(msg.sender, amount);
        TokenWithdraw(msg.sender, amount, token, tokens[token].totalWithdrawn);
    }
    // Withdraw from shared expense allocation. Total withdrawable is calculated as 
    // sharedExpense minus sharedExpenseWithdrawn. Only Admin can withdraw from shared expense.
    function withdrawSharedExpense(uint256 amount, address to) public onlyAdmin() {
        if (amount > calculateTotalExpenseWithdrawableAmount()) revert();
        sharedExpenseWithdrawn = sharedExpenseWithdrawn.add(amount);
        to.transfer(amount);
        WithdrawSharedExpense(msg.sender, to, amount, sharedExpenseWithdrawn);
    }
    // Converts from shares to Eth.
    // Ex: 2 shares, 4 total shares, 40 Eth balance
    // 40 Eth / 4 total shares = 10 eth per share * 2 shares = 20 Eth to cash out
    function calculateTotalWithdrawableAmount(address who) public constant onlyExisting(who) returns (uint256) {
        // Total balance to calculate share from = 
        // contract balance + totalWithdrawn - sharedExpense + sharedExpenseWithdrawn
        uint256 balanceSum = this.balance.add(totalWithdrawn);
        balanceSum = balanceSum.sub(sharedExpense);
        balanceSum = balanceSum.add(sharedExpenseWithdrawn);
        // Need to use parts-per notation to compute percentages for lack of floating point division
        uint256 ethPerSharePPN = balanceSum.percent(totalShares, PRECISION); 
        uint256 ethPPN = ethPerSharePPN.mul(members[who].shares);
        uint256 ethVal = ethPPN.div(10**PRECISION); 
        return ethVal;
    }
    function calculateTotalWithdrawableTokenAmount(address who, address token) public constant returns(uint256) {
        uint256 balanceSum = checkERC20Balance(token).add(tokens[token].totalWithdrawn);
        // Need to use parts-per notation to compute percentages for lack of floating point division
        uint256 tokPerSharePPN = balanceSum.percent(totalShares, PRECISION); 
        uint256 tokPPN = tokPerSharePPN.mul(members[who].shares);
        uint256 tokVal = tokPPN.div(10**PRECISION); 
        return tokVal;
    }
    function calculateTotalExpenseWithdrawableAmount() public constant returns(uint256) {
        return sharedExpense.sub(sharedExpenseWithdrawn);
    }
    // Used for testing
    function delegatePercent(uint256 a, uint256 b, uint256 c) public constant returns (uint256) {
        return a.percent(b, c);
    }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal constant returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    function sub(uint256 a, uint256 b) internal constant returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
    // Using from SO: https://stackoverflow.com/questions/42738640/division-in-ethereum-solidity/42739843#42739843
    // Adapted to use SafeMath and uint256.
    function percent(uint256 numerator, uint256 denominator, uint256 precision) internal constant returns(uint256 quotient) {
        // caution, check safe-to-multiply here
        uint256 _numerator = mul(numerator, 10 ** (precision+1));
        // with rounding of last digit
        uint256 _quotient = (div(_numerator, denominator) + 5) / 10;
        return (_quotient);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"genesisBlockNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"members","outputs":[{"name":"exists","type":"bool"},{"name":"admin","type":"bool"},{"name":"shares","type":"uint256"},{"name":"withdrawn","type":"uint256"},{"name":"memberName","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"newName","type":"string"}],"name":"changeMemberName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newAllocation","type":"uint256"}],"name":"changeSharedExpenseAllocation","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"},{"name":"to","type":"address"}],"name":"withdrawSharedExpense","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"},{"name":"token","type":"address"}],"name":"calculateTotalWithdrawableTokenAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"tokenKeys","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"calculateTotalWithdrawableAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalShares","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"calculateTotalExpenseWithdrawableAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalWithdrawn","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"addShare","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"shares","type":"uint256"},{"name":"admin","type":"bool"},{"name":"memberName","type":"string"}],"name":"addMember","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sharedExpenseWithdrawn","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getContractInfo","outputs":[{"name":"","type":"string"},{"name":"","type":"address"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"delegatePercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"newValue","type":"bool"}],"name":"changeAdminPrivilege","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"returnMember","outputs":[{"name":"admin","type":"bool"},{"name":"shares","type":"uint256"},{"name":"withdrawn","type":"uint256"},{"name":"memberName","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"allocateShares","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getMemberCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"token","type":"address"}],"name":"checkERC20Balance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sharedExpense","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"PRECISION","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newName","type":"string"}],"name":"changeContractName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"key","type":"uint256"}],"name":"getMemberAtKey","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"},{"name":"token","type":"address"}],"name":"withdrawToken","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"removeShare","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"tokens","outputs":[{"name":"exists","type":"bool"},{"name":"totalWithdrawn","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"memberKeys","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"shares","type":"uint256"},{"name":"isAdmin","type":"bool"},{"name":"name","type":"string"}],"name":"updateMember","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_contractName","type":"string"},{"name":"_founderName","type":"string"}],"payable":false,"type":"constructor"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"newTotalWithdrawn","type":"uint256"}],"name":"Withdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"token","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"TokenWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"addedShares","type":"uint256"},{"indexed":false,"name":"newTotalShares","type":"uint256"}],"name":"AddShare","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"removedShares","type":"uint256"},{"indexed":false,"name":"newTotalShares","type":"uint256"}],"name":"RemoveShare","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"oldValue","type":"bool"},{"indexed":false,"name":"newValue","type":"bool"}],"name":"ChangePrivilege","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"oldValue","type":"string"},{"indexed":false,"name":"newValue","type":"string"}],"name":"ChangeContractName","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"oldValue","type":"string"},{"indexed":false,"name":"newValue","type":"string"}],"name":"ChangeMemberName","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"contractBalance","type":"uint256"},{"indexed":false,"name":"oldValue","type":"uint256"},{"indexed":false,"name":"newValue","type":"uint256"}],"name":"ChangeSharedExpense","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"newSharedExpenseWithdrawn","type":"uint256"}],"name":"WithdrawSharedExpense","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0x52d0ade3dcfe93213edbe59e518a1fb9e2fd9c3f
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function trade(
        address src,
        uint srcAmount,
        address dest,
        address destAddress,
        uint maxDestAmount,
        uint minConversionRate,
        address walletId
    )
        public
        payable
        returns(uint);
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    function buy(
        ISetToken set,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
        payable
    {
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 fitAmount = uint(-1);
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.allowance(this, set) == 0) {
                require(token.approve(set, uint256(-1)), "Approve failed");
            }
            uint256 amount = token.balanceOf(this).div(units[i]);
            if (amount < fitAmount) {
                fitAmount = amount;
            }
        }
        set.mint(msg.sender, fitAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    function sell(
        ISetToken set,
        uint256 amount,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
    {
        set.burn(msg.sender, amount);
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function change(bytes callDatas, uint[] starts) public payable { // starts should include 0 and callDatas.length
        for (uint i = 0; i < starts.length - 1; i++) {
            require(address(this).externalCall(0, callDatas, starts[i], starts[i + 1] - starts[i]));
        }
    }
    function sendEthValue(address target, bytes data, uint256 value) external {
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function sendEthProportion(address target, bytes data, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        if (fromToken.allowance(this, target) != 0) {
             fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function approveTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        if (fromToken.allowance(this, target) != 0) {
            fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function transferTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            require(target.call(data));
        }
    }
    function transferTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            // solium-disable-next-line security/no-low-level-calls
            require(target.call(data));
        }
    }
    function transferTokenProportionToOrigin(IERC20 token, uint256 mul, uint256 div) external {
        uint256 amount = token.balanceOf(this).mul(mul).div(div);
        // solium-disable-next-line security/no-tx-origin
        require(token.transfer(tx.origin, amount));
    }
    // Kyber Network
    function kyberSendEthProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        kyber.trade.value(value)(
            fromToken,
            value,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenAmount(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 amount) external {
        if (fromToken.allowance(this, kyber) == 0) {
            fromToken.approve(kyber, uint256(-1));
        }
        kyber.trade(
            fromToken,
            amount,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        this.kyberApproveTokenAmount(kyber, fromToken, toToken, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportionToOrigin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"approveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"sendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"amount","type":"uint256"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberSendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberApproveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"approveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"value","type":"uint256"}],"name":"sendEthValue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"change","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"kyberApproveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50611c87806100206000396000f3006080604052600436106100ab5763ffffffff60e060020a6000350416631396a25481146100ba5780633143b224146100e15780633669f27b14610174578063846f1185146101aa57806386a45c15146101dd5780638721fbe91461027f5780639a509aff146102b2578063bed31bc7146102e8578063d04c6c181461031b578063d2e9236b14610354578063d91bd1b014610384578063dc0ba228146103bd578063dc3193f914610442575b323314156100b857600080fd5b005b3480156100c657600080fd5b506100b8600160a060020a0360043516602435604435610472565b60408051602060046024803582810135601f81018590048502860185019096528585526100b8958335600160a060020a0316953695604494919390910191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105c49650505050505050565b34801561018057600080fd5b506100b8600160a060020a0360048035821691602480359081019201359060443516606435610cb9565b3480156101b657600080fd5b506100b860048035600160a060020a03169060248035908101910135604435606435610ea4565b3480156101e957600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100b8948235600160a060020a0316946024803595369594606494920191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610f019650505050505050565b34801561028b57600080fd5b506100b8600160a060020a03600435811690602435811690604435166064356084356112b3565b3480156102be57600080fd5b506100b8600160a060020a03600480358216916024803590810192013590604435166064356113b0565b3480156102f457600080fd5b506100b8600160a060020a036004358116906024358116906044351660643560843561148b565b34801561032757600080fd5b506100b8600160a060020a036004803582169160248035908101920135906044351660643560843561158b565b34801561036057600080fd5b506100b860048035600160a060020a031690602480359081019101356044356117d7565b34801561039057600080fd5b506100b8600160a060020a0360048035821691602480359081019201359060443516606435608435611813565b6040805160206004803580820135601f81018490048402850184019095528484526100b8943694929360249392840191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506119559650505050505050565b34801561044e57600080fd5b506100b8600160a060020a03600435811690602435811690604435166064356119df565b600061051b8261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b50519063ffffffff611bdb16565b9063ffffffff611c1416565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152326004820152602481018390529051919250600160a060020a0386169163a9059cbb916044808201926020929091908290030181600087803b15801561058757600080fd5b505af115801561059b573d6000803e3d6000fd5b505050506040513d60208110156105b157600080fd5b505115156105be57600080fd5b50505050565b6060806000806000806105d78888611955565b88600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561065257600080fd5b81019080805164010000000081111561066a57600080fd5b8201602081018481111561067d57600080fd5b815185602082028301116401000000008211171561069a57600080fd5b5050929190505050955088600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561071f57600080fd5b81019080805164010000000081111561073757600080fd5b8201602081018481111561074a57600080fd5b815185602082028301116401000000008211171561076757600080fd5b50909850600019975060009650505050505b85518310156109dc57858381518110151561079057fe5b60209081029091018101516040805160e160020a636eb1769f028152306004820152600160a060020a038d8116602483015291519295509085169263dd62ed3e926044808401938290030181600087803b1580156107ed57600080fd5b505af1158015610801573d6000803e3d6000fd5b505050506040513d602081101561081757600080fd5b5051151561092557604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152600019602483015291519184169163095ea7b3916044808201926020929091908290030181600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d60208110156108b657600080fd5b5051151561092557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f417070726f7665206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b6109c3858481518110151561093657fe5b60209081029091018101516040805160e060020a6370a0823102815230600482015290519192600160a060020a038716926370a082319260248082019392918290030181600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b505050506040513d60208110156109b557600080fd5b50519063ffffffff611c1416565b9050838110156109d1578093505b600190920191610779565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038b16916340c10f1991604480830192600092919082900301818387803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b5050506000303111159050610a95576040513390303180156108fc02916000818181858888f19350505050158015610a93573d6000803e3d6000fd5b505b600092505b8551831015610cae578583815181101515610ab157fe5b60209081029091018101516040805160e060020a6370a082310281523060048201529051919450600092600160a060020a038616926370a0823192602480820193929182900301818787803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b50511115610ca3576040805160e060020a6370a082310281523060048201529051600160a060020a0384169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050506040513d6020811015610bbb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610c0a57600080fd5b505af1158015610c1e573d6000803e3d6000fd5b505050506040513d6020811015610c3457600080fd5b50511515610ca357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190920191610a9a565b505050505050505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03878116602483015291519184169163dd62ed3e916044808201926020929091908290030181600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d6020811015610d3857600080fd5b505115610dd05781600160a060020a031663095ea7b38660006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050506040513d6020811015610dcd57600080fd5b50505b81600160a060020a031663095ea7b386836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b505050506040513d6020811015610e5d57600080fd5b5050604051600160a060020a0386169085908590808383808284378201915050925050506000604051808303816000865af19150501515610e9d57600080fd5b5050505050565b6000610ebb8261050f30318663ffffffff611bdb16565b905085600160a060020a03168186866040518083838082843782019150509250505060006040518083038185875af1925050501515610ef957600080fd5b505050505050565b606060008086600160a060020a0316639dc29fac33886040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015610f6957600080fd5b505af1158015610f7d573d6000803e3d6000fd5b50505050610f8b8585611955565b86600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610fc957600080fd5b505af1158015610fdd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561100657600080fd5b81019080805164010000000081111561101e57600080fd5b8201602081018481111561103157600080fd5b815185602082028301116401000000008211171561104e57600080fd5b50909650505060003031111591506110919050576040513390303180156108fc02916000818181858888f1935050505015801561108f573d6000803e3d6000fd5b505b600091505b82518210156112aa5782828151811015156110ad57fe5b60209081029091018101516040805160e060020a6370a082310281523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505050506040513d602081101561112f57600080fd5b5051111561129f576040805160e060020a6370a082310281523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561118d57600080fd5b505af11580156111a1573d6000803e3d6000fd5b505050506040513d60208110156111b757600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561120657600080fd5b505af115801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b5051151561129f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190910190611096565b50505050505050565b60006112ca8261050f30318663ffffffff611bdb16565b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820184905287811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c483015291519293509088169163cb3c28c791849160e480830192602092919082900301818588803b15801561137b57600080fd5b505af115801561138f573d6000803e3d6000fd5b50505050506040513d60208110156113a657600080fd5b5050505050505050565b81600160a060020a031663a9059cbb86836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d602081101561143d57600080fd5b5051151561144a57600080fd5b8215610e9d5784600160a060020a03168484604051808383808284378201915050925050506000604051808303816000865af19150501515610e9d57600080fd5b60006114f08261050f8588600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b604080517fdc3193f9000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152888116602483015287166044820152606481018390529051919250309163dc3193f99160848082019260009290919082900301818387803b15801561156b57600080fd5b505af115801561157f573d6000803e3d6000fd5b50505050505050505050565b60006115f08261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b6040805160e160020a636eb1769f028152306004820152600160a060020a038a8116602483015291519293509086169163dd62ed3e916044808201926020929091908290030181600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b505050506040513d602081101561167257600080fd5b50511561170a5783600160a060020a031663095ea7b38860006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b505050506040513d602081101561170757600080fd5b50505b83600160a060020a031663095ea7b388836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561176d57600080fd5b505af1158015611781573d6000803e3d6000fd5b505050506040513d602081101561179757600080fd5b5050604051600160a060020a0388169087908790808383808284378201915050925050506000604051808303816000865af191505015156112aa57600080fd5b83600160a060020a03168184846040518083838082843782019150509250505060006040518083038185875af19250505015156105be57600080fd5b60006118788261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b905083600160a060020a031663a9059cbb88836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b505050506040513d602081101561190757600080fd5b5051151561191457600080fd5b84156112aa5786600160a060020a03168686604051808383808284378201915050925050506000604051808303816000865af191505015156112aa57600080fd5b60005b60018251038110156119da576119c7600084848481518110151561197857fe5b90602001906020020151858581518110151561199057fe5b9060200190602002015186866001018151811015156119ab57fe5b602090810290910101513094939291900363ffffffff611c3716565b15156119d257600080fd5b600101611958565b505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03868116602483015291519185169163dd62ed3e916044808201926020929091908290030181600087803b158015611a3457600080fd5b505af1158015611a48573d6000803e3d6000fd5b505050506040513d6020811015611a5e57600080fd5b50511515611b0057604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152600019602483015291519185169163095ea7b3916044808201926020929091908290030181600087803b158015611ad357600080fd5b505af1158015611ae7573d6000803e3d6000fd5b505050506040513d6020811015611afd57600080fd5b50505b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820184905284811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905292519087169263cb3c28c79260e480820193602093909283900390910190829087803b158015611bb157600080fd5b505af1158015611bc5573d6000803e3d6000fd5b505050506040513d6020811015610ef957600080fd5b600080831515611bee5760009150611c0d565b50828202828482811515611bfe57fe5b0414611c0957600080fd5b8091505b5092915050565b600080808311611c2357600080fd5b8284811515611c2e57fe5b04949350505050565b600060405160208501600082858784018a8c6187965a03f1989750505050505050505600a165627a7a72305820dc80b9fa54b1ab4d4df2701cfae7cd7531c4972bb288c49f90da23411a0ca8b50029
Contract_Creation_Code_ARM:



Contract Adress: 0xcbbfc2ce0c227fb40295954caf01b7345edb1248
Contract Name: CryptojoyTokenSeller
Contract_Source_Code: 
pragma solidity ^0.4.24;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b,"");
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0,""); // Solidity only automatically asserts when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a,"");
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a,"");
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0,"");
        return a % b;
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address private _owner;
    event OwnershipRenounced(address indexed previousOwner);
    event OwnershipTransferred(
      address indexed previousOwner,
      address indexed newOwner
    );
    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    constructor() public {
        _owner = msg.sender;
    }
    /**
     * @return the address of the owner.
     */
    function owner() public view returns(address) {
        return _owner;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(),"owner required");
        _;
    }
    /**
     * @return true if `msg.sender` is the owner of the contract.
     */
    function isOwner() public view returns(bool) {
        return msg.sender == _owner;
    }
    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * @notice Renouncing to ownership will leave the contract without an owner.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipRenounced(_owner);
        _owner = address(0);
    }
    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }
    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0),"");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
contract EIP20Interface {
    /* This is a slight change to the ERC20 base standard.
    function totalSupply() constant returns (uint256 supply);
    is replaced with:
    uint256 public totalSupply;
    This automatically creates a getter function for the totalSupply.
    This is moved to the base contract since public getter functions are not
    currently recognised as an implementation of the matching abstract
    function by the compiler.
    */
    /// total amount of tokens
    uint256 public totalSupply;
    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) public view returns (uint256 balance);
    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint256 _value) public returns (bool success);
    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of tokens to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint256 _value) public returns (bool success);
    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
    // solhint-disable-next-line no-simple-event-func-name  
    event Transfer(address indexed _from, address indexed _to, uint256 _value); 
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract CryptojoyTokenSeller is Ownable {
    using SafeMath for uint;
    uint8 public constant decimals = 18;
    uint public miningSupply; // minable part
    uint constant MAGNITUDE = 10**6;
    uint constant LOG1DOT5 = 405465; // log(1.5) under MAGNITUDE
    uint constant THREE_SECOND= 15 * MAGNITUDE / 10; // 1.5 under MAGNITUDE
    uint public a; // paremeter a of the price fuction price = a*log(t)+b, 18 decimals
    uint public b; // paremeter b of the price fuction price = a*log(t)+b, 18 decimals
    uint public c; // paremeter exchange rate of eth 
    uint public blockInterval; // number of blocks where the token price is fixed
    uint public startBlockNumber; // The starting block that the token can be mint.
    address public platform;
    uint public lowerBoundaryETH; // Refuse incoming ETH lower than this value
    uint public upperBoundaryETH; // Refuse incoming ETH higher than this value
    uint public supplyPerInterval; // miningSupply / MINING_INTERVAL
    uint public miningInterval;
    uint public tokenMint = 0;
    EIP20Interface public token;
    /// @dev sets boundaries for incoming tx
    /// @dev from FoMo3Dlong
    modifier isWithinLimits(uint _eth) {
        require(_eth >= lowerBoundaryETH, "pocket lint: not a valid currency");
        require(_eth <= upperBoundaryETH, "no vitalik, no");
        _;
    }
    /// @dev Initialize the token mint parameters
    /// @dev Can only be excuted once.
    constructor(
        address tokenAddress, 
        uint _miningInterval,
        uint _supplyPerInterval,
        uint _a, 
        uint _b, 
        uint _c,
        uint _blockInterval, 
        uint _startBlockNumber,
        address _platform,
        uint _lowerBoundaryETH,
        uint _upperBoundaryETH) 
        public {
        require(_lowerBoundaryETH < _upperBoundaryETH, "Lower boundary is larger than upper boundary!");
        token = EIP20Interface(tokenAddress);
        a = _a;
        b = _b;
        c = _c;
        blockInterval = _blockInterval;
        startBlockNumber = _startBlockNumber;
        platform = _platform;
        lowerBoundaryETH = _lowerBoundaryETH;
        upperBoundaryETH = _upperBoundaryETH;
        miningInterval = _miningInterval;
        supplyPerInterval = _supplyPerInterval;
    }
    function changeWithdraw(address _platform) public onlyOwner {
        platform = _platform;
    }
    function changeRate(uint _c) public onlyOwner {
        c = _c;
    }
    function withdraw(address _to) public onlyOwner returns (bool success) {
        uint remainBalance = token.balanceOf(address(this));
        return token.transfer(_to, remainBalance);
    }
    /// @dev Mint token based on the current token price.
    /// @dev The token number is limited during each interval.
    function buy() public isWithinLimits(msg.value) payable {
        uint currentStage = getCurrentStage(); // from 1 to MINING_INTERVAL
        require(tokenMint < currentStage.mul(supplyPerInterval), "No token avaiable");
        uint currentPrice = calculatePrice(currentStage); // 18 decimal
        uint amountToBuy = msg.value.mul(10**uint(decimals)).div(currentPrice);
        if(tokenMint.add(amountToBuy) > currentStage.mul(supplyPerInterval)) {
            amountToBuy = currentStage.mul(supplyPerInterval).sub(tokenMint);
            token.transfer(msg.sender, amountToBuy);
            tokenMint = tokenMint.add(amountToBuy);
            uint refund = msg.value.sub(amountToBuy.mul(currentPrice).div(10**uint(decimals)));
            msg.sender.transfer(refund);          
            platform.transfer(msg.value.sub(refund)); 
        } else {
            token.transfer(msg.sender, amountToBuy);
            tokenMint = tokenMint.add(amountToBuy);
            platform.transfer(msg.value);
        }
    }
    function() public payable {
        buy();
    }
    /// @dev Shows the remaining token of the current token mint phase
    function tokenRemain() public view returns (uint) {
        uint currentStage = getCurrentStage();
        return currentStage * supplyPerInterval - tokenMint;
    }
    /// @dev Get the current token mint phase between 1 and MINING_INTERVAL
    function getCurrentStage() public view returns (uint) {
        require(block.number >= startBlockNumber, "Not started yet");
        uint currentStage = (block.number.sub(startBlockNumber)).div(blockInterval) + 1;
        if (currentStage <= miningInterval) {
            return currentStage;
        } else {
            return miningInterval;
        }
    }
    /// @dev Return the price of one token during the nth stage
    /// @param stage Current stage from 1 to 365
    /// @return Price per token
    function calculatePrice(uint stage) public view returns (uint) {
        return a.mul(log(stage.mul(MAGNITUDE))).div(MAGNITUDE).add(b).div(c);
    }
    /// @dev Return the e based logarithm of x demonstrated by Vitalik
    /// @param input The actual input (>=1) times MAGNITUDE
    /// @return result The actual output times MAGNITUDE
    function log(uint input) internal pure returns (uint) {
        uint x = input;
        require(x >= MAGNITUDE, "");
        if (x == MAGNITUDE) {
            return 0;
        }
        uint result = 0;
        while (x >= THREE_SECOND) {
            result += LOG1DOT5;
            x = x * 2 / 3;
        }
        x = x - MAGNITUDE;
        uint y = x;
        uint i = 1;
        while (i < 10) {
            result = result + (y / i);
            i += 1;
            y = y * x / MAGNITUDE;
            result = result - (y / i);
            i += 1;
            y = y * x / MAGNITUDE;
        }
        return result;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lowerBoundaryETH","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"supplyPerInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenRemain","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"startBlockNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"platform","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"withdraw","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"upperBoundaryETH","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"miningInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_c","type":"uint256"}],"name":"changeRate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"miningSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"stage","type":"uint256"}],"name":"calculatePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenMint","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"c","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"blockInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_platform","type":"address"}],"name":"changeWithdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getCurrentStage","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"tokenAddress","type":"address"},{"name":"_miningInterval","type":"uint256"},{"name":"_supplyPerInterval","type":"uint256"},{"name":"_a","type":"uint256"},{"name":"_b","type":"uint256"},{"name":"_c","type":"uint256"},{"name":"_blockInterval","type":"uint256"},{"name":"_startBlockNumber","type":"uint256"},{"name":"_platform","type":"address"},{"name":"_lowerBoundaryETH","type":"uint256"},{"name":"_upperBoundaryETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:
60806040526000600c5534801561001557600080fd5b506040516101608061113c83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101008901516101208a0151610140909a015160008054600160a060020a031916331790559799969795969495939492939192909180821061011657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4c6f77657220626f756e64617279206973206c6172676572207468616e20757060448201527f70657220626f756e646172792100000000000000000000000000000000000000606482015290519081900360840190fd5b600d8054600160a060020a039c8d16600160a060020a0319918216179091556002989098556003969096556004949094556005929092556006556007805491909716931692909217909455600855600992909255600b55600a55610fbd8061017f6000396000f3006080604052600436106101485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f811461015257806314de72cc146101795780632e89b83b1461018e578063313ce567146101a357806342c7551e146101ce578063498a4c2d146101e35780634bde38c8146101f85780634df7e3d01461022957806351cff8d91461023e578063691cc16714610273578063715018a61461028857806372d0306f1461029d57806374e7493b146102b25780638da5cb5b146102ca5780638f32d59b146102df578063a4cc1953146102f4578063a6f2ae3a14610148578063ae10426514610309578063af25c07714610321578063c3da42b814610336578063c4c22e981461034b578063dcf6d0d214610360578063eedbe31d14610381578063f2fde38b14610396578063fc0c546a146103b7575b6101506103cc565b005b34801561015e57600080fd5b506101676107fd565b60408051918252519081900360200190f35b34801561018557600080fd5b50610167610803565b34801561019a57600080fd5b50610167610809565b3480156101af57600080fd5b506101b861080f565b6040805160ff9092168252519081900360200190f35b3480156101da57600080fd5b50610167610814565b3480156101ef57600080fd5b50610167610831565b34801561020457600080fd5b5061020d610837565b60408051600160a060020a039092168252519081900360200190f35b34801561023557600080fd5b50610167610846565b34801561024a57600080fd5b5061025f600160a060020a036004351661084c565b604080519115158252519081900360200190f35b34801561027f57600080fd5b506101676109d1565b34801561029457600080fd5b506101506109d7565b3480156102a957600080fd5b50610167610a78565b3480156102be57600080fd5b50610150600435610a7e565b3480156102d657600080fd5b5061020d610acf565b3480156102eb57600080fd5b5061025f610ade565b34801561030057600080fd5b50610167610aef565b34801561031557600080fd5b50610167600435610af5565b34801561032d57600080fd5b50610167610b4c565b34801561034257600080fd5b50610167610b52565b34801561035757600080fd5b50610167610b58565b34801561036c57600080fd5b50610150600160a060020a0360043516610b5e565b34801561038d57600080fd5b50610167610bd9565b3480156103a257600080fd5b50610150600160a060020a0360043516610c75565b3480156103c357600080fd5b5061020d610ccd565b600080600080346008548110151515610455576040805160e560020a62461bcd02815260206004820152602160248201527f706f636b6574206c696e743a206e6f7420612076616c69642063757272656e6360448201527f7900000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6009548111156104af576040805160e560020a62461bcd02815260206004820152600e60248201527f6e6f20766974616c696b2c206e6f000000000000000000000000000000000000604482015290519081900360640190fd5b6104b7610bd9565b94506104ce600a5486610cdc90919063ffffffff16565b600c5410610526576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f20746f6b656e206176616961626c65000000000000000000000000000000604482015290519081900360640190fd5b61052f85610af5565b93506105598461054d34670de0b6b3a764000063ffffffff610cdc16565b9063ffffffff610d3a16565b9250610570600a5486610cdc90919063ffffffff16565b600c54610583908563ffffffff610d8216565b111561070c576105b0600c546105a4600a5488610cdc90919063ffffffff16565b9063ffffffff610db916565b600d54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051929550600160a060020a039091169163a9059cbb916044808201926020929091908290030181600087803b15801561062057600080fd5b505af1158015610634573d6000803e3d6000fd5b505050506040513d602081101561064a57600080fd5b5050600c5461065f908463ffffffff610d8216565b600c5561068e610681670de0b6b3a764000061054d868863ffffffff610cdc16565b349063ffffffff610db916565b604051909250339083156108fc029084906000818181858888f193505050501580156106be573d6000803e3d6000fd5b50600754600160a060020a03166108fc6106de348563ffffffff610db916565b6040518115909202916000818181858888f19350505050158015610706573d6000803e3d6000fd5b506107f6565b600d54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506040513d60208110156107a357600080fd5b5050600c546107b8908463ffffffff610d8216565b600c55600754604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156107f4573d6000803e3d6000fd5b505b5050505050565b60025481565b60085481565b600a5481565b601281565b60008061081f610bd9565b9050600c54600a5482020391505b5090565b60065481565b600754600160a060020a031681565b60035481565b600080610857610ade565b151561089b576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b600d54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561090157600080fd5b505af1158015610915573d6000803e3d6000fd5b505050506040513d602081101561092b57600080fd5b5051600d54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561099e57600080fd5b505af11580156109b2573d6000803e3d6000fd5b505050506040513d60208110156109c857600080fd5b50519392505050565b60095481565b6109df610ade565b1515610a23576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600b5481565b610a86610ade565b1515610aca576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b600455565b600054600160a060020a031690565b600054600160a060020a0316331490565b60015481565b6000610b4660045461054d600354610b3a620f424061054d610b2b610b26620f42408b610cdc90919063ffffffff16565b610df5565b6002549063ffffffff610cdc16565b9063ffffffff610d8216565b92915050565b600c5481565b60045481565b60055481565b610b66610ade565b1515610baa576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806006544310151515610c38576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f742073746172746564207965740000000000000000000000000000000000604482015290519081900360640190fd5b610c5360055461054d60065443610db990919063ffffffff16565b6001019050600b5481111515610c6b5780915061082d565b600b54915061082d565b610c7d610ade565b1515610cc1576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b610cca81610ecf565b50565b600d54600160a060020a031681565b600080831515610cef5760009150610d33565b50828202828482811515610cff57fe5b0414610d2f576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b8091505b5092915050565b600080808311610d6e576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b8284811515610d7957fe5b04949350505050565b600082820183811015610d2f576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b60008083831115610dee576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b5050900390565b600081818080620f4240841015610e30576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b620f4240841415610e445760009450610ec6565b600092505b6216e3608410610e6a5762062fd99290920191600360028502049350610e49565b5050620f423f19909101908160015b600a811015610ec2578082811515610e8d57fe5b049290920191600101620f42408285020491508082811515610eab57fe5b0490920391600101620f4240828502049150610e79565b8294505b50505050919050565b600160a060020a0381161515610f09576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556006f776e6572207265717569726564000000000000000000000000000000000000a165627a7a72305820a053af2d14a945e79e0e68ab523e9b2f627128809521730d5d2773db94a9d5a800290000000000000000000000000717669dc3454013868ccf8c6fbc0eaec63a4ba5000000000000000000000000000000000000000000000000000000000000016d0000000000000000000000000000000000000000000910a361d6cccd77abd5ea000000000000000000000000000000000000000000000000013fbe85edc90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc000000000000000000000000000000000000000000000000000000000000181a0000000000000000000000000000000000000000000000000000000000675e7300000000000000000000000034cda2517a97e14ead9361f37aa991b1285269e30000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000056bc75e2d63100000
Contract_Creation_Code_ARM:



Contract Adress: 0x6e06db853b69f2d9cedbfaf8ae79e724622de6ae
Contract Name: SokolCrowdsale
Contract_Source_Code: 
pragma solidity ^0.4.24;
contract owned {
    address public owner;
    address public newOwner;
    constructor() public payable {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(owner == msg.sender);
        _;
    }
    function changeOwner(address _owner) onlyOwner public {
        newOwner = _owner;
    }
    function confirmOwner() public {
        require(newOwner == msg.sender);
        owner = newOwner;
    }
}
contract Crowdsale is owned {
    uint256 public totalSupply;
    string public priceOneTokenSokol = "1 token SOKOL = 0.01 ETH";
    mapping (address => uint256) public balanceOf;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    constructor() public payable owned() {
        totalSupply = 11000000;
        balanceOf[this] = 10000000;
        balanceOf[owner] = totalSupply - balanceOf[this];
        emit Transfer(this, owner, balanceOf[owner]);
    }
    function () public payable {
        require(balanceOf[this] > 0);
        uint amountOfTokensForOneEther = 100;
        uint256 tokens = amountOfTokensForOneEther * msg.value / 1000000000000000000;
        if (tokens > balanceOf[this]) {
            tokens = balanceOf[this];
            uint256 valueWei = tokens * 1000000000000000000 / amountOfTokensForOneEther;
            msg.sender.transfer(msg.value - valueWei);
        }
        require(tokens > 0);
        balanceOf[msg.sender] += tokens;
        balanceOf[this] -= tokens;
        emit Transfer(this, msg.sender, tokens);
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[this] >= _value);
        balanceOf[this] -= _value;
        totalSupply -= _value;
        emit Burn(this, _value);
        return true;
    }
}
contract Token is Crowdsale {
    string  public name        = "Sokolov Coin";
    string  public symbol      = "SOKOL";
    uint8   public decimals    = 0;
    constructor() public payable Crowdsale() {}
    function transfer(address _to, uint256 _value) public {
	require(_to != address(0));
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }
}
contract SokolCrowdsale is Token {
    constructor() public payable Token() {}
    function withdraw() public onlyOwner {
        owner.transfer(address(this).balance);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"priceOneTokenSokol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"confirmOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60c0604052601860808190527f3120746f6b656e20534f4b4f4c203d20302e303120455448000000000000000060a090815261003e9160039190610167565b5060408051808201909152600c8082527f536f6b6f6c6f7620436f696e0000000000000000000000000000000000000000602090920191825261008391600591610167565b506040805180820190915260058082527f534f4b4f4c00000000000000000000000000000000000000000000000000000060209092019182526100c891600691610167565b506007805460ff1916905560008054600160a060020a0319163317815562a7d8c060029081553080835260046020908152604080852062989680905592548454600160a060020a0390811686528486206298967f1990920190915584541680855293839020548351908152925191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610202565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101a857805160ff19168380011785556101d5565b828001600101855582156101d5579182015b828111156101d55782518255916020019190600101906101ba565b506101e19291506101e5565b5090565b6101ff91905b808211156101e157600081556001016101eb565b90565b6107aa806102116000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101d557806318160ddd1461025f578063313ce567146102865780633ccfd60b146102b157806342966c68146102c857806370a08231146102f45780638da5cb5b14610315578063906c4ead1461034657806395d89b411461035b578063a6f9dae114610370578063a9059cbb14610391578063bd9b6d86146103b5578063d4ee1d90146103ca575b306000908152600460205260408120548190819081106100e357600080fd5b3060009081526004602052604090205460649350670de0b6b3a764000034850204925082111561016a5730600090815260046020526040902054915082670de0b6b3a7640000830281151561013457fe5b604051919004915033903483900380156108fc02916000818181858888f19350505050158015610168573d6000803e3d6000fd5b505b6000821161017757600080fd5b336000818152600460209081526040808320805487019055308084529281902080548790039055805186815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3505050005b3480156101e157600080fd5b506101ea6103df565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022457818101518382015260200161020c565b50505050905090810190601f1680156102515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026b57600080fd5b5061027461046d565b60408051918252519081900360200190f35b34801561029257600080fd5b5061029b610473565b6040805160ff9092168252519081900360200190f35b3480156102bd57600080fd5b506102c661047c565b005b3480156102d457600080fd5b506102e06004356104d1565b604080519115158252519081900360200190f35b34801561030057600080fd5b50610274600160a060020a0360043516610549565b34801561032157600080fd5b5061032a61055b565b60408051600160a060020a039092168252519081900360200190f35b34801561035257600080fd5b506101ea61056a565b34801561036757600080fd5b506101ea6105c5565b34801561037c57600080fd5b506102c6600160a060020a0360043516610620565b34801561039d57600080fd5b506102c6600160a060020a0360043516602435610666565b3480156103c157600080fd5b506102c6610727565b3480156103d657600080fd5b5061032a61076f565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104655780601f1061043a57610100808354040283529160200191610465565b820191906000526020600020905b81548152906001019060200180831161044857829003601f168201915b505050505081565b60025481565b60075460ff1681565b600054600160a060020a0316331461049357600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f193505050501580156104ce573d6000803e3d6000fd5b50565b306000908152600460205260408120548211156104ed57600080fd5b3060008181526004602090815260409182902080548690039055600280548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104655780601f1061043a57610100808354040283529160200191610465565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104655780601f1061043a57610100808354040283529160200191610465565b600054600160a060020a0316331461063757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216151561067b57600080fd5b3360009081526004602052604090205481111561069757600080fd5b600160a060020a03821660009081526004602052604090205481810110156106be57600080fd5b33600081815260046020908152604080832080548690039055600160a060020a03861680845292819020805486019055805185815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b600154600160a060020a0316331461073e57600080fd5b6001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600154600160a060020a0316815600a165627a7a7230582062a404a29c09eddb48dfcc410777b1e39c64eb3d05e933945875bb8ece4782e30029
Contract_Creation_Code_ARM:



Contract Adress: 0xc8f1afa19f100db8dd2bdc96e49a03d4555433ea
Contract Name: SsenToken
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol
/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure.
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
  using SafeMath for uint256;
  function safeTransfer(
    IERC20 token,
    address to,
    uint256 value
  )
    internal
  {
    require(token.transfer(to, value));
  }
  function safeTransferFrom(
    IERC20 token,
    address from,
    address to,
    uint256 value
  )
    internal
  {
    require(token.transferFrom(from, to, value));
  }
  function safeApprove(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    // safeApprove should only be called when setting an initial allowance, 
    // or when resetting it to zero. To increase and decrease it, use 
    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
    require((value == 0) || (token.allowance(msg.sender, spender) == 0));
    require(token.approve(spender, value));
  }
  function safeIncreaseAllowance(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    uint256 newAllowance = token.allowance(address(this), spender).add(value);
    require(token.approve(spender, newAllowance));
  }
  function safeDecreaseAllowance(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    uint256 newAllowance = token.allowance(address(this), spender).sub(value);
    require(token.approve(spender, newAllowance));
  }
}
// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol
/**
 * @title Helps contracts guard against reentrancy attacks.
 * @author Remco Bloemen <
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"value","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isPauser","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renouncePauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addPauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040523480156200001157600080fd5b506040805190810160405280600a81526020017f5353454e20546f6b656e000000000000000000000000000000000000000000008152506040805190810160405280600481526020017f5353454e0000000000000000000000000000000000000000000000000000000081525060126200009a3362000165640100000000026401000000009004565b8260049080519060200190620000b292919062000529565b508160059080519060200190620000cb92919062000529565b5080600660006101000a81548160ff021916908360ff1602179055505050506200010433620001cf640100000000026401000000009004565b6000600860006101000a81548160ff0219169083151502179055506200015f336200013d62000239640100000000026401000000009004565b60ff16600a0a6402540be4000262000250640100000000026401000000009004565b620005d8565b62000189816003620003af6401000000000262001edb179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620001f3816007620003af6401000000000262001edb179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000600660009054906101000a900460ff16905090565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200027757600080fd5b6200029c81600254620004726401000000000262001e0b179091906401000000009004565b60028190555062000303816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620004726401000000000262001e0b179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620003ec57600080fd5b62000407828262000494640100000000026401000000009004565b1515156200041457600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008082840190508381101515156200048a57600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620004d257600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200056c57805160ff19168380011785556200059d565b828001600101855582156200059d579182015b828111156200059c5782518255916020019190600101906200057f565b5b509050620005ac9190620005b0565b5090565b620005d591905b80821115620005d1576000816000905550600101620005b7565b5090565b90565b611fb780620005e86000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610143578063095ea7b3146101d357806318160ddd1461023857806323b872dd146102635780632ff2e9dc146102e8578063313ce5671461031357806339509351146103445780633f4ba83a146103a957806340c10f19146103c057806342966c681461042557806346fbf68e146104525780635c975abb146104ad5780636ef8d66d146104dc57806370a08231146104f357806379cc67901461054a57806382dc1ec4146105975780638456cb59146105da57806395d89b41146105f1578063983b2d561461068157806398650275146106c4578063a457c2d7146106db578063a9059cbb14610740578063aa271e1a146107a5578063dd62ed3e14610800575b600080fd5b34801561014f57600080fd5b50610158610877565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b5061021e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610919565b604051808215151515815260200191505060405180910390f35b34801561024457600080fd5b5061024d610949565b6040518082815260200191505060405180910390f35b34801561026f57600080fd5b506102ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610953565b604051808215151515815260200191505060405180910390f35b3480156102f457600080fd5b506102fd610985565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b5061032861099d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561035057600080fd5b5061038f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109b4565b604051808215151515815260200191505060405180910390f35b3480156103b557600080fd5b506103be6109e4565b005b3480156103cc57600080fd5b5061040b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a93565b604051808215151515815260200191505060405180910390f35b34801561043157600080fd5b5061045060048036038101908080359060200190929190505050610abd565b005b34801561045e57600080fd5b50610493600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aca565b604051808215151515815260200191505060405180910390f35b3480156104b957600080fd5b506104c2610ae7565b604051808215151515815260200191505060405180910390f35b3480156104e857600080fd5b506104f1610afe565b005b3480156104ff57600080fd5b50610534600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b09565b6040518082815260200191505060405180910390f35b34801561055657600080fd5b50610595600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b51565b005b3480156105a357600080fd5b506105d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b5f565b005b3480156105e657600080fd5b506105ef610b7f565b005b3480156105fd57600080fd5b50610606610c2f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561064657808201518184015260208101905061062b565b50505050905090810190601f1680156106735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561068d57600080fd5b506106c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd1565b005b3480156106d057600080fd5b506106d9610cf1565b005b3480156106e757600080fd5b50610726600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cfc565b604051808215151515815260200191505060405180910390f35b34801561074c57600080fd5b5061078b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d2c565b604051808215151515815260200191505060405180910390f35b3480156107b157600080fd5b506107e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d5c565b604051808215151515815260200191505060405180910390f35b34801561080c57600080fd5b50610861600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d79565b6040518082815260200191505060405180910390f35b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561090f5780601f106108e45761010080835404028352916020019161090f565b820191906000526020600020905b8154815290600101906020018083116108f257829003601f168201915b5050505050905090565b6000600860009054906101000a900460ff1615151561093757600080fd5b6109418383610e00565b905092915050565b6000600254905090565b6000600860009054906101000a900460ff1615151561097157600080fd5b61097c848484610f2d565b90509392505050565b61098d61099d565b60ff16600a0a6402540be4000281565b6000600660009054906101000a900460ff16905090565b6000600860009054906101000a900460ff161515156109d257600080fd5b6109dc83836110df565b905092915050565b6109ed33610aca565b15156109f857600080fd5b600860009054906101000a900460ff161515610a1357600080fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610a9e33610d5c565b1515610aa957600080fd5b610ab38383611316565b6001905092915050565b610ac73382611454565b50565b6000610ae08260076115df90919063ffffffff16565b9050919050565b6000600860009054906101000a900460ff16905090565b610b0733611673565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b5b82826116cd565b5050565b610b6833610aca565b1515610b7357600080fd5b610b7c81611875565b50565b610b8833610aca565b1515610b9357600080fd5b600860009054906101000a900460ff16151515610baf57600080fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b5050505050905090565b610cda33610d5c565b1515610ce557600080fd5b610cee816118cf565b50565b610cfa33611929565b565b6000600860009054906101000a900460ff16151515610d1a57600080fd5b610d248383611983565b905092915050565b6000600860009054906101000a900460ff16151515610d4a57600080fd5b610d548383611bba565b905092915050565b6000610d728260036115df90919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e3d57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610fba57600080fd5b61104982600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110d4848484611bf2565b600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561111c57600080fd5b6111ab82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561133c57600080fd5b61135181600254611e0b90919063ffffffff16565b6002819055506113a8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561147a57600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156114c757600080fd5b6114dc81600254611bd190919063ffffffff16565b600281905550611533816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561161c57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611687816007611e2c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561175857600080fd5b6117e781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118718282611454565b5050565b611889816007611edb90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6118e3816003611edb90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61193d816003611e2c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156119c057600080fd5b611a4f82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000611bc7338484611bf2565b6001905092915050565b600080838311151515611be357600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611c3f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611c7b57600080fd5b611ccc816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d5f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000808284019050838110151515611e2257600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e6857600080fd5b611e7282826115df565b1515611e7d57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f1757600080fd5b611f2182826115df565b151515611f2d57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a72305820e4604d4ab0ac8f1a66eb0d7f26f3db64767846e860b89d92215781bc6278800a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xdef35a17ff599454fbec97276b3d5df354256079
Contract Name: Qvantum
Contract_Source_Code: 
pragma solidity ^0.4.25;
/*
 [Rules]
 [✓] 10% Deposit fee
            33% => referrer (or contract owner, if none)
            10% => contract owner
            57% => dividends
 [✓] 4% Withdraw fee
            25% => contract owner
            75% => dividends
 [✓] 1% Token transfer
            100% => dividends
*/
contract Qvantum {
    modifier onlyBagholders {
        require(myTokens() > 0);
        _;
    }
    modifier onlyStronghands {
        require(myDividends(true) > 0);
        _;
    }
    event onTokenPurchase(
        address indexed customerAddress,
        uint256 incomingEthereum,
        uint256 tokensMinted,
        address indexed referredBy,
        uint timestamp,
        uint256 price
    );
    event onTokenSell(
        address indexed customerAddress,
        uint256 tokensBurned,
        uint256 ethereumEarned,
        uint timestamp,
        uint256 price
    );
    event onReinvestment(
        address indexed customerAddress,
        uint256 ethereumReinvested,
        uint256 tokensMinted
    );
    event onWithdraw(
        address indexed customerAddress,
        uint256 ethereumWithdrawn
    );
    event Transfer(
        address indexed from,
        address indexed to,
        uint256 tokens
    );
    string public name = "Qvantum";
    string public symbol = "QVM";
    address constant internal boss = 0xCa91e6dCB24B88E934F9C056A7E48849069Fa16A;
    uint8 constant public decimals = 18;
    uint8 constant internal entryFee_ = 10;
    uint8 constant internal transferFee_ = 1;
    uint8 constant internal exitFee_ = 4;
    uint8 constant internal refferalFee_ = 33;
    uint8 constant internal ownerFee1 = 10;
    uint8 constant internal ownerFee2 = 25;
    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;
    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;
    uint256 constant internal magnitude = 2 ** 64;
    uint256 public stakingRequirement = 50e18;
    mapping(address => uint256) internal tokenBalanceLedger_;
    mapping(address => uint256) internal referralBalance_;
    mapping(address => int256) internal payoutsTo_;
    uint256 internal tokenSupply_;
    uint256 internal profitPerShare_;
    function buy(address _referredBy) public payable returns (uint256) {
        return purchaseTokens(msg.value, _referredBy);
    }
    function() payable public {
        purchaseTokens(msg.value, 0x0);
    }
    function reinvest() onlyStronghands public {
        uint256 _dividends = myDividends(false);
        address _customerAddress = msg.sender;
        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);
        _dividends += referralBalance_[_customerAddress];
        referralBalance_[_customerAddress] = 0;
        uint256 _tokens = purchaseTokens(_dividends, 0x0);
        emit onReinvestment(_customerAddress, _dividends, _tokens);
    }
    function exit() public {
        address _customerAddress = msg.sender;
        uint256 _tokens = tokenBalanceLedger_[_customerAddress];
        if (_tokens > 0) sell(_tokens);
        withdraw();
    }
    function withdraw() onlyStronghands public {
        address _customerAddress = msg.sender;
        uint256 _dividends = myDividends(false);
        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);
        _dividends += referralBalance_[_customerAddress];
        referralBalance_[_customerAddress] = 0;
        _customerAddress.send(_dividends);
        emit onWithdraw(_customerAddress, _dividends);
    }
    function sell(uint256 _amountOfTokens) onlyBagholders public {
        address _customerAddress = msg.sender;
        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);
        uint256 _tokens = _amountOfTokens;
        uint256 _ethereum = tokensToEthereum_(_tokens);
        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);
        uint256 forBoss = SafeMath.div(SafeMath.mul(_dividends, ownerFee2), 100);
        _dividends = SafeMath.sub(_dividends, forBoss);
        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);
        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);
        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));
        payoutsTo_[_customerAddress] -= _updatedPayouts;
        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);
        if (tokenSupply_ > 0) {
            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
        }
        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());
    }
    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {
        address _customerAddress = msg.sender;
        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);
        if (myDividends(true) > 0) {
            withdraw();
        }
        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);
        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);
        uint256 _dividends = tokensToEthereum_(_tokenFee);
        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);
        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);
        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);
        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);
        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);
        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
        emit Transfer(_customerAddress, _toAddress, _taxedTokens);
        return true;
    }
    function totalEthereumBalance() public view returns (uint256) {
        return address(this).balance;
    }
    function totalSupply() public view returns (uint256) {
        return tokenSupply_;
    }
    function myTokens() public view returns (uint256) {
        address _customerAddress = msg.sender;
        return balanceOf(_customerAddress);
    }
    function myDividends(bool _includeReferralBonus) public view returns (uint256) {
        address _customerAddress = msg.sender;
        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;
    }
    function balanceOf(address _customerAddress) public view returns (uint256) {
        return tokenBalanceLedger_[_customerAddress];
    }
    function dividendsOf(address _customerAddress) public view returns (uint256) {
        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;
    }
    function sellPrice() public view returns (uint256) {
        // our calculation relies on the token supply, so we need supply. Doh.
        if (tokenSupply_ == 0) {
            return tokenPriceInitial_ - tokenPriceIncremental_;
        } else {
            uint256 _ethereum = tokensToEthereum_(1e18);
            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);
            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
            return _taxedEthereum;
        }
    }
    function buyPrice() public view returns (uint256) {
        if (tokenSupply_ == 0) {
            return tokenPriceInitial_ + tokenPriceIncremental_;
        } else {
            uint256 _ethereum = tokensToEthereum_(1e18);
            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);
            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);
            return _taxedEthereum;
        }
    }
    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {
        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);
        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);
        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
        return _amountOfTokens;
    }
    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {
        require(_tokensToSell <= tokenSupply_);
        uint256 _ethereum = tokensToEthereum_(_tokensToSell);
        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);
        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
        return _taxedEthereum;
    }
    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {
        address _customerAddress = msg.sender;
        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);
        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);
        uint256 forBoss = SafeMath.div(SafeMath.mul(_undividedDividends, ownerFee1), 100);
        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);
        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);
        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
        uint256 _fee = _dividends * magnitude;
        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);
        if (
            _referredBy != 0x0000000000000000000000000000000000000000 &&
            _referredBy != _customerAddress &&
            tokenBalanceLedger_[_referredBy] >= stakingRequirement
        ) {
            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);
        } else {
            referralBalance_[boss] = SafeMath.add(referralBalance_[boss], _referralBonus);
        }
        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);
        if (tokenSupply_ > 0) {
            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);
            profitPerShare_ += (_dividends * magnitude / tokenSupply_);
            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
        } else {
            tokenSupply_ = _amountOfTokens;
        }
        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);
        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);
        payoutsTo_[_customerAddress] += _updatedPayouts;
        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());
        return _amountOfTokens;
    }
    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {
        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;
        uint256 _tokensReceived =
            (
                (
                    SafeMath.sub(
                        (sqrt
                            (
                                (_tokenPriceInitial ** 2)
                                +
                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))
                                +
                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))
                                +
                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)
                            )
                        ), _tokenPriceInitial
                    )
                ) / (tokenPriceIncremental_)
            ) - (tokenSupply_);
        return _tokensReceived;
    }
    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {
        uint256 tokens_ = (_tokens + 1e18);
        uint256 _tokenSupply = (tokenSupply_ + 1e18);
        uint256 _etherReceived =
            (
                SafeMath.sub(
                    (
                        (
                            (
                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))
                            ) - tokenPriceIncremental_
                        ) * (tokens_ - 1e18)
                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2
                )
                / 1e18);
        return _etherReceived;
    }
    function sqrt(uint256 x) internal pure returns (uint256 y) {
        uint256 z = (x + 1) / 2;
        y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
    }
}
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"_customerAddress","type":"address"}],"name":"dividendsOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_ethereumToSpend","type":"uint256"}],"name":"calculateTokensReceived","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokensToSell","type":"uint256"}],"name":"calculateEthereumReceived","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"stakingRequirement","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_includeReferralBonus","type":"bool"}],"name":"myDividends","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalEthereumBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_customerAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"myTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_toAddress","type":"address"},{"name":"_amountOfTokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amountOfTokens","type":"uint256"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_referredBy","type":"address"}],"name":"buy","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[],"name":"reinvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"incomingEthereum","type":"uint256"},{"indexed":false,"name":"tokensMinted","type":"uint256"},{"indexed":true,"name":"referredBy","type":"address"},{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"}],"name":"onTokenPurchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"tokensBurned","type":"uint256"},{"indexed":false,"name":"ethereumEarned","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"}],"name":"onTokenSell","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"ethereumReinvested","type":"uint256"},{"indexed":false,"name":"tokensMinted","type":"uint256"}],"name":"onReinvestment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"ethereumWithdrawn","type":"uint256"}],"name":"onWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
60c0604052600760808190527f5176616e74756d0000000000000000000000000000000000000000000000000060a0908152620000409160009190620000a9565b506040805180820190915260038082527f51564d000000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000a9565b506802b5e3af16b1880000600255348015620000a257600080fd5b506200014e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ec57805160ff19168380011785556200011c565b828001600101855582156200011c579182015b828111156200011c578251825591602001919060010190620000ff565b506200012a9291506200012e565b5090565b6200014b91905b808211156200012a576000815560010162000135565b90565b6110db806200015e6000396000f3006080604052600436106101105763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461011e57806306fdde031461015157806310d0ffdd146101db57806318160ddd146101f35780632260937314610208578063313ce567146102205780633ccfd60b1461024b5780634b7503341461026257806356d399e814610277578063688abbf71461028c5780636b2f4632146102a657806370a08231146102bb5780638620410b146102dc578063949e8acd146102f157806395d89b4114610306578063a9059cbb1461031b578063e4849b3214610353578063e9fad8ee1461036b578063f088d54714610380578063fdb5a03e14610394575b61011b3460006103a9565b50005b34801561012a57600080fd5b5061013f600160a060020a03600435166106cf565b60408051918252519081900360200190f35b34801561015d57600080fd5b5061016661070a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a0578181015183820152602001610188565b50505050905090810190601f1680156101cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e757600080fd5b5061013f600435610798565b3480156101ff57600080fd5b5061013f6107cb565b34801561021457600080fd5b5061013f6004356107d1565b34801561022c57600080fd5b5061023561080d565b6040805160ff9092168252519081900360200190f35b34801561025757600080fd5b50610260610812565b005b34801561026e57600080fd5b5061013f6108d3565b34801561028357600080fd5b5061013f61092a565b34801561029857600080fd5b5061013f6004351515610930565b3480156102b257600080fd5b5061013f610973565b3480156102c757600080fd5b5061013f600160a060020a0360043516610978565b3480156102e857600080fd5b5061013f610993565b3480156102fd57600080fd5b5061013f6109de565b34801561031257600080fd5b506101666109f0565b34801561032757600080fd5b5061033f600160a060020a0360043516602435610a4a565b604080519115158252519081900360200190f35b34801561035f57600080fd5b50610260600435610bed565b34801561037757600080fd5b50610260610dde565b61013f600160a060020a0360043516610e0b565b3480156103a057600080fd5b50610260610e1d565b60003381808080808080806103c96103c28d600a610ed3565b6064610f0c565b97506103d96103c2896021610ed3565b96506103e96103c289600a610ed3565b95506103f58888610f2f565b94506104018c89610f2f565b935061040c84610f44565b9250680100000000000000008502915060008311801561043657506006546104348482610fdc565b115b151561044157600080fd5b600160a060020a038b161580159061046b575088600160a060020a03168b600160a060020a031614155b80156104915750600254600160a060020a038c1660009081526003602052604090205410155b156104d757600160a060020a038b166000908152600460205260409020546104b99088610fdc565b600160a060020a038c1660009081526004602052604090205561053c565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a60005260046020526000805160206110908339815191525461050e9088610fdc565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a6000526004602052600080516020611090833981519152555b73ca91e6dcb24b88e934f9c056a7e48849069fa16a6000526004602052600080516020611090833981519152546105739087610fdc565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a60009081526004602052600080516020611090833981519152919091556006541115610607576105ba60065484610fdc565b60068190556801000000000000000086028115156105d457fe5b600780549290910490910190556006546801000000000000000086028115156105f957fe5b04830282038203915061060d565b60068390555b600160a060020a0389166000908152600360205260409020546106309084610fdc565b600160a060020a03808b166000818152600360209081526040808320959095556007546005909152939020805493870286900393840190559192508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e864261069a610993565b604080519485526020850193909352838301919091526060830152519081900360800190a350909a9950505050505050505050565b600160a060020a0316600090815260056020908152604080832054600390925290912054600754680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107905780601f1061076557610100808354040283529160200191610790565b820191906000526020600020905b81548152906001019060200180831161077357829003601f168201915b505050505081565b60008080806107ab6103c286600a610ed3565b92506107b78584610f2f565b91506107c282610f44565b95945050505050565b60065490565b60008060008060065485111515156107e857600080fd5b6107f185610fee565b92506108016103c2846004610ed3565b91506107c28383610f2f565b601281565b60008060006108216001610930565b1161082b57600080fd5b3391506108386000610930565b600160a060020a038316600081815260056020908152604080832080546801000000000000000087020190556004909152808220805490839055905193019350909183156108fc0291849190818181858888f15050604080518581529051600160a060020a03871694507fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc9350908190036020019150a25050565b600080600080600654600014156108f1576414f46b04009350610924565b610902670de0b6b3a7640000610fee565b92506109126103c2846004610ed3565b915061091e8383610f2f565b90508093505b50505090565b60025481565b6000338261094657610941816106cf565b61096a565b600160a060020a038116600090815260046020526040902054610968826106cf565b015b91505b50919050565b303190565b600160a060020a031660009081526003602052604090205490565b600080600080600654600014156109b15764199c82cc009350610924565b6109c2670de0b6b3a7640000610fee565b92506109d26103c284600a610ed3565b915061091e8383610fdc565b6000336109ea81610978565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107905780601f1061076557610100808354040283529160200191610790565b600080600080600080610a5b6109de565b11610a6557600080fd5b33600081815260036020526040902054909450861115610a8457600080fd5b6000610a906001610930565b1115610a9e57610a9e610812565b610aac6103c2876001610ed3565b9250610ab88684610f2f565b9150610ac383610fee565b9050610ad160065484610f2f565b600655600160a060020a038416600090815260036020526040902054610af79087610f2f565b600160a060020a038086166000908152600360205260408082209390935590891681522054610b269083610fdc565b600160a060020a0388811660008181526003602090815260408083209590955560078054948a16835260059091528482208054948c02909403909355825491815292909220805492850290920190915554600654610b9a9190680100000000000000008402811515610b9457fe5b04610fdc565b600755604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b600080600080600080600080610c016109de565b11610c0b57600080fd5b33600081815260036020526040902054909750881115610c2a57600080fd5b879550610c3686610fee565b9450610c466103c2866004610ed3565b9350610c566103c2856019610ed3565b9250610c628484610f2f565b9350610c6e8585610f2f565b9150610c7c60065487610f2f565b600655600160a060020a038716600090815260036020526040902054610ca29087610f2f565b600160a060020a038816600090815260036020908152604080832093909355600754600582529282208054938a026801000000000000000087020193849003905573ca91e6dcb24b88e934f9c056a7e48849069fa16a9091526004905260008051602061109083398151915254909150610d1c9084610fdc565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a60009081526004602052600080516020611090833981519152919091556006541115610d7957610d75600754600654680100000000000000008702811515610b9457fe5b6007555b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e878442610daf610993565b604080519485526020850193909352838301919091526060830152519081900360800190a25050505050505050565b3360008181526003602052604081205490811115610dff57610dff81610bed565b610e07610812565b5050565b6000610e1734836103a9565b92915050565b600080600080610e2d6001610930565b11610e3757600080fd5b610e416000610930565b33600081815260056020908152604080832080546801000000000000000087020190556004909152812080549082905590920194509250610e839084906103a9565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080831515610ee65760009150610f05565b50828202828482811515610ef657fe5b0414610f0157600080fd5b8091505b5092915050565b600080808311610f1b57600080fd5b8284811515610f2657fe5b04949350505050565b600082821115610f3e57600080fd5b50900390565b6006546000906c01431e0fae6d7217caa00000009082906402540be400610fc9610fc3730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e4000000000000000161105a565b85610f2f565b811515610fd257fe5b0403949350505050565b600082820183811015610f0157600080fd5b600654600090670de0b6b3a76400008381019181019083906110476414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561104157fe5b04610f2f565b81151561105057fe5b0495945050505050565b80600260018201045b8181101561096d57809150600281828581151561107c57fe5b040181151561108757fe5b04905061106356007755f1a9cef2f9c23eb93f8b10a495d985b42af473963d6e2c7aba58e87e65b2a165627a7a72305820b2efe7952ab19296391621fd158fd570048029feffe30e7e90af6acaa9e3f6980029
Contract_Creation_Code_ARM:



Contract Adress: 0x3fb2dc40b63ea327c190d2a93fabee62da7301ee
Contract Name: CF20
Contract_Source_Code: 
pragma solidity ^0.4.18;
// ----------------------------------------------------------------------------
// (c) by IBM 2018. The MIT Licence.
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Safe maths
// ----------------------------------------------------------------------------
contract SafeMath {
    function safeAdd(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}
// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// ----------------------------------------------------------------------------
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// ----------------------------------------------------------------------------
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
    address public owner;
    address public newOwner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    function Owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}
// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and assisted
// token transfers
// ----------------------------------------------------------------------------
contract CF20 is ERC20Interface, Owned, SafeMath {
    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;
    uint public startDate;
    uint public bonusEnds;
    uint public endDate;
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    // ------------------------------------------------------------------------
    // Constructor 000000000000000000
    // ------------------------------------------------------------------------
    function CF20() public {
        symbol = "CF20";
        name = "CRYPTOFUND20";
        decimals = 18;
		_totalSupply = 1000000000000000000000000000;
        balances[msg.sender] = _totalSupply; // Send all tokens to owner
        bonusEnds = now + 0.1 weeks;
        endDate = now + 500 weeks;
    }
    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }
    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(msg.sender, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account
    //
    // We
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Transfer `tokens` from the `from` account to the `to` account
    //
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the `from` account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(from, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
    // ------------------------------------------------------------------------
    // 10,000 CF20 Tokens per 1 ETH
    // ------------------------------------------------------------------------
    function () public payable {
        require(now >= startDate && now <= endDate);
        uint tokens;
        if (now <= bonusEnds) {
            tokens = msg.value * 12000;
        } else {
            tokens = msg.value * 10000;
        }
        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
        _totalSupply = safeAdd(_totalSupply, tokens);
        Transfer(address(0), msg.sender, tokens);
        owner.transfer(msg.value);
    }
    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"startDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"bonusEnds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"endDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"},{"name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferAnyERC20Token","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a031617905560408051908101604052600481527f43463230000000000000000000000000000000000000000000000000000000006020820152600290805161007192916020019061010a565b5060408051908101604052600c81527f43525950544f46554e4432300000000000000000000000000000000000000000602082015260039080516100b992916020019061010a565b506004805460ff191660121790556b033b2e3c9fd0803ce80000006005819055600160a060020a03331660009081526009602052604090205561ec40429081016007556312064200016008556101a5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014b57805160ff1916838001178555610178565b82800160010185558215610178579182015b8281111561017857825182559160200191906001019061015d565b50610184929150610188565b5090565b6101a291905b80821115610184576000815560010161018e565b90565b610bfc806101b46000396000f3006060604052600436106100ed5763ffffffff60e060020a60003504166306fdde0381146101eb578063095ea7b3146102755780630b97bc86146102ab57806318160ddd146102d057806323b872dd146102e3578063313ce5671461030b5780633eaaf86b1461033457806340c650031461034757806370a082311461035a57806379ba5097146103795780638da5cb5b1461038e57806395d89b41146103bd578063a9059cbb146103d0578063c24a0f8b146103f2578063cae9ca5114610405578063d4ee1d901461046a578063dc39d06d1461047d578063dd62ed3e1461049f578063f2fde38b146104c4575b6000600654421015801561010357506008544211155b151561010e57600080fd5b60075442116101225750612ee03402610129565b5061271034025b600160a060020a03331660009081526009602052604090205461014c90826104e3565b600160a060020a03331660009081526009602052604090205560055461017290826104e3565b600555600160a060020a03331660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3600054600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156101e857600080fd5b50005b34156101f657600080fd5b6101fe6104f9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023a578082015183820152602001610222565b50505050905090810190601f1680156102675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028057600080fd5b610297600160a060020a0360043516602435610597565b604051901515815260200160405180910390f35b34156102b657600080fd5b6102be610603565b60405190815260200160405180910390f35b34156102db57600080fd5b6102be610609565b34156102ee57600080fd5b610297600160a060020a036004358116906024351660443561063b565b341561031657600080fd5b61031e61073c565b60405160ff909116815260200160405180910390f35b341561033f57600080fd5b6102be610745565b341561035257600080fd5b6102be61074b565b341561036557600080fd5b6102be600160a060020a0360043516610751565b341561038457600080fd5b61038c61076c565b005b341561039957600080fd5b6103a16107fa565b604051600160a060020a03909116815260200160405180910390f35b34156103c857600080fd5b6101fe610809565b34156103db57600080fd5b610297600160a060020a0360043516602435610874565b34156103fd57600080fd5b6102be610927565b341561041057600080fd5b61029760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061092d95505050505050565b341561047557600080fd5b6103a1610a94565b341561048857600080fd5b610297600160a060020a0360043516602435610aa3565b34156104aa57600080fd5b6102be600160a060020a0360043581169060243516610b46565b34156104cf57600080fd5b61038c600160a060020a0360043516610b71565b818101828110156104f357600080fd5b92915050565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058f5780601f106105645761010080835404028352916020019161058f565b820191906000526020600020905b81548152906001019060200180831161057257829003601f168201915b505050505081565b600160a060020a033381166000818152600a6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065481565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b546005540390565b600160a060020a03831660009081526009602052604081205461065e9083610bbb565b600160a060020a03808616600090815260096020908152604080832094909455600a815283822033909316825291909152205461069b9083610bbb565b600160a060020a038086166000908152600a6020908152604080832033851684528252808320949094559186168152600990915220546106db90836104e3565b600160a060020a03808516600081815260096020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60045460ff1681565b60055481565b60075481565b600160a060020a031660009081526009602052604090205490565b60015433600160a060020a0390811691161461078757600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058f5780601f106105645761010080835404028352916020019161058f565b600160a060020a0333166000908152600960205260408120546108979083610bbb565b600160a060020a0333811660009081526009602052604080822093909355908516815220546108c690836104e3565b600160a060020a0380851660008181526009602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60085481565b600160a060020a033381166000818152600a6020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a28578082015183820152602001610a10565b50505050905090810190601f168015610a555780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610a7657600080fd5b6102c65a03f11515610a8757600080fd5b5060019695505050505050565b600154600160a060020a031681565b6000805433600160a060020a03908116911614610abf57600080fd5b60008054600160a060020a038086169263a9059cbb929091169085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b2557600080fd5b6102c65a03f11515610b3657600080fd5b5050506040518051949350505050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610b8c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610bca57600080fd5b509003905600a165627a7a723058203025bbafd6deb4efc0f865fb2def27976d25c136e9de6da876eeb13d725857400029
Contract_Creation_Code_ARM:



Contract Adress: 0x1abc429a9e0a6bb21cac418e876f2ba608556836
Contract Name: EthereumPower
Contract_Source_Code: 
pragma solidity ^0.4.25;
contract EthereumPower {
    // Track how many tokens are owned by each address.
    mapping (address => uint256) public balanceOf;
    string public name = "Ethereum Power";
    string public symbol = "EPWR";
    uint8 public decimals = 18;
    uint256 public totalSupply = 965756597440 * (uint256(10) ** decimals);
    event Transfer(address indexed from, address indexed to, uint256 value);
    constructor() public {
        // Initially assign all tokens to the contract's creator.
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value);
        balanceOf[msg.sender] -= value;  // deduct from sender's balance
        balanceOf[to] += value;          // add to recipient's balance
        emit Transfer(msg.sender, to, value);
        return true;
    }
    event Approval(address indexed owner, address indexed spender, uint256 value);
    mapping(address => mapping(address => uint256)) public allowance;
    function approve(address spender, uint256 value)
        public
        returns (bool success)
    {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    function transferFrom(address from, address to, uint256 value)
        public
        returns (bool success)
    {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60c0604052600e60808190527f457468657265756d20506f77657200000000000000000000000000000000000060a090815261003e9160019190610101565b506040805180820190915260048082527f4550575200000000000000000000000000000000000000000000000000000000602090920191825261008391600291610101565b5060038054601260ff19909116179081905560ff16600a0a64e0db9434c0026004553480156100b157600080fd5b5060045433600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a361019c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014257805160ff191683800117855561016f565b8280016001018555821561016f579182015b8281111561016f578251825591602001919060010190610154565b5061017b92915061017f565b5090565b61019991905b8082111561017b5760008155600101610185565b90565b610576806101ab6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015f57806323b872dd14610186578063313ce567146101b057806370a08231146101db57806395d89b41146101fc578063a9059cbb14610211578063dd62ed3e14610235575b600080fd5b3480156100a957600080fd5b506100b261025c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013357600080fd5b5061014b600160a060020a03600435166024356102e9565b604080519115158252519081900360200190f35b34801561016b57600080fd5b5061017461034f565b60408051918252519081900360200190f35b34801561019257600080fd5b5061014b600160a060020a0360043581169060243516604435610355565b3480156101bc57600080fd5b506101c5610432565b6040805160ff9092168252519081900360200190f35b3480156101e757600080fd5b50610174600160a060020a036004351661043b565b34801561020857600080fd5b506100b261044d565b34801561021d57600080fd5b5061014b600160a060020a03600435166024356104a5565b34801561024157600080fd5b50610174600160a060020a036004358116906024351661052d565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600160a060020a03831660009081526020819052604081205482111561037a57600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156103aa57600080fd5b600160a060020a038085166000818152602081815260408083208054889003905593871680835284832080548801905583835260058252848320338452825291849020805487900390558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b60035460ff1681565b60006020819052908152604090205481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b336000908152602081905260408120548211156104c157600080fd5b3360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6005602090815260009283526040808420909152908252902054815600a165627a7a723058206fee024eacc2bc406fe677b520788c3da3aaab692c7740d1254bc78e1cb9fd220029
Contract_Creation_Code_ARM:



Contract Adress: 0x968a92f07df9ec1799e7e25de5b50663e611d38d
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function trade(
        address src,
        uint srcAmount,
        address dest,
        address destAddress,
        uint maxDestAmount,
        uint minConversionRate,
        address walletId
    )
        public
        payable
        returns(uint);
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    function buy(
        ISetToken set,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
        payable
    {
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 bestAmount = uint(-1);
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.allowance(this, set) == 0) {
                require(token.approve(set, uint256(-1)), "Approve failed");
            }
            uint256 amount = token.balanceOf(this).div(units[i]);
            if (amount < bestAmount) {
                bestAmount = amount;
            }
        }
        set.mint(msg.sender, bestAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function change(bytes callDatas, uint[] starts) public payable { // starts should include 0 and callDatas.length
        for (uint i = 0; i < starts.length - 1; i++) {
            require(address(this).externalCall(0, callDatas, starts[i], starts[i + 1] - starts[i]));
        }
    }
    function sendEthValue(address target, bytes data, uint256 value) external {
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function sendEthProportion(address target, bytes data, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        if (fromToken.allowance(this, target) != 0) {
             fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function approveTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        if (fromToken.allowance(this, target) != 0) {
            fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function transferTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            require(target.call(data));
        }
    }
    function transferTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            // solium-disable-next-line security/no-low-level-calls
            require(target.call(data));
        }
    }
    function transferTokenProportionToOrigin(IERC20 token, uint256 mul, uint256 div) external {
        uint256 amount = token.balanceOf(this).mul(mul).div(div);
        // solium-disable-next-line security/no-tx-origin
        require(token.transfer(tx.origin, amount));
    }
    // Kyber Network
    function kyberSendEthProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        kyber.trade.value(value)(
            fromToken,
            value,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenAmount(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 amount) external {
        if (fromToken.allowance(this, kyber) == 0) {
            fromToken.approve(kyber, uint256(-1));
        }
        kyber.trade(
            fromToken,
            amount,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        this.kyberApproveTokenAmount(kyber, fromToken, toToken, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportionToOrigin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"approveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"sendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberSendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberApproveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"approveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"value","type":"uint256"}],"name":"sendEthValue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"change","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"kyberApproveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b5061186b806100206000396000f3006080604052600436106100a05763ffffffff60e060020a6000350416631396a25481146100a55780633143b224146100ce5780633669f27b14610161578063846f1185146101975780638721fbe9146101ca5780639a509aff146101fd578063bed31bc714610233578063d04c6c1814610266578063d2e9236b1461029f578063d91bd1b0146102cf578063dc0ba22814610308578063dc3193f91461038d575b600080fd5b3480156100b157600080fd5b506100cc600160a060020a03600435166024356044356103bd565b005b60408051602060046024803582810135601f81018590048502860185019096528585526100cc958335600160a060020a0316953695604494919390910191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061050f9650505050505050565b34801561016d57600080fd5b506100cc600160a060020a0360048035821691602480359081019201359060443516606435610c46565b3480156101a357600080fd5b506100cc60048035600160a060020a03169060248035908101910135604435606435610e31565b3480156101d657600080fd5b506100cc600160a060020a0360043581169060243581169060443516606435608435610e8e565b34801561020957600080fd5b506100cc600160a060020a0360048035821691602480359081019201359060443516606435610f8b565b34801561023f57600080fd5b506100cc600160a060020a0360043581169060243581169060443516606435608435611066565b34801561027257600080fd5b506100cc600160a060020a0360048035821691602480359081019201359060443516606435608435611166565b3480156102ab57600080fd5b506100cc60048035600160a060020a031690602480359081019101356044356113bb565b3480156102db57600080fd5b506100cc600160a060020a03600480358216916024803590810192013590604435166064356084356113f7565b6040805160206004803580820135601f81018490048402850184019095528484526100cc943694929360249392840191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506115399650505050505050565b34801561039957600080fd5b506100cc600160a060020a03600435811690602435811690604435166064356115c3565b60006104668261045a8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050506040513d602081101561044c57600080fd5b50519063ffffffff6117bf16565b9063ffffffff6117f816565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152326004820152602481018390529051919250600160a060020a0386169163a9059cbb916044808201926020929091908290030181600087803b1580156104d257600080fd5b505af11580156104e6573d6000803e3d6000fd5b505050506040513d60208110156104fc57600080fd5b5051151561050957600080fd5b50505050565b6060806000806000806105228888611539565b88600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561059d57600080fd5b8101908080516401000000008111156105b557600080fd5b820160208101848111156105c857600080fd5b81518560208202830111640100000000821117156105e557600080fd5b5050929190505050955088600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561062d57600080fd5b505af1158015610641573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561066a57600080fd5b81019080805164010000000081111561068257600080fd5b8201602081018481111561069557600080fd5b81518560208202830111640100000000821117156106b257600080fd5b50909850600019975060009650505050505b855183101561093d5785838151811015156106db57fe5b60209081029091018101516040805160e160020a636eb1769f028152306004820152600160a060020a038d8116602483015291519295509085169263dd62ed3e926044808401938290030181600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b505050506040513d602081101561076257600080fd5b5051151561087057604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152600019602483015291519184169163095ea7b3916044808201926020929091908290030181600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506040513d602081101561080157600080fd5b5051151561087057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f417070726f7665206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b610924858481518110151561088157fe5b6020908102909101810151604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192600160a060020a038716926370a082319260248082019392918290030181600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b505050506040513d602081101561091657600080fd5b50519063ffffffff6117f816565b905083811015610932578093505b6001909201916106c4565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038b16916340c10f1991604480830192600092919082900301818387803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b50505060003031111590506109f6576040513390303180156108fc02916000818181858888f193505050501580156109f4573d6000803e3d6000fd5b505b600092505b8551831015610c3b578583815181101515610a1257fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450600092600160a060020a038616926370a0823192602480820193929182900301818787803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b505050506040513d6020811015610aaa57600080fd5b50511115610c3057604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0384169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050506040513d6020811015610b4857600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610b9757600080fd5b505af1158015610bab573d6000803e3d6000fd5b505050506040513d6020811015610bc157600080fd5b50511515610c3057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6001909201916109fb565b505050505050505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03878116602483015291519184169163dd62ed3e916044808201926020929091908290030181600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b505115610d5d5781600160a060020a031663095ea7b38660006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610d3057600080fd5b505af1158015610d44573d6000803e3d6000fd5b505050506040513d6020811015610d5a57600080fd5b50505b81600160a060020a031663095ea7b386836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610dc057600080fd5b505af1158015610dd4573d6000803e3d6000fd5b505050506040513d6020811015610dea57600080fd5b5050604051600160a060020a0386169085908590808383808284378201915050925050506000604051808303816000865af19150501515610e2a57600080fd5b5050505050565b6000610e488261045a30318663ffffffff6117bf16565b905085600160a060020a03168186866040518083838082843782019150509250505060006040518083038185875af1925050501515610e8657600080fd5b505050505050565b6000610ea58261045a30318663ffffffff6117bf16565b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820184905287811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c483015291519293509088169163cb3c28c791849160e480830192602092919082900301818588803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b50505050506040513d6020811015610f8157600080fd5b5050505050505050565b81600160a060020a031663a9059cbb86836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050506040513d602081101561101857600080fd5b5051151561102557600080fd5b8215610e2a5784600160a060020a03168484604051808383808284378201915050925050506000604051808303816000865af19150501515610e2a57600080fd5b60006110cb8261045a8588600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b604080517fdc3193f9000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152888116602483015287166044820152606481018390529051919250309163dc3193f99160848082019260009290919082900301818387803b15801561114657600080fd5b505af115801561115a573d6000803e3d6000fd5b50505050505050505050565b60006111cb8261045a8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b6040805160e160020a636eb1769f028152306004820152600160a060020a038a8116602483015291519293509086169163dd62ed3e916044808201926020929091908290030181600087803b15801561122357600080fd5b505af1158015611237573d6000803e3d6000fd5b505050506040513d602081101561124d57600080fd5b5051156112e55783600160a060020a031663095ea7b38860006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b505050506040513d60208110156112e257600080fd5b50505b83600160a060020a031663095ea7b388836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b505050506040513d602081101561137257600080fd5b5050604051600160a060020a0388169087908790808383808284378201915050925050506000604051808303816000865af191505015156113b257600080fd5b50505050505050565b83600160a060020a03168184846040518083838082843782019150509250505060006040518083038185875af192505050151561050957600080fd5b600061145c8261045a8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b905083600160a060020a031663a9059cbb88836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156114c157600080fd5b505af11580156114d5573d6000803e3d6000fd5b505050506040513d60208110156114eb57600080fd5b505115156114f857600080fd5b84156113b25786600160a060020a03168686604051808383808284378201915050925050506000604051808303816000865af191505015156113b257600080fd5b60005b60018251038110156115be576115ab600084848481518110151561155c57fe5b90602001906020020151858581518110151561157457fe5b90602001906020020151868660010181518110151561158f57fe5b602090810290910101513094939291900363ffffffff61181b16565b15156115b657600080fd5b60010161153c565b505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03868116602483015291519185169163dd62ed3e916044808201926020929091908290030181600087803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b505050506040513d602081101561164257600080fd5b505115156116e457604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152600019602483015291519185169163095ea7b3916044808201926020929091908290030181600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b505050506040513d60208110156116e157600080fd5b50505b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820184905284811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905292519087169263cb3c28c79260e480820193602093909283900390910190829087803b15801561179557600080fd5b505af11580156117a9573d6000803e3d6000fd5b505050506040513d6020811015610e8657600080fd5b6000808315156117d257600091506117f1565b508282028284828115156117e257fe5b04146117ed57600080fd5b8091505b5092915050565b60008080831161180757600080fd5b828481151561181257fe5b04949350505050565b600060405160208501600082858784018a8c6187965a03f1989750505050505050505600a165627a7a723058203d044b3a9f2049c9d47574b3d1e559963c0ef00f2fef73249f34c1fd63b2094b0029
Contract_Creation_Code_ARM:



Contract Adress: 0x3dc9304fbf2cdcca367fc8e80293c813056d9693
Contract Name: RippleRed
Contract_Source_Code: 
pragma solidity ^0.4.25;
contract RippleRed {
    // Track how many tokens are owned by each address.
    mapping (address => uint256) public balanceOf;
    string public name = "Ripple Red";
    string public symbol = "XRPR";
    uint8 public decimals = 18;
    uint256 public totalSupply = 7965756597320 * (uint256(10) ** decimals);
    event Transfer(address indexed from, address indexed to, uint256 value);
    constructor() public {
        // Initially assign all tokens to the contract's creator.
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value);
        balanceOf[msg.sender] -= value;  // deduct from sender's balance
        balanceOf[to] += value;          // add to recipient's balance
        emit Transfer(msg.sender, to, value);
        return true;
    }
    event Approval(address indexed owner, address indexed spender, uint256 value);
    mapping(address => mapping(address => uint256)) public allowance;
    function approve(address spender, uint256 value)
        public
        returns (bool success)
    {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    function transferFrom(address from, address to, uint256 value)
        public
        returns (bool success)
    {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60c0604052600a60808190527f526970706c65205265640000000000000000000000000000000000000000000060a090815261003e9160019190610102565b506040805180820190915260048082527f5852505200000000000000000000000000000000000000000000000000000000602090920191825261008391600291610102565b5060038054601260ff19909116179081905560ff16600a0a65073eac17a448026004553480156100b257600080fd5b5060045433600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a361019d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014357805160ff1916838001178555610170565b82800160010185558215610170579182015b82811115610170578251825591602001919060010190610155565b5061017c929150610180565b5090565b61019a91905b8082111561017c5760008155600101610186565b90565b610576806101ac6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015f57806323b872dd14610186578063313ce567146101b057806370a08231146101db57806395d89b41146101fc578063a9059cbb14610211578063dd62ed3e14610235575b600080fd5b3480156100a957600080fd5b506100b261025c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013357600080fd5b5061014b600160a060020a03600435166024356102e9565b604080519115158252519081900360200190f35b34801561016b57600080fd5b5061017461034f565b60408051918252519081900360200190f35b34801561019257600080fd5b5061014b600160a060020a0360043581169060243516604435610355565b3480156101bc57600080fd5b506101c5610432565b6040805160ff9092168252519081900360200190f35b3480156101e757600080fd5b50610174600160a060020a036004351661043b565b34801561020857600080fd5b506100b261044d565b34801561021d57600080fd5b5061014b600160a060020a03600435166024356104a5565b34801561024157600080fd5b50610174600160a060020a036004358116906024351661052d565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600160a060020a03831660009081526020819052604081205482111561037a57600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156103aa57600080fd5b600160a060020a038085166000818152602081815260408083208054889003905593871680835284832080548801905583835260058252848320338452825291849020805487900390558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b60035460ff1681565b60006020819052908152604090205481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b336000908152602081905260408120548211156104c157600080fd5b3360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6005602090815260009283526040808420909152908252902054815600a165627a7a7230582040230683577e57f97459771f153b0fe189587b5c4dc6edbb69efa16f78bb20110029
Contract_Creation_Code_ARM:



Contract Adress: 0xd7c05d4015599b33d8225a69f14cd561f27177eb
Contract Name: se7en
Contract_Source_Code: 
pragma solidity ^0.4.25; /*
___________________________________________________________________
  _      _                                        ______           
  |  |  /          /                                /              
--|-/|-/-----__---/----__----__---_--_----__-------/-------__------
  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     
__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_
 .----------------.  .----------------.  .----------------.  .----------------.  .-----------------.
| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
| |    _______   | || |  _________   | || |   _______    | || |  _________   | || | ____  _____  | |
| |   /  ___  |  | || | |_   ___  |  | || |  |  ___  |   | || | |_   ___  |  | || ||_   \|_   _| | |
| |  |  (__ \_|  | || |   | |_  \_|  | || |  |_/  / /    | || |   | |_  \_|  | || |  |   \ | |   | |
| |   '.___`-.   | || |   |  _|  _   | || |      / /     | || |   |  _|  _   | || |  | |\ \| |   | |
| |  |`\____) |  | || |  _| |___/ |  | || |     / /      | || |  _| |___/ |  | || | _| |_\   |_  | |
| |  |_______.'  | || | |_________|  | || |    /_/       | || | |_________|  | || ||_____|\____| | |
| |              | || |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'  '----------------' 
// ----------------------------------------------------------------------------
// Name        : se7en
// Symbol      : S7N
// Copyright (c) 2018 XSe7en Social Media Inc. ( https://se7en.social )
// Contract written by EtherAuthority ( https://EtherAuthority.io )
// ----------------------------------------------------------------------------
*/ 
//*******************************************************************//
//------------------------ SafeMath Library -------------------------//
//*******************************************************************//
    /**
     * @title SafeMath
     * @dev Math operations with safety checks that throw on error
     */
    library SafeMath {
      function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
          return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
      }
      function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
      }
      function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
      }
      function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
      }
    }
//*******************************************************************//
//------------------ Contract to Manage Ownership -------------------//
//*******************************************************************//
    contract owned {
        address public owner;
         constructor () public {
            owner = msg.sender;
        }
        modifier onlyOwner {
            require(msg.sender == owner);
            _;
        }
        function transferOwnership(address newOwner) onlyOwner public {
            owner = newOwner;
        }
    }
    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes  _extraData) external; }
//***************************************************************//
//------------------ ERC20 Standard Template -------------------//
//***************************************************************//
    contract TokenERC20 {
        // Public variables of the token
        using SafeMath for uint256;
        string public name;
        string public symbol;
        uint8 public decimals = 18;
        uint256 public totalSupply;
        uint256 public reservedForICO;
        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions
        // This creates an array with all balances
        mapping (address => uint256) public balanceOf;
        mapping (address => mapping (address => uint256)) public allowance;
        // This generates a public event on the blockchain that will notify clients
        event Transfer(address indexed from, address indexed to, uint256 value);
        // This notifies clients about the amount burnt
        event Burn(address indexed from, uint256 value);
        /**
         * Constructor function
         *
         * Initializes contract with initial supply tokens to the creator of the contract
         */
        constructor (
            uint256 initialSupply,
            uint256 allocatedForICO,
            string memory tokenName,
            string memory tokenSymbol
        ) public {
            totalSupply = initialSupply.mul(1 ether);   
            reservedForICO = allocatedForICO.mul(1 ether);  
            balanceOf[address(this)] = reservedForICO;      
            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); 
            name = tokenName;                               
            symbol = tokenSymbol;                           
        }
        /**
         * Internal transfer, can be called only by this contract
         */
        function _transfer(address _from, address _to, uint _value) internal {
            require(!safeguard);
            // Prevent transfer to 0x0 address. Use burn() instead
            require(_to != address(0x0));
            // Check if the sender has enough balance
            require(balanceOf[_from] >= _value);
            // Check for overflows
            require(balanceOf[_to].add(_value) > balanceOf[_to]);
            // Save this for an assertion in the future
            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);
            // Subtract from the sender
            balanceOf[_from] = balanceOf[_from].sub(_value);
            balanceOf[_to] = balanceOf[_to].add(_value);
            emit Transfer(_from, _to, _value);
            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
        }
        /**
         * Transfer tokens
         *
         * Send `_value` tokens to `_to` from your account
         *
         * @param _to The address of the recipient
         * @param _value the amount to send
         */
        function transfer(address _to, uint256 _value) public returns (bool success) {
            _transfer(msg.sender, _to, _value);
            return true;
        }
        /**
         * Transfer tokens from other address
         *
         * Send `_value` tokens to `_to` in behalf of `_from`
         *
         * @param _from The address of the sender
         * @param _to The address of the recipient
         * @param _value the amount to send
         */
        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
            require(!safeguard);
            require(_value <= allowance[_from][msg.sender]);    
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
            _transfer(_from, _to, _value);
            return true;
        }
        /**
         * Set allowance for other address
         *
         * Allows `_spender` to spend no more than `_value` tokens in your behalf
         *
         * @param _spender The address authorized to spend
         * @param _value the max amount they can spend
         */
        function approve(address _spender, uint256 _value) public
            returns (bool success) {
            require(!safeguard);
            allowance[msg.sender][_spender] = _value;
            return true;
        }
        /**
         * Set allowance for other address and notify
         *
         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
         *
         * @param _spender The address authorized to spend
         * @param _value the max amount they can spend
         * @param _extraData some extra information to send to the approved contract
         */
        function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
            public
            returns (bool success) {
            require(!safeguard);
            tokenRecipient spender = tokenRecipient(_spender);
            if (approve(_spender, _value)) {
                spender.receiveApproval(msg.sender, _value, address(this), _extraData);
                return true;
            }
        }
        /**
         * Destroy tokens
         *
         * Remove `_value` tokens from the system irreversibly
         *
         * @param _value the amount of tokens to burn
         */
        function burn(uint256 _value) public returns (bool success) {
            require(!safeguard);
            require(balanceOf[msg.sender] >= _value);   
            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            
            totalSupply = totalSupply.sub(_value);                      
            emit Burn(msg.sender, _value);
            return true;
        }
        /**
         * Destroy tokens from other account
         *
         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
         *
         * @param _from the address of the sender
         * @param _value the amount of tokens to burn
         */
        function burnFrom(address _from, uint256 _value) public returns (bool success) {
            require(!safeguard);
            require(balanceOf[_from] >= _value);                
            require(_value <= allowance[_from][msg.sender]);    
            balanceOf[_from] = balanceOf[_from].sub(_value);                         
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             
            totalSupply = totalSupply.sub(_value);                              
            emit  Burn(_from, _value);
            return true;
        }
    }
//************************************************************************//
//---------------------  SE7EN MAIN CODE STARTS HERE ---------------------//
//************************************************************************//
    contract se7en is owned, TokenERC20 {
        /*************************************/
        /*  User whitelisting functionality  */
        /*************************************/
        bool public whitelistingStatus = false;
        mapping (address => bool) public whitelisted;
        /**
         * Change whitelisting status on or off
         *
         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.
         */
        function changeWhitelistingStatus() onlyOwner public{
            if (whitelistingStatus == false){
                whitelistingStatus = true;
            }
            else{
                whitelistingStatus = false;    
            }
        }
        /**
         * Whitelist any user address - only Owner can do this
         *
         * It will add user address to whitelisted mapping
         */
        function whitelistUser(address userAddress) onlyOwner public{
            require(whitelistingStatus == true);
            require(userAddress != address(0x0));
            whitelisted[userAddress] = true;
        }
        /**
         * Whitelist Many user address at once - only Owner can do this
         * maximum of 150 addresses to prevent block gas limit max-out and DoS attack
         * this will add user address in whitelisted mapping
         */
        function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{
            require(whitelistingStatus == true);
            uint256 addressCount = userAddresses.length;
            require(addressCount <= 150);
            for(uint256 i = 0; i < addressCount; i++){
                require(userAddresses[i] != address(0x0));
                whitelisted[userAddresses[i]] = true;
            }
        }
        /********************************/
        /* Code for the ERC20 S7N Token */
        /********************************/
        /* Public variables of the token */
        string private tokenName = "se7en";
        string private tokenSymbol = "S7N";
        uint256 private initialSupply = 74243687134;
        uint256 private allocatedForICO = 7424368713;
        mapping (address => bool) public frozenAccount;
        event FrozenFunds(address target, bool frozen);
        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}
        function _transfer(address _from, address _to, uint _value) internal {
            require(!safeguard);
            require (_to != address(0x0));                      
            require (balanceOf[_from] >= _value);               
            require (balanceOf[_to].add(_value) >= balanceOf[_to]); 
            require(!frozenAccount[_from]);                     
            require(!frozenAccount[_to]);                       
            balanceOf[_from] = balanceOf[_from].sub(_value);   
            balanceOf[_to] = balanceOf[_to].add(_value);        
            emit Transfer(_from, _to, _value);
        }
        /// @notice Create `mintedAmount` tokens and send it to `target`
        /// @param target Address to receive the tokens
        /// @param mintedAmount the amount of tokens it will receive
        function mintToken(address target, uint256 mintedAmount) onlyOwner public {
            balanceOf[target] = balanceOf[target].add(mintedAmount);
            totalSupply = totalSupply.add(mintedAmount);
            emit Transfer(address(0x0), address(this), mintedAmount);
            emit Transfer(address(this), target, mintedAmount);
        }
        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens
        /// @param target Address to be frozen
        /// @param freeze either to freeze it or not
        function freezeAccount(address target, bool freeze) onlyOwner public {
                frozenAccount[target] = freeze;
            emit  FrozenFunds(target, freeze);
        }
        /******************************/
        /* Code for the S7N Crowdsale */
        /******************************/
        uint256 public datePreSale   = 1544943600 ;      // 16 Dec 2018 07:00:00 - GMT
        uint256 public dateIcoPhase1 = 1546326000 ;      // 01 Jan 2019 07:00:00 - GMT
        uint256 public dateIcoPhase2 = 1547622000 ;      // 16 Jan 2019 07:00:00 - GMT
        uint256 public dateIcoPhase3 = 1549004400 ;      // 01 Feb 2019 07:00:00 - GMT
        uint256 public dateIcoEnd    = 1551398399 ;      // 28 Feb 2019 23:59:59 - GMT
        uint256 public exchangeRate  = 10000;             // 1 ETH = 10000 Tokens
        uint256 public tokensSold    = 0;                // how many tokens sold through crowdsale              
        function () payable external {
            require(!safeguard);
            require(!frozenAccount[msg.sender]);
            require(datePreSale < now && dateIcoEnd > now);
            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }
            if(datePreSale < now && dateIcoPhase1 > now){ require(msg.value >= (0.50 ether)); }
            // calculate token amount to be sent
            uint256 token = msg.value.mul(exchangeRate);                        
            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     
            tokensSold = tokensSold.add(finalTokens);
            _transfer(address(this), msg.sender, finalTokens);                  
            forwardEherToOwner();                                               
        }
        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){
            if(datePreSale < now && now < dateIcoPhase1 ){
                return token.mul(50).div(100);  //50% bonus in pre sale
            }
            else if(dateIcoPhase1 < now && now < dateIcoPhase2 ){
                return token.mul(25).div(100);  //25% bonus in ICO phase 1
            }
            else if(dateIcoPhase2 < now && now < dateIcoPhase3 ){
                return token.mul(10).div(100);  //10% bonus in ICO phase 2
            }
            else if(dateIcoPhase3 < now && now < dateIcoEnd ){
                return token.mul(5).div(100);  //5% bonus in ICO phase 3
            }
            else{
                return 0;                      //NO BONUS
            }
        }
        function forwardEherToOwner() internal {
            address(owner).transfer(msg.value); 
        }
        function updateCrowdsale(uint256 datePreSaleNew, uint256 dateIcoPhase1New, uint256 dateIcoPhase2New, uint256 dateIcoPhase3New, uint256 dateIcoEndNew) onlyOwner public {
            require(datePreSaleNew < dateIcoPhase1New && dateIcoPhase1New < dateIcoPhase2New);
            require(dateIcoPhase2New < dateIcoPhase3New && dateIcoPhase3New < dateIcoEnd);
            datePreSale   = datePreSaleNew;
            dateIcoPhase1 = dateIcoPhase1New;
            dateIcoPhase2 = dateIcoPhase2New;
            dateIcoPhase3 = dateIcoPhase3New;
            dateIcoEnd    = dateIcoEndNew;
        }
        function stopICO() onlyOwner public{
            dateIcoEnd = 0;
        }
        function icoStatus() public view returns(string memory){
            if(datePreSale > now ){
                return "Pre sale has not started yet";
            }
            else if(datePreSale < now && now < dateIcoPhase1){
                return "Pre sale is running";
            }
            else if(dateIcoPhase1 < now && now < dateIcoPhase2){
                return "ICO phase 1 is running";
            }
            else if(dateIcoPhase2 < now && now < dateIcoPhase3){
                return "ICO phase 2 is running";
            }
            else if(dateIcoPhase3 < now && now < dateIcoEnd){
                return "ICO phase 3 is running";
            }
            else{
                return "ICO is not active";
            }
        }
        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {
            exchangeRate=newExchangeRate;
        }
        function manualWithdrawToken(uint256 _amount) onlyOwner public {
            uint256 tokenAmount = _amount.mul(1 ether);
            _transfer(address(this), msg.sender, tokenAmount);
        }
        function manualWithdrawEther()onlyOwner public{
            address(owner).transfer(address(this).balance);
        }
        function destructContract()onlyOwner public{
            selfdestruct(owner);
        }
        /**
         * Change safeguard status on or off
         *
         * When safeguard is true, all the non-owner functions are unavailable.
         * When safeguard is false, all the functions will resume!
         */
        function changeSafeguardStatus() onlyOwner public{
            if (safeguard == false){
                safeguard = true;
            }
            else{
                safeguard = false;    
            }
        }
        /********************************/
        /* Code for the Air drop of S7N */
        /********************************/
        /**
         * Run an Air-Drop
         *
         * It requires an array of all the addresses and amount of tokens to distribute
         * It will only process first 150 recipients. That limit is fixed to prevent gas limit
         */
        function airdrop(address[] memory recipients,uint tokenAmount) public onlyOwner {
            uint256 addressCount = recipients.length;
            require(addressCount <= 150);
            for(uint i = 0; i < addressCount; i++)
            {
                  _transfer(address(this), recipients[i], tokenAmount.mul(1 ether));
            }
        }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"datePreSale","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoPhase3","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"exchangeRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"userAddress","type":"address"}],"name":"whitelistUser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"changeSafeguardStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"tokensSold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoPhase2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"manualWithdrawEther","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"manualWithdrawToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"datePreSaleNew","type":"uint256"},{"name":"dateIcoPhase1New","type":"uint256"},{"name":"dateIcoPhase2New","type":"uint256"},{"name":"dateIcoPhase3New","type":"uint256"},{"name":"dateIcoEndNew","type":"uint256"}],"name":"updateCrowdsale","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"userAddresses","type":"address[]"}],"name":"whitelistManyUsers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"mintedAmount","type":"uint256"}],"name":"mintToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"changeWhitelistingStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destructContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"safeguard","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"whitelistingStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"recipients","type":"address[]"},{"name":"tokenAmount","type":"uint256"}],"name":"airdrop","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"stopICO","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoPhase1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"whitelisted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"icoStatus","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"freeze","type":"bool"}],"name":"freezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoEnd","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newExchangeRate","type":"uint256"}],"name":"setICOExchangeRate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"reservedForICO","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"target","type":"address"},{"indexed":false,"name":"frozen","type":"bool"}],"name":"FrozenFunds","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
6003805460ff19908116601217909155600680548216905560098054909116905560c0604052600560808190527f736537656e00000000000000000000000000000000000000000000000000000060a09081526200006191600b919062000349565b506040805180820190915260038082527f53374e00000000000000000000000000000000000000000000000000000000006020909201918252620000a891600c9162000349565b5064114944c2de600d556401ba86e049600e55635c15f7f0601055635c2b0ff0601155635c3ed670601255635c53ee70601355635c7875ff6014556127106015556000601655348015620000fb57600080fd5b50600d54600e54600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200018c5780601f1062000160576101008083540402835291602001916200018c565b820191906000526020600020905b8154815290600101906020018083116200016e57829003601f168201915b5050600c8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152955091935091508301828280156200021e5780601f10620001f2576101008083540402835291602001916200021e565b820191906000526020600020905b8154815290600101906020018083116200020057829003601f168201915b505060008054600160a060020a0319163317905550620002599150859050670de0b6b3a7640000640100000000620008aa620002fc82021704565b6004556200027e83670de0b6b3a7640000640100000000620008aa620002fc82021704565b6005819055306000908152600760205260409020819055600454620002b191640100000000620018656200033682021704565b336000908152600760209081526040909120919091558251620002db916001919085019062000349565b508051620002f190600290602084019062000349565b5050505050620003ee565b6000808315156200031157600091506200032f565b508282028284828115156200032257fe5b04146200032b57fe5b8091505b5092915050565b6000828211156200034357fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038c57805160ff1916838001178555620003bc565b82800160010185558215620003bc579182015b82811115620003bc5782518255916020019190600101906200039f565b50620003ca929150620003ce565b5090565b620003eb91905b80821115620003ca5760008155600101620003d5565b90565b6118a380620003fe6000396000f3006080604052600436106101ed5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146102f5578063095ea7b31461037f57806318160ddd146103b757806323b872dd146103de5780632d6c3b1d14610408578063313ce5671461041d57806332aa2cec146104485780633ba0b9a91461045d57806342966c68146104725780634a4c560d1461048a5780634bec8335146104ad578063518ab2a8146104c257806356fdb048146104d75780635954c8c5146104ec5780635d22a35214610501578063625fe9ec1461051957806370a082311461053d57806375ee19081461055e57806379c65068146105b357806379cc6790146105d75780637ec69c50146105fb5780638da5cb5b146106105780639499e0181461064157806395d89b4114610656578063a9059cbb1461066b578063b414d4b61461068f578063b57dbdc6146106b0578063bd694af2146106c5578063c204642c146106da578063c8e569a814610731578063caa84eed14610746578063cae9ca511461075b578063d936547e146107c4578063d96e1f76146107e5578063dd62ed3e146107fa578063e724529c14610821578063f21869c514610847578063f2fde38b1461085c578063f868061e1461087d578063fa3eaa4114610895575b600654600090819060ff161561020257600080fd5b336000908152600f602052604090205460ff161561021f57600080fd5b42601054108015610231575042601454115b151561023c57600080fd5b60095460ff1615156001141561026a57336000908152600a602052604090205460ff16151561026a57600080fd5b4260105410801561027c575042601154115b15610296576706f05b59d3b2000034101561029657600080fd5b6015546102aa90349063ffffffff6108aa16565b91506102c56102b8836108e0565b839063ffffffff6109b216565b6016549091506102db908263ffffffff6109b216565b6016556102e93033836109c1565b6102f1610b45565b5050005b34801561030157600080fd5b5061030a610b82565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034457818101518382015260200161032c565b50505050905090810190601f1680156103715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038b57600080fd5b506103a3600160a060020a0360043516602435610c0f565b604080519115158252519081900360200190f35b3480156103c357600080fd5b506103cc610c50565b60408051918252519081900360200190f35b3480156103ea57600080fd5b506103a3600160a060020a0360043581169060243516604435610c56565b34801561041457600080fd5b506103cc610d06565b34801561042957600080fd5b50610432610d0c565b6040805160ff9092168252519081900360200190f35b34801561045457600080fd5b506103cc610d15565b34801561046957600080fd5b506103cc610d1b565b34801561047e57600080fd5b506103a3600435610d21565b34801561049657600080fd5b506104ab600160a060020a0360043516610dd4565b005b3480156104b957600080fd5b506104ab610e38565b3480156104ce57600080fd5b506103cc610e7a565b3480156104e357600080fd5b506103cc610e80565b3480156104f857600080fd5b506104ab610e86565b34801561050d57600080fd5b506104ab600435610ed8565b34801561052557600080fd5b506104ab600435602435604435606435608435610f19565b34801561054957600080fd5b506103cc600160a060020a0360043516610f7b565b34801561056a57600080fd5b50604080516020600480358082013583810280860185019096528085526104ab95369593946024949385019291829185019084908082843750949750610f8d9650505050505050565b3480156105bf57600080fd5b506104ab600160a060020a036004351660243561105b565b3480156105e357600080fd5b506103a3600160a060020a0360043516602435611146565b34801561060757600080fd5b506104ab611296565b34801561061c57600080fd5b506106256112d7565b60408051600160a060020a039092168252519081900360200190f35b34801561064d57600080fd5b506104ab6112e6565b34801561066257600080fd5b5061030a61130b565b34801561067757600080fd5b506103a3600160a060020a0360043516602435611363565b34801561069b57600080fd5b506103a3600160a060020a0360043516611379565b3480156106bc57600080fd5b506103a361138e565b3480156106d157600080fd5b506103a3611397565b3480156106e657600080fd5b50604080516020600480358082013583810280860185019096528085526104ab9536959394602494938501929182918501908490808284375094975050933594506113a09350505050565b34801561073d57600080fd5b506104ab61141f565b34801561075257600080fd5b506103cc61143d565b34801561076757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103a3948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506114439650505050505050565b3480156107d057600080fd5b506103a3600160a060020a0360043516611570565b3480156107f157600080fd5b5061030a611585565b34801561080657600080fd5b506103cc600160a060020a0360043581169060243516611748565b34801561082d57600080fd5b506104ab600160a060020a03600435166024351515611765565b34801561085357600080fd5b506103cc6117e0565b34801561086857600080fd5b506104ab600160a060020a03600435166117e6565b34801561088957600080fd5b506104ab60043561182c565b3480156108a157600080fd5b506103cc611848565b6000808315156108bd57600091506108d9565b508282028284828115156108cd57fe5b04146108d557fe5b8091505b5092915050565b6000426010541080156108f4575060115442105b156109225761091b606461090f84603263ffffffff6108aa16565b9063ffffffff61184e16565b90506109ad565b42601154108015610934575060125442105b1561094f5761091b606461090f84601963ffffffff6108aa16565b42601254108015610961575060135442105b1561097c5761091b606461090f84600a63ffffffff6108aa16565b4260135410801561098e575060145442105b156109a95761091b606461090f84600563ffffffff6108aa16565b5060005b919050565b6000828201838110156108d557fe5b60065460ff16156109d157600080fd5b600160a060020a03821615156109e657600080fd5b600160a060020a038316600090815260076020526040902054811115610a0b57600080fd5b600160a060020a038216600090815260076020526040902054610a34818363ffffffff6109b216565b1015610a3f57600080fd5b600160a060020a0383166000908152600f602052604090205460ff1615610a6557600080fd5b600160a060020a0382166000908152600f602052604090205460ff1615610a8b57600080fd5b600160a060020a038316600090815260076020526040902054610ab4908263ffffffff61186516565b600160a060020a038085166000908152600760205260408082209390935590841681522054610ae9908263ffffffff6109b216565b600160a060020a0380841660008181526007602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050158015610b7f573d6000803e3d6000fd5b50565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c075780601f10610bdc57610100808354040283529160200191610c07565b820191906000526020600020905b815481529060010190602001808311610bea57829003601f168201915b505050505081565b60065460009060ff1615610c2257600080fd5b50336000908152600860209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b60065460009060ff1615610c6957600080fd5b600160a060020a0384166000908152600860209081526040808320338452909152902054821115610c9957600080fd5b600160a060020a0384166000908152600860209081526040808320338452909152902054610ccd908363ffffffff61186516565b600160a060020a0385166000908152600860209081526040808320338452909152902055610cfc8484846109c1565b5060019392505050565b60105481565b60035460ff1681565b60135481565b60155481565b60065460009060ff1615610d3457600080fd5b33600090815260076020526040902054821115610d5057600080fd5b33600090815260076020526040902054610d70908363ffffffff61186516565b33600090815260076020526040902055600454610d93908363ffffffff61186516565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600054600160a060020a03163314610deb57600080fd5b60095460ff161515600114610dff57600080fd5b600160a060020a0381161515610e1457600080fd5b600160a060020a03166000908152600a60205260409020805460ff19166001179055565b600054600160a060020a03163314610e4f57600080fd5b60065460ff161515610e6d576006805460ff19166001179055610e78565b6006805460ff191690555b565b60165481565b60125481565b600054600160a060020a03163314610e9d57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610b7f573d6000803e3d6000fd5b60008054600160a060020a03163314610ef057600080fd5b610f0882670de0b6b3a764000063ffffffff6108aa16565b9050610f153033836109c1565b5050565b600054600160a060020a03163314610f3057600080fd5b8385108015610f3e57508284105b1515610f4957600080fd5b8183108015610f59575060145482105b1515610f6457600080fd5b601094909455601192909255601255601355601455565b60076020526000908152604090205481565b600080548190600160a060020a03163314610fa757600080fd5b60095460ff161515600114610fbb57600080fd5b825191506096821115610fcd57600080fd5b5060005b81811015611056578251600090849083908110610fea57fe5b60209081029091010151600160a060020a0316141561100857600080fd5b6001600a6000858481518110151561101c57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101610fd1565b505050565b600054600160a060020a0316331461107257600080fd5b600160a060020a03821660009081526007602052604090205461109b908263ffffffff6109b216565b600160a060020a0383166000908152600760205260409020556004546110c7908263ffffffff6109b216565b60045560408051828152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60065460009060ff161561115957600080fd5b600160a060020a03831660009081526007602052604090205482111561117e57600080fd5b600160a060020a03831660009081526008602090815260408083203384529091529020548211156111ae57600080fd5b600160a060020a0383166000908152600760205260409020546111d7908363ffffffff61186516565b600160a060020a0384166000908152600760209081526040808320939093556008815282822033835290522054611214908363ffffffff61186516565b600160a060020a038416600090815260086020908152604080832033845290915290205560045461124b908363ffffffff61186516565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a031633146112ad57600080fd5b60095460ff1615156112cb576009805460ff19166001179055610e78565b6009805460ff19169055565b600054600160a060020a031681565b600054600160a060020a031633146112fd57600080fd5b600054600160a060020a0316ff5b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610c075780601f10610bdc57610100808354040283529160200191610c07565b60006113703384846109c1565b50600192915050565b600f6020526000908152604090205460ff1681565b60065460ff1681565b60095460ff1681565b600080548190600160a060020a031633146113ba57600080fd5b8351915060968211156113cc57600080fd5b5060005b81811015611419576114113085838151811015156113ea57fe5b6020908102909101015161140c86670de0b6b3a764000063ffffffff6108aa16565b6109c1565b6001016113d0565b50505050565b600054600160a060020a0316331461143657600080fd5b6000601455565b60115481565b600654600090819060ff161561145857600080fd5b50836114648185610c0f565b15611568576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156114fc5781810151838201526020016114e4565b50505050905090810190601f1680156115295780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561154b57600080fd5b505af115801561155f573d6000803e3d6000fd5b50505050600191505b509392505050565b600a6020526000908152604090205460ff1681565b60604260105411156115cb575060408051808201909152601c81527f5072652073616c6520686173206e6f74207374617274656420796574000000006020820152611745565b426010541080156115dd575060115442105b1561161c575060408051808201909152601381527f5072652073616c652069732072756e6e696e67000000000000000000000000006020820152611745565b4260115410801561162e575060125442105b1561166d575060408051808201909152601681527f49434f20706861736520312069732072756e6e696e67000000000000000000006020820152611745565b4260125410801561167f575060135442105b156116be575060408051808201909152601681527f49434f20706861736520322069732072756e6e696e67000000000000000000006020820152611745565b426013541080156116d0575060145442105b1561170f575060408051808201909152601681527f49434f20706861736520332069732072756e6e696e67000000000000000000006020820152611745565b5060408051808201909152601181527f49434f206973206e6f742061637469766500000000000000000000000000000060208201525b90565b600860209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461177c57600080fd5b600160a060020a0382166000818152600f6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b60145481565b600054600160a060020a031633146117fd57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461184357600080fd5b601555565b60055481565b600080828481151561185c57fe5b04949350505050565b60008282111561187157fe5b509003905600a165627a7a723058203b964e03af483c1d3fa386fafd481f61b92b7046f0eaf5de2090d17a1d3540980029
Contract_Creation_Code_ARM:



Contract Adress: 0xb8d92047fb921881e8b7f367467ef7e8d9bdda3f
Contract Name: QaMzyeToken
Contract_Source_Code: 
pragma solidity ^0.4.25;
 contract Token{
     uint256 public totalSupply;
    function balanceOf(address _owner) public  view returns (uint256 balance);
    function  transfer(address _to, uint256 _value) public  returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)  public returns   
    (bool success);
    function approve(address _spender, uint256 _value) public  returns (bool success);
    function allowance(address _owner, address _spender) public view returns 
    (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 
    _value);
}
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
contract StandardToken is Token {
    using SafeMath for uint256;
    function transfer(address _to, uint256 _value) public  returns (bool success) {
        require(_to != address(0));
        require(balances[msg.sender] >= _value);   
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public  returns 
    (bool success) {
        require(_to != address(0));
        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
        balances[_to] = balances[_to].add(_value);
        balances[_from] = balances[_from].sub(_value); 
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }
    function balanceOf(address _owner) public  view  returns (uint256 balance) {
        return balances[_owner];
    }
    function approve(address _spender, uint256 _value) public  returns (bool success)   
    {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(address _owner, address _spender)  public  view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
}
contract QaMzyeToken is StandardToken { 
 string public name = "QaMzyeToken";
 string public symbol = "QMY";
 uint8 public decimals = 18;
 uint256 public INITIAL_SUPPLY = 520000000 * (10 ** 18);
 constructor() public 
 {
      totalSupply = INITIAL_SUPPLY;
      balances[msg.sender] = INITIAL_SUPPLY;
      emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);
  }
    /* Approves and then calls the receiving contract */
    function  approveAndCall (address  _spender, uint256  _value, bytes memory _extraData) public  returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
      if(
          !_spender.call(abi.encodeWithSelector(bytes4(keccak256("receiveApproval(address,uint256,address,bytes)")),msg.sender, _value, this, _extraData))
        ) { revert();}
        return true;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280600b81526020017f51614d7a7965546f6b656e000000000000000000000000000000000000000000815250600390805190602001906200005192919062000181565b506040805190810160405280600381526020017f514d590000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f92919062000181565b506012600560006101000a81548160ff021916908360ff1602179055506b01ae22487c1042af08000000600655348015620000d957600080fd5b50600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a362000230565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c457805160ff1916838001178555620001f5565b82800160010185558215620001f5579182015b82811115620001f4578251825591602001919060010190620001d7565b5b50905062000204919062000208565b5090565b6200022d91905b80821115620002295760008160009055506001016200020f565b5090565b90565b6112d080620002406000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b4578063095ea7b31461014457806318160ddd146101a957806323b872dd146101d45780632ff2e9dc14610259578063313ce5671461028457806370a08231146102b557806395d89b411461030c578063a9059cbb1461039c578063cae9ca5114610401578063dd62ed3e146104ac575b600080fd5b3480156100c057600080fd5b506100c9610523565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101095780820151818401526020810190506100ee565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015057600080fd5b5061018f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105c1565b604051808215151515815260200191505060405180910390f35b3480156101b557600080fd5b506101be610748565b6040518082815260200191505060405180910390f35b3480156101e057600080fd5b5061023f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061074e565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061026e610b0a565b6040518082815260200191505060405180910390f35b34801561029057600080fd5b50610299610b10565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102c157600080fd5b506102f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b23565b6040518082815260200191505060405180910390f35b34801561031857600080fd5b50610321610b6c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610361578082015181840152602081019050610346565b50505050905090810190601f16801561038e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a857600080fd5b506103e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c0a565b604051808215151515815260200191505060405180910390f35b34801561040d57600080fd5b50610492600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610e2e565b604051808215151515815260200191505060405180910390f35b3480156104b857600080fd5b5061050d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111e6565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b505050505081565b60008082148061064d57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561065857600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561078b57600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610856575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561086157600080fd5b6108b382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061094882600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a1a82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b600560009054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c025780601f10610bd757610100808354040283529160200191610c02565b820191906000526020600020905b815481529060010190602001808311610be557829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c4757600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610c9557600080fd5b610ce782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d7c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080831480610eba57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610ec557600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902033853086604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110cf5780820151818401526020810190506110b4565b50505050905090810190601f1680156110fc5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405180828051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af191505015156111db57600080fd5b600190509392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080828401905083811015151561128157fe5b8091505092915050565b600082821115151561129957fe5b8183039050929150505600a165627a7a723058200a680d8c646be52eb2fc7ab8e9660f891a62a7b3c5f60920d1df96ebd947f4d30029
Contract_Creation_Code_ARM:



Contract Adress: 0x27525a26a2fc5bec00e1bf82a73abebcd91c4a42
Contract Name: TbtzToken
Contract_Source_Code: 
pragma solidity  0.4.24;
// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * See https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
// File: zeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}
// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) internal balances;
  uint256 internal totalSupply_;
  /**
  * @dev Total number of tokens in existence
  */
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }
  /**
  * @dev Transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_value <= balances[msg.sender]);
    require(_to != address(0));
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }
}
// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address _owner, address _spender)
    public view returns (uint256);
  function transferFrom(address _from, address _to, uint256 _value)
    public returns (bool);
  function approve(address _spender, uint256 _value) public returns (bool);
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * https://github.com/ethereum/EIPs/issues/20
 * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) internal allowed;
  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    returns (bool)
  {
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    require(_to != address(0));
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }
  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }
  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(
    address _spender,
    uint256 _addedValue
  )
    public
    returns (bool)
  {
    allowed[msg.sender][_spender] = (
      allowed[msg.sender][_spender].add(_addedValue));
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(
    address _spender,
    uint256 _subtractedValue
  )
    public
    returns (bool)
  {
    uint256 oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue >= oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
// File: contracts/TbtzToken.sol
/**
 * @title SimpleToken
 * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. 
 * Note they can later distribute these tokens as they wish using `transfer` and other
 * `StandardToken` functions.
 */
contract TbtzToken is StandardToken
{
  string public name      = "Tebit Entertainment Digital Assets";
  string public symbol    = "TBTZ";
  uint256 public decimals = 8;
  uint256 public INITIAL_SUPPLY = 26000000000000000;
  /**
   * @dev Contructor that gives msg.sender all of existing tokens. 
   */
 constructor() public
 {
  totalSupply_ = INITIAL_SUPPLY;
  balances[msg.sender] = INITIAL_SUPPLY;
 }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
6080604052606060405190810160405280602281526020017f546562697420456e7465727461696e6d656e74204469676974616c204173736581526020017f7473000000000000000000000000000000000000000000000000000000000000815250600390805190602001906200007892919062000139565b506040805190810160405280600481526020017f5442545a0000000000000000000000000000000000000000000000000000000081525060049080519060200190620000c692919062000139565b506008600555665c5edcbc290000600655348015620000e457600080fd5b506006546001819055506006546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001e8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017c57805160ff1916838001178555620001ad565b82800160010185558215620001ad579182015b82811115620001ac5782518255916020019190600101906200018f565b5b509050620001bc9190620001c0565b5090565b620001e591905b80821115620001e1576000816000905550600101620001c7565b5090565b90565b61132480620001f86000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101b457806323b872dd146101df5780632ff2e9dc14610264578063313ce5671461028f57806366188463146102ba57806370a082311461031f57806395d89b4114610376578063a9059cbb14610406578063d73dd6231461046b578063dd62ed3e146104d0575b600080fd5b3480156100cb57600080fd5b506100d4610547565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101145780820151818401526020810190506100f9565b50505050905090810190601f1680156101415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015b57600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105e5565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c96106d7565b6040518082815260200191505060405180910390f35b3480156101eb57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106e1565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b50610279610a9c565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610aa2565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610305600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aa8565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b50610360600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d3a565b6040518082815260200191505060405180910390f35b34801561038257600080fd5b5061038b610d82565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103cb5780820151818401526020810190506103b0565b50505050905090810190601f1680156103f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041257600080fd5b50610451600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e20565b604051808215151515815260200191505060405180910390f35b34801561047757600080fd5b506104b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611040565b604051808215151515815260200191505060405180910390f35b3480156104dc57600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061123c565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105dd5780601f106105b2576101008083540402835291602001916105dd565b820191906000526020600020905b8154815290600101906020018083116105c057829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561073057600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107bb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107f757600080fd5b610848826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112c390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108db826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112dc90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109ac82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112c390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b60055481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515610bba576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c4e565b610bcd83826112c390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e185780601f10610ded57610100808354040283529160200191610e18565b820191906000526020600020905b815481529060010190602001808311610dfb57829003601f168201915b505050505081565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e6f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610eab57600080fd5b610efc826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112c390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f8f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112dc90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006110d182600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112dc90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156112d157fe5b818303905092915050565b600081830190508281101515156112ef57fe5b809050929150505600a165627a7a7230582006fceaf75406b60c7dffd3e61e94ddb4c00e74c8fa3212d8226816849604d1670029
Contract_Creation_Code_ARM:



Contract Adress: 0x33b77705f3fbcb092bb898f20d58a370968d5627
Contract Name: KBKJToken
Contract_Source_Code: 
pragma solidity ^0.4.18;
/**
 * 使用安全计算法进行加减乘除运算
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
contract Ownable {
  address public owner;
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }
}
/**
 * 合约管理员可以在紧急情况下暂停合约，停止转账行为
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
  event Pause();
  event Unpause();
  bool public paused = false;
  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
    require(!paused);
    _;
  }
  /**
   * @dev Modifier to make a function callable only when the contract is paused.
   */
  modifier whenPaused() {
    require(paused);
    _;
  }
  /**
   * @dev called by the owner to pause, triggers stopped state
   */
  function pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
  /**
   * @dev called by the owner to unpause, returns to normal state
   */
  function unpause() onlyOwner whenPaused public {
    paused = false;
    emit Unpause();
  }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) balances;
  uint256 totalSupply_;
  /**
  * @dev total number of tokens in existence
  */
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }
  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) internal allowed;
  /**
   * 方法调用者将from账户中的代币转入to账户中
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }
  /**
   * 方法调用者允许spender操作自己账户中value数量的代币
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * 查看spender还可以操作owner代币的数量是多少
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }
  /**
   * 调用者增加spender可操作的代币数量
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  /**
   * 调用者减少spender可操作的代币数量
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
/**
 * 一个可增发的代币。包含增发及结束增发的方法
 * @title Mintable token
 * @dev Simple ERC20 Token example, with mintable token creation
 * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120
 */
contract MintableToken is StandardToken, Ownable {
  event Mint(address indexed to, uint256 amount);
  event MintFinished();
  bool public mintingFinished = false;
  modifier canMint() {
    require(!mintingFinished);
    _;
  }
  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    totalSupply_ = totalSupply_.add(_amount);
    balances[_to] = balances[_to].add(_amount);
    emit Mint(_to, _amount);
    emit Transfer(address(0), _to, _amount);
    return true;
  }
  /**
   * @dev Function to stop minting new tokens.
   * @return True if the operation was successful.
   */
  function finishMinting() onlyOwner canMint public returns (bool) {
    mintingFinished = true;
    emit MintFinished();
    return true;
  }
}
/**
 * 设置增发的上限
 * @title Capped token
 * @dev Mintable token with a token cap.
 */
contract CappedToken is MintableToken {
  uint256 public cap;
  function CappedToken(uint256 _cap) public {
    require(_cap > 0);
    cap = _cap;
  }
  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    require(totalSupply_.add(_amount) <= cap);
    return super.mint(_to, _amount);
  }
}
// 暂停合约会影响以下方法的调用
contract PausableToken is StandardToken, Pausable {
  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transfer(_to, _value);
  }
  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transferFrom(_from, _to, _value);
  }
  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
    return super.approve(_spender, _value);
  }
  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
    return super.increaseApproval(_spender, _addedValue);
  }
  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
    return super.decreaseApproval(_spender, _subtractedValue);
  }
// 批量转账
function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
    uint receiverCount = _receivers.length;
    uint256 amount = _value.mul(uint256(receiverCount));
    /* require(receiverCount > 0 && receiverCount <= 20); */
    require(receiverCount > 0);
    require(_value > 0 && balances[msg.sender] >= amount);
    balances[msg.sender] = balances[msg.sender].sub(amount);
    for (uint i = 0; i < receiverCount; i++) {
        balances[_receivers[i]] = balances[_receivers[i]].add(_value);
        Transfer(msg.sender, _receivers[i], _value);
    }
    return true;
  }
}
/**
 * 调用者销毁手中的代币，代币总量也会相应减少，此方法是不可逆的
 * @title Burnable Token
 * @dev Token that can be irreversibly burned (destroyed).
 */
contract BurnableToken is BasicToken {
  event Burn(address indexed burner, uint256 value);
  /**
   * @dev Burns a specific amount of tokens.
   * @param _value The amount of token to be burned.
   */
  function burn(uint256 _value) public {
    require(_value <= balances[msg.sender]);
    // no need to require value <= totalSupply, since that would imply the
    // sender's balance is greater than the totalSupply, which *should* be an assertion failure
    address burner = msg.sender;
    balances[burner] = balances[burner].sub(_value);
    totalSupply_ = totalSupply_.sub(_value);
    emit Burn(burner, _value);
    emit Transfer(burner, address(0), _value);
  }
}
contract KBKJToken is CappedToken, PausableToken, BurnableToken {
    string public constant name = "HBKJCoin";
    string public constant symbol = "HBKJ";
    uint8 public constant decimals = 18;
    uint256 private constant TOKEN_CAP = 300000000 * (10 ** uint256(decimals));
    uint256 private constant TOKEN_INITIAL = 210000000 * (10 ** uint256(decimals));
    function KBKJToken() public CappedToken(TOKEN_CAP) {
      totalSupply_ = TOKEN_INITIAL;
      balances[msg.sender] = TOKEN_INITIAL;
      emit Transfer(address(0), msg.sender, TOKEN_INITIAL);
      paused = true;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cap","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_receivers","type":"address[]"},{"name":"_value","type":"uint256"}],"name":"batchTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"burner","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
60806040526000600360146101000a81548160ff0219169083151502179055506000600560006101000a81548160ff02191690831515021790555034801561004657600080fd5b50601260ff16600a0a6311e1a3000233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000811115156100a557600080fd5b8060048190555050601260ff16600a0a630c84588002600181905550601260ff16600a0a630c845880026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601260ff16600a0a630c845880026040518082815260200191505060405180910390a36001600560006101000a81548160ff0219169083151502179055506120bd806101ae6000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461012d57806306fdde031461015c578063095ea7b3146101ec57806318160ddd1461025157806323b872dd1461027c578063313ce56714610301578063355274ea146103325780633f4ba83a1461035d57806340c10f191461037457806342966c68146103d95780635c975abb14610406578063661884631461043557806370a082311461049a5780637d64bcb4146104f157806383f12fec146105205780638456cb59146105a85780638da5cb5b146105bf57806395d89b4114610616578063a9059cbb146106a6578063d73dd6231461070b578063dd62ed3e14610770578063f2fde38b146107e7575b600080fd5b34801561013957600080fd5b5061014261082a565b604051808215151515815260200191505060405180910390f35b34801561016857600080fd5b5061017161083d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b1578082015181840152602081019050610196565b50505050905090810190601f1680156101de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f857600080fd5b50610237600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610876565b604051808215151515815260200191505060405180910390f35b34801561025d57600080fd5b506102666108a6565b6040518082815260200191505060405180910390f35b34801561028857600080fd5b506102e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108b0565b604051808215151515815260200191505060405180910390f35b34801561030d57600080fd5b506103166108e2565b604051808260ff1660ff16815260200191505060405180910390f35b34801561033e57600080fd5b506103476108e7565b6040518082815260200191505060405180910390f35b34801561036957600080fd5b506103726108ed565b005b34801561038057600080fd5b506103bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ad565b604051808215151515815260200191505060405180910390f35b3480156103e557600080fd5b5061040460048036038101908080359060200190929190505050610a5e565b005b34801561041257600080fd5b5061041b610c16565b604051808215151515815260200191505060405180910390f35b34801561044157600080fd5b50610480600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c29565b604051808215151515815260200191505060405180910390f35b3480156104a657600080fd5b506104db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c59565b6040518082815260200191505060405180910390f35b3480156104fd57600080fd5b50610506610ca1565b604051808215151515815260200191505060405180910390f35b34801561052c57600080fd5b5061058e6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610d69565b604051808215151515815260200191505060405180910390f35b3480156105b457600080fd5b506105bd611003565b005b3480156105cb57600080fd5b506105d46110c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062257600080fd5b5061062b6110ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561066b578082015181840152602081019050610650565b50505050905090810190601f1680156106985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106b257600080fd5b506106f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611123565b604051808215151515815260200191505060405180910390f35b34801561071757600080fd5b50610756600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611153565b604051808215151515815260200191505060405180910390f35b34801561077c57600080fd5b506107d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611183565b6040518082815260200191505060405180910390f35b3480156107f357600080fd5b50610828600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061120a565b005b600360149054906101000a900460ff1681565b6040805190810160405280600881526020017f48424b4a436f696e00000000000000000000000000000000000000000000000081525081565b6000600560009054906101000a900460ff1615151561089457600080fd5b61089e83836112e1565b905092915050565b6000600154905090565b6000600560009054906101000a900460ff161515156108ce57600080fd5b6108d98484846113d3565b90509392505050565b601281565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561094957600080fd5b600560009054906101000a900460ff16151561096457600080fd5b6000600560006101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0b57600080fd5b600360149054906101000a900460ff16151515610a2757600080fd5b600454610a3f8360015461178d90919063ffffffff16565b11151515610a4c57600080fd5b610a5683836117ab565b905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610aad57600080fd5b339050610b01826000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b588260015461199190919063ffffffff16565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600560009054906101000a900460ff1681565b6000600560009054906101000a900460ff16151515610c4757600080fd5b610c5183836119aa565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cff57600080fd5b600360149054906101000a900460ff16151515610d1b57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600080600080600560009054906101000a900460ff16151515610d8b57600080fd5b85519250610da28386611c3b90919063ffffffff16565b9150600083111515610db357600080fd5b600085118015610e015750816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1515610e0c57600080fd5b610e5d826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090505b82811015610ff657610f14856000808985815181101515610ec157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808884815181101515610f2557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581815181101515610f7b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a38080600101915050610ea4565b6001935050505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561105f57600080fd5b600560009054906101000a900460ff1615151561107b57600080fd5b6001600560006101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f48424b4a0000000000000000000000000000000000000000000000000000000081525081565b6000600560009054906101000a900460ff1615151561114157600080fd5b61114b8383611c76565b905092915050565b6000600560009054906101000a900460ff1615151561117157600080fd5b61117b8383611e95565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561126657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156112de5780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561141057600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561145d57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156114e857600080fd5b611539826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115cc826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061169d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008082840190508381101515156117a157fe5b8091505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180957600080fd5b600360149054906101000a900460ff1615151561182557600080fd5b61183a8260015461178d90919063ffffffff16565b600181905550611891826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561199f57fe5b818303905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611abb576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b4f565b611ace838261199190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000806000841415611c505760009150611c6f565b8284029050828482811515611c6157fe5b04141515611c6b57fe5b8091505b5092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611cb357600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611d0057600080fd5b611d51826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611de4826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000611f2682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820eaefcfb300f65bbc85ef13cbea708cfd03e332c1947fc2bea9aea8279982357b0029
Contract_Creation_Code_ARM:



Contract Adress: 0x0b63cb1b6a55f6e225e60647c98aa09371237dc3
Contract Name: KSScidTOKEN
Contract_Source_Code: 
pragma solidity ^0.4.18;
// ---------------------------------------------------------------------------------------------------------------------------------------
//                                 ACLYD CENTRAL COMPANY IDENTITY (CCID) LISTING INDEX                                                   |
//      FULL NAME                             (CONTRACT ENTRY)              :         LISTED PUBLIC INFORMATION                          |                                |                             |
// Company Name                            (companyName)                    : Vinekross LLC                                              |
// Company Reg. Number                     (companyRegistrationgNum)        : No. L18958                                                 |
// Jurisdiction                            (companyJurisdiction)            : Saint Kitts and Nevis                                      |
// Type of Organization                    (companyType)                    : Limited Liability Company (LLC)                            |
// Listed Manager                          (companyManager)                 : Not Published                                              |
// Reg. Agent Name                         (companyRegisteredAgent)         : Morning Star Holdings Limited                              |
// Reg. Agent Address                      (companyRegisteredAgentAddress)  : Hunkins Waterfront Plaza, Ste 556, Main Street,            |
//                                                                          : Charlestown, Nevis                                         |
// Company Address                         (companyAddress)                 : Hunkins Waterfront Plaza, Ste 556, Main Street,            |
//                                                                          :  Charlestown, Nevis                                        |
// Company Official Website Domains        (companywebsites)                : Not Published                                              |
// CID Third Party Verification Wallet     (cidThirdPartyVerificationWallet): 0xC9Cd6d0801a51FdeF493E72155ba56e6B52f0E03                 |
// CID Token Symbol                        (cidtokensymbol)                 : KSScid                                                     |
// Total Number of CID tokens Issued       (totalCIDTokensIssued)           : 11                                                         |
// Central Company ID (CCID) Listing Wallet(ccidListingWallet)              : 0x893b9E12f0DA46C68607d69486afdECF709f2E6e                 |
//                                                                                                                                       |
// ---------------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------
//      ICO TOKEN DETAILS    :        TOKEN INFORMATION                      |
// ICO token Standard        :                                               |
// ICO token Symbol          :                                               |
// ICO Total Token Supply    :                                               |
// ICO token Contract Address:                                               |
//                                                                           |
// (c) by The ACLYD PROJECT'S CENTRAL COMPANY INDENTIY (CCID) LISTING INDEX  |  
// ---------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Safe maths
// ----------------------------------------------------------------------------
contract SafeMath {
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}
// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
// ----------------------------------------------------------------------------
contract ERC20Interface {
    function cidTokenSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// Borrowed from KSScid TOKEN
// ----------------------------------------------------------------------------
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
    address public owner;
    address public newOwner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    function Owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}
// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and assisted
// token transfers
// ----------------------------------------------------------------------------
contract KSScidTOKEN is ERC20Interface, Owned, SafeMath {
    /* Public variables of KSScidTOKEN */
    string public companyName = "Vinekross LLC";
    string public companyRegistrationgNum = "No. L18958";
    string public companyJurisdiction =  "Saint Kitts and Nevis";
    string public companyType  = "Limited Liability Company (LLC)";
    string public companyManager = "Not Published";
    string public companyRegisteredAgent = "Morning Star Holdings Limited";
    string public companyRegisteredAgentAddress = "Hunkins Waterfront Plaza, Ste 556, Main Street, Charlestown, Nevis";
    string public companyAddress = "Hunkins Waterfront Plaza, Ste 556, Main Street, Charlestown, Nevis";
    string public companywebsites = "Not Published";
    string public cidThirdPartyVerificationWallet = "0xc9cd6d0801a51fdef493e72155ba56e6b52f0e03";
    string public cidTokenSymbol = "KSScid";
    string public totalCIDTokensIssued = "11";
    string public ccidListingWallet = "0x893b9E12f0DA46C68607d69486afdECF709f2E6e";
    string public icoTokenStandard = "Not Published";
    string public icoTokenSymbol = "Not Published";
    string public icoTotalTokenSupply ="Not Published";
    string public icoTokenContractAddress = "Not Published";
    string public symbol = "KSScid";
    string public name = "KSScid";
    uint8 public decimals;
    uint public _totalSupply = 11;
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    function KSScidTOKEN() public {
        symbol = "KSScid";
        name = "KSScid";
        decimals = 0;
        _totalSupply = 11;
        balances[0xC9Cd6d0801a51FdeF493E72155ba56e6B52f0E03] = _totalSupply;
        Transfer(address(0), 0xC9Cd6d0801a51FdeF493E72155ba56e6B52f0E03, _totalSupply);
    }
    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function cidTokenSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }
    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to  account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(msg.sender, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account
    // 
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the from account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(from, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"companyJurisdiction","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cidTokenSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ccidListingWallet","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"icoTokenSymbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyRegisteredAgent","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalCIDTokensIssued","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"icoTokenContractAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companywebsites","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeSub","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeDiv","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"icoTotalTokenSupply","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyRegisteredAgentAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cidTokenSymbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"},{"name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"companyManager","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeMul","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cidThirdPartyVerificationWallet","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferAnyERC20Token","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeAdd","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"icoTokenStandard","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"companyName","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyRegistrationgNum","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyType","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280600d81526020017f56696e656b726f7373204c4c43000000000000000000000000000000000000008152506002908051906020019062000051929190620008a5565b506040805190810160405280600a81526020017f4e6f2e204c313839353800000000000000000000000000000000000000000000815250600390805190602001906200009f929190620008a5565b506040805190810160405280601581526020017f5361696e74204b6974747320616e64204e65766973000000000000000000000081525060049080519060200190620000ed929190620008a5565b506040805190810160405280601f81526020017f4c696d69746564204c696162696c69747920436f6d70616e7920284c4c432900815250600590805190602001906200013b929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c6973686564000000000000000000000000000000000000008152506006908051906020019062000189929190620008a5565b506040805190810160405280601d81526020017f4d6f726e696e67205374617220486f6c64696e6773204c696d6974656400000081525060079080519060200190620001d7929190620008a5565b50608060405190810160405280604281526020017f48756e6b696e7320576174657266726f6e7420506c617a612c2053746520353581526020017f362c204d61696e205374726565742c20436861726c6573746f776e2c204e657681526020017f69730000000000000000000000000000000000000000000000000000000000008152506008908051906020019062000272929190620008a5565b50608060405190810160405280604281526020017f48756e6b696e7320576174657266726f6e7420506c617a612c2053746520353581526020017f362c204d61696e205374726565742c20436861726c6573746f776e2c204e657681526020017f6973000000000000000000000000000000000000000000000000000000000000815250600990805190602001906200030d929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c697368656400000000000000000000000000000000000000815250600a90805190602001906200035b929190620008a5565b50606060405190810160405280602a81526020017f307863396364366430383031613531666465663439336537323135356261353681526020017f6536623532663065303300000000000000000000000000000000000000000000815250600b9080519060200190620003d0929190620008a5565b506040805190810160405280600681526020017f4b53536369640000000000000000000000000000000000000000000000000000815250600c90805190602001906200041e929190620008a5565b506040805190810160405280600281526020017f3131000000000000000000000000000000000000000000000000000000000000815250600d90805190602001906200046c929190620008a5565b50606060405190810160405280602a81526020017f307838393362394531326630444134364336383630376436393438366166644581526020017f4346373039663245366500000000000000000000000000000000000000000000815250600e9080519060200190620004e1929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c697368656400000000000000000000000000000000000000815250600f90805190602001906200052f929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c697368656400000000000000000000000000000000000000815250601090805190602001906200057d929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c69736865640000000000000000000000000000000000000081525060119080519060200190620005cb929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c6973686564000000000000000000000000000000000000008152506012908051906020019062000619929190620008a5565b506040805190810160405280600681526020017f4b535363696400000000000000000000000000000000000000000000000000008152506013908051906020019062000667929190620008a5565b506040805190810160405280600681526020017f4b5353636964000000000000000000000000000000000000000000000000000081525060149080519060200190620006b5929190620008a5565b50600b601655348015620006c857600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600681526020017f4b535363696400000000000000000000000000000000000000000000000000008152506013908051906020019062000756929190620008a5565b506040805190810160405280600681526020017f4b5353636964000000000000000000000000000000000000000000000000000081525060149080519060200190620007a4929190620008a5565b506000601560006101000a81548160ff021916908360ff160217905550600b6016819055506016546017600073c9cd6d0801a51fdef493e72155ba56e6b52f0e0373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555073c9cd6d0801a51fdef493e72155ba56e6b52f0e0373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6016546040518082815260200191505060405180910390a362000954565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008e857805160ff191683800117855562000919565b8280016001018555821562000919579182015b8281111562000918578251825591602001919060010190620008fb565b5b5090506200092891906200092c565b5090565b6200095191905b808211156200094d57600081600090555060010162000933565b5090565b90565b612b5880620009646000396000f3006080604052600436106101cd576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101d2578063095ea7b31461026257806323b872dd146102c7578063269b4a381461034c5780632c22af02146103dc578063313ce567146104075780633eaaf86b146104385780634e401a761461046357806353e1ead9146104f357806355f73e321461058357806362134b911461061357806370a08231146106a3578063710bdbe9146106fa57806379ba50971461078a5780638da5cb5b146107a157806395d89b41146107f857806397996b6714610888578063a1bd8a7814610918578063a293d1e8146109a8578063a9059cbb146109f3578063b5931f7c14610a58578063c2f3f03e14610aa3578063c2fe5ec214610b33578063c63b765914610bc3578063cae9ca5114610c53578063cc4320b414610cfe578063d05c78da14610d8e578063d4ee1d9014610dd9578063db9d59e714610e30578063dc39d06d14610ec0578063dd62ed3e14610f25578063e6cb901314610f9c578063edccd10514610fe7578063f2fde38b14611077578063f5ec2eed146110ba578063f73acff91461114a578063fdf48f2e146111da575b600080fd5b3480156101de57600080fd5b506101e761126a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022757808201518184015260208101905061020c565b50505050905090810190601f1680156102545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026e57600080fd5b506102ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611308565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b50610332600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113fa565b604051808215151515815260200191505060405180910390f35b34801561035857600080fd5b5061036161168a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a1578082015181840152602081019050610386565b50505050905090810190601f1680156103ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e857600080fd5b506103f1611728565b6040518082815260200191505060405180910390f35b34801561041357600080fd5b5061041c611773565b604051808260ff1660ff16815260200191505060405180910390f35b34801561044457600080fd5b5061044d611786565b6040518082815260200191505060405180910390f35b34801561046f57600080fd5b5061047861178c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104b857808201518184015260208101905061049d565b50505050905090810190601f1680156104e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ff57600080fd5b5061050861182a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054857808201518184015260208101905061052d565b50505050905090810190601f1680156105755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058f57600080fd5b506105986118c8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d85780820151818401526020810190506105bd565b50505050905090810190601f1680156106055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061f57600080fd5b50610628611966565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561066857808201518184015260208101905061064d565b50505050905090810190601f1680156106955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106af57600080fd5b506106e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a04565b6040518082815260200191505060405180910390f35b34801561070657600080fd5b5061070f611a4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074f578082015181840152602081019050610734565b50505050905090810190601f16801561077c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079657600080fd5b5061079f611aeb565b005b3480156107ad57600080fd5b506107b6611c8a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561080457600080fd5b5061080d611caf565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561084d578082015181840152602081019050610832565b50505050905090810190601f16801561087a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561089457600080fd5b5061089d611d4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108dd5780820151818401526020810190506108c2565b50505050905090810190601f16801561090a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561092457600080fd5b5061092d611deb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096d578082015181840152602081019050610952565b50505050905090810190601f16801561099a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109b457600080fd5b506109dd6004803603810190808035906020019092919080359060200190929190505050611e89565b6040518082815260200191505060405180910390f35b3480156109ff57600080fd5b50610a3e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ea5565b604051808215151515815260200191505060405180910390f35b348015610a6457600080fd5b50610a8d600480360381019080803590602001909291908035906020019092919050505061202e565b6040518082815260200191505060405180910390f35b348015610aaf57600080fd5b50610ab8612052565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610af8578082015181840152602081019050610add565b50505050905090810190601f168015610b255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b3f57600080fd5b50610b486120f0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b88578082015181840152602081019050610b6d565b50505050905090810190601f168015610bb55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610bcf57600080fd5b50610bd861218e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c18578082015181840152602081019050610bfd565b50505050905090810190601f168015610c455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c5f57600080fd5b50610ce4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061222c565b604051808215151515815260200191505060405180910390f35b348015610d0a57600080fd5b50610d1361247b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d53578082015181840152602081019050610d38565b50505050905090810190601f168015610d805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d9a57600080fd5b50610dc36004803603810190808035906020019092919080359060200190929190505050612519565b6040518082815260200191505060405180910390f35b348015610de557600080fd5b50610dee61254a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3c57600080fd5b50610e45612570565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e85578082015181840152602081019050610e6a565b50505050905090810190601f168015610eb25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ecc57600080fd5b50610f0b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061260e565b604051808215151515815260200191505060405180910390f35b348015610f3157600080fd5b50610f86600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612772565b6040518082815260200191505060405180910390f35b348015610fa857600080fd5b50610fd160048036038101908080359060200190929190803590602001909291905050506127f9565b6040518082815260200191505060405180910390f35b348015610ff357600080fd5b50610ffc612815565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561103c578082015181840152602081019050611021565b50505050905090810190601f1680156110695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561108357600080fd5b506110b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128b3565b005b3480156110c657600080fd5b506110cf612952565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561110f5780820151818401526020810190506110f4565b50505050905090810190601f16801561113c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561115657600080fd5b5061115f6129f0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561119f578082015181840152602081019050611184565b50505050905090810190601f1680156111cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156111e657600080fd5b506111ef612a8e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561122f578082015181840152602081019050611214565b50505050905090810190601f16801561125c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60148054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113005780601f106112d557610100808354040283529160200191611300565b820191906000526020600020905b8154815290600101906020018083116112e357829003601f168201915b505050505081565b600081601860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000611445601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e89565b601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061150e601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e89565b601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d7601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836127f9565b601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117205780601f106116f557610100808354040283529160200191611720565b820191906000526020600020905b81548152906001019060200180831161170357829003601f168201915b505050505081565b6000601760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460165403905090565b601560009054906101000a900460ff1681565b60165481565b600e8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118225780601f106117f757610100808354040283529160200191611822565b820191906000526020600020905b81548152906001019060200180831161180557829003601f168201915b505050505081565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118c05780601f10611895576101008083540402835291602001916118c0565b820191906000526020600020905b8154815290600101906020018083116118a357829003601f168201915b505050505081565b60108054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561195e5780601f106119335761010080835404028352916020019161195e565b820191906000526020600020905b81548152906001019060200180831161194157829003601f168201915b505050505081565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119fc5780601f106119d1576101008083540402835291602001916119fc565b820191906000526020600020905b8154815290600101906020018083116119df57829003601f168201915b505050505081565b6000601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ae35780601f10611ab857610100808354040283529160200191611ae3565b820191906000526020600020905b815481529060010190602001808311611ac657829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60138054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d455780601f10611d1a57610100808354040283529160200191611d45565b820191906000526020600020905b815481529060010190602001808311611d2857829003601f168201915b505050505081565b60128054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611de35780601f10611db857610100808354040283529160200191611de3565b820191906000526020600020905b815481529060010190602001808311611dc657829003601f168201915b505050505081565b600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e815780601f10611e5657610100808354040283529160200191611e81565b820191906000526020600020905b815481529060010190602001808311611e6457829003601f168201915b505050505081565b6000828211151515611e9a57600080fd5b818303905092915050565b6000611ef0601760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e89565b601760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f7c601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836127f9565b601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808211151561203e57600080fd5b818381151561204957fe5b04905092915050565b60118054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120e85780601f106120bd576101008083540402835291602001916120e8565b820191906000526020600020905b8154815290600101906020018083116120cb57829003601f168201915b505050505081565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121865780601f1061215b57610100808354040283529160200191612186565b820191906000526020600020905b81548152906001019060200180831161216957829003601f168201915b505050505081565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122245780601f106121f957610100808354040283529160200191612224565b820191906000526020600020905b81548152906001019060200180831161220757829003601f168201915b505050505081565b600082601860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156124095780820151818401526020810190506123ee565b50505050905090810190601f1680156124365780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561245857600080fd5b505af115801561246c573d6000803e3d6000fd5b50505050600190509392505050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125115780601f106124e657610100808354040283529160200191612511565b820191906000526020600020905b8154815290600101906020018083116124f457829003601f168201915b505050505081565b600081830290506000831480612539575081838281151561253657fe5b04145b151561254457600080fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126065780601f106125db57610100808354040283529160200191612606565b820191906000526020600020905b8154815290600101906020018083116125e957829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561266b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561272f57600080fd5b505af1158015612743573d6000803e3d6000fd5b505050506040513d602081101561275957600080fd5b8101908080519060200190929190505050905092915050565b6000601860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818301905082811015151561280f57600080fd5b92915050565b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128ab5780601f10612880576101008083540402835291602001916128ab565b820191906000526020600020905b81548152906001019060200180831161288e57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561290e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129e85780601f106129bd576101008083540402835291602001916129e8565b820191906000526020600020905b8154815290600101906020018083116129cb57829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a865780601f10612a5b57610100808354040283529160200191612a86565b820191906000526020600020905b815481529060010190602001808311612a6957829003601f168201915b505050505081565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b245780601f10612af957610100808354040283529160200191612b24565b820191906000526020600020905b815481529060010190602001808311612b0757829003601f168201915b5050505050815600a165627a7a723058202347f65f964dc808a4ca3934552b3d8f2c6947deafcd40aff879c3600bf26e600029
Contract_Creation_Code_ARM:



Contract Adress: 0x52f1e12283642689b791fac9a7c4af1003019c87
Contract Name: TokenERC20
Contract_Source_Code: 
pragma solidity >=0.4.22 <0.6.0;
contract owned {
    address public owner;
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
contract TokenERC20 {
    // Public variables of the token
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    // 18 decimals is the strongly suggested default, avoid changing it
    uint256 public totalSupply;
    // This creates an array with all balances
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    // This generates a public event on the blockchain that will notify clients
    event Transfer(address indexed from, address indexed to, uint256 value);
    // This generates a public event on the blockchain that will notify clients
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    // This notifies clients about the amount burnt
    event Burn(address indexed from, uint256 value);
    /**
     * Constrctor function
     *
     * Initializes contract with initial supply tokens to the creator of the contract
     */
    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens
        name = tokenName;                                       // Set the name for display purposes
        symbol = tokenSymbol;                                   // Set the symbol for display purposes
    }
    /**
     * Internal transfer, only can be called by this contract
     */
    function _transfer(address _from, address _to, uint _value) internal {
        // Prevent transfer to 0x0 address. Use burn() instead
        require(_to != address(0x0));
        // Check if the sender has enough
        require(balanceOf[_from] >= _value);
        // Check for overflows
        require(balanceOf[_to] + _value > balanceOf[_to]);
        // Save this for an assertion in the future
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        // Subtract from the sender
        balanceOf[_from] -= _value;
        // Add the same to the recipient
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        // Asserts are used to use static analysis to find bugs in your code. They should never fail
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    /**
     * Transfer tokens
     *
     * Send `_value` tokens to `_to` from your account
     *
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     // Check allowance
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    /**
     * Set allowance for other address
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    /**
     * Set allowance for other address and notify
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
     */
    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, address(this), _extraData);
            return true;
        }
    }
    /**
     * Destroy tokens
     *
     * Remove `_value` tokens from the system irreversibly
     *
     * @param _value the amount of money to burn
     */
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
        balanceOf[msg.sender] -= _value;            // Subtract from the sender
        totalSupply -= _value;                      // Updates totalSupply
        emit Burn(msg.sender, _value);
        return true;
    }
    /**
     * Destroy tokens from other account
     *
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
     *
     * @param _from the address of the sender
     * @param _value the amount of money to burn
     */
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
        require(_value <= allowance[_from][msg.sender]);    // Check allowance
        balanceOf[_from] -= _value;                         // Subtract from the targeted balance
        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
        totalSupply -= _value;                              // Update totalSupply
        emit Burn(_from, _value);
        return true;
    }
}
/******************************************/
/*       ADVANCED TOKEN STARTS HERE       */
/******************************************/
contract MyAdvancedToken is owned, TokenERC20 {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    /* This generates a public event on the blockchain that will notify clients */
    event FrozenFunds(address target, bool frozen);
    /* Initializes contract with initial supply tokens to the creator of the contract */
    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
    /* Internal transfer, only can be called by this contract */
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != address(0x0));                          // Prevent transfer to 0x0 address. Use burn() instead
        require (balanceOf[_from] >= _value);                   // Check if the sender has enough
        require (balanceOf[_to] + _value >= balanceOf[_to]);    // Check for overflows
        require(!frozenAccount[_from]);                         // Check if sender is frozen
        require(!frozenAccount[_to]);                           // Check if recipient is frozen
        balanceOf[_from] -= _value;                             // Subtract from the sender
        balanceOf[_to] += _value;                               // Add the same to the recipient
        emit Transfer(_from, _to, _value);
    }
    /// @notice Create `mintedAmount` tokens and send it to `target`
    /// @param target Address to receive the tokens
    /// @param mintedAmount the amount of tokens it will receive
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        emit Transfer(address(0), address(this), mintedAmount);
        emit Transfer(address(this), target, mintedAmount);
    }
    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens
    /// @param target Address to be frozen
    /// @param freeze either to freeze it or not
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth
    /// @param newSellPrice Price the users can sell to the contract
    /// @param newBuyPrice Price users can buy from the contract
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    /// @notice Buy tokens from contract by sending ether
    function buy() payable public {
        uint amount = msg.value / buyPrice;                 // calculates the amount
        _transfer(address(this), msg.sender, amount);       // makes the transfers
    }
    /// @notice Sell `amount` tokens to contract
    /// @param amount amount of tokens to be sold
    function sell(uint256 amount) public {
        address myAddress = address(this);
        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy
        _transfer(msg.sender, address(this), amount);       // makes the transfers
        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60806040526012600260006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b506040516200148e3803806200148e833981018060405260608110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856001820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856001820283011164010000000082111715620000fd57600080fd5b5050929190505050600260009054906101000a900460ff1660ff16600a0a8302600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000908051906020019062000181929190620001a4565b5080600190805190602001906200019a929190620001a4565b5050505062000253565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e757805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000217578251825591602001919060010190620001fa565b5b5090506200022791906200022b565b5090565b6200025091905b808211156200024c57600081600090555060010162000232565b5090565b90565b61122b80620002636000396000f3fe6080604052600436106100b4576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde03146100b9578063095ea7b31461014957806318160ddd146101bc57806323b872dd146101e7578063313ce5671461027a57806342966c68146102ab57806370a08231146102fe57806379cc67901461036357806395d89b41146103d6578063a9059cbb14610466578063cae9ca51146104d9578063dd62ed3e146105e3575b600080fd5b3480156100c557600080fd5b506100ce610668565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010e5780820151818401526020810190506100f3565b50505050905090810190601f16801561013b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015557600080fd5b506101a26004803603604081101561016c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610706565b604051808215151515815260200191505060405180910390f35b3480156101c857600080fd5b506101d16107f8565b6040518082815260200191505060405180910390f35b3480156101f357600080fd5b506102606004803603606081101561020a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107fe565b604051808215151515815260200191505060405180910390f35b34801561028657600080fd5b5061028f61092b565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102b757600080fd5b506102e4600480360360208110156102ce57600080fd5b810190808035906020019092919050505061093e565b604051808215151515815260200191505060405180910390f35b34801561030a57600080fd5b5061034d6004803603602081101561032157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a42565b6040518082815260200191505060405180910390f35b34801561036f57600080fd5b506103bc6004803603604081101561038657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a5a565b604051808215151515815260200191505060405180910390f35b3480156103e257600080fd5b506103eb610c74565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042b578082015181840152602081019050610410565b50505050905090810190601f1680156104585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047257600080fd5b506104bf6004803603604081101561048957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d12565b604051808215151515815260200191505060405180910390f35b3480156104e557600080fd5b506105c9600480360360608110156104fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561054357600080fd5b82018360208201111561055557600080fd5b8035906020019184600183028401116401000000008311171561057757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610d29565b604051808215151515815260200191505060405180910390f35b3480156105ef57600080fd5b506106526004803603604081101561060657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ead565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fe5780601f106106d3576101008083540402835291602001916106fe565b820191906000526020600020905b8154815290600101906020018083116106e157829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561088b57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610920848484610ed2565b600190509392505050565b600260009054906101000a900460ff1681565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561098e57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60046020528060005260406000206000915090505481565b600081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610aaa57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b3557600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d0a5780601f10610cdf57610100808354040283529160200191610d0a565b820191906000526020600020905b815481529060010190602001808311610ced57829003601f168201915b505050505081565b6000610d1f338484610ed2565b6001905092915050565b600080849050610d398585610706565b15610ea4578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e33578082015181840152602081019050610e18565b50505050905090810190601f168015610e605780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610e8257600080fd5b505af1158015610e96573d6000803e3d6000fd5b505050506001915050610ea6565b505b9392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f0e57600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f5c57600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610fea57600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011415156111f957fe5b5050505056fea165627a7a723058205147d5044151f8b444dd5d343598d2ed6b4844f8c5174a7f69649e097cc70cd1002900000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000742494f636f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000342494f0000000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0xda58e44ef23c39f14f8ec920a9937f7812edf95d
Contract Name: CheersCoin
Contract_Source_Code: 
pragma solidity ^0.4.25;
// File: contracts/util/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, throws on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers, truncating the quotient.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    /**
    * @dev Adds two numbers, throws on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
// File: contracts/token/ERC20.sol
/**
 *   @title ERC20
 *   @dev Standart ERC20 token interface
 */
contract ERC20 {
    uint256 public totalSupply = 0;
    mapping(address => uint256) internal balances;
    mapping (address => mapping (address => uint256)) internal allowed;
    function balanceOf(address _who) public view returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
    function approve(address _spender, uint256 _value) public returns (bool);
    function allowance(address _owner, address _spender) public view returns (uint256);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
// File: contracts/token/CheersCoin.sol
contract CheersCoin is ERC20 {
    using SafeMath for uint256;
    string public constant name = "Cheers Coin";
    string public constant symbol = "CHRS";
    uint8 public constant decimals = 18;
    // Ico contract address
    address public ico;
    address public admin;
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    // Disables/enables token transfers, for migration to platform mainnet
    bool public tokensAreFrozen = true;
    // Allows execution by the ico only
    modifier icoOnly {
        require(msg.sender == ico || msg.sender == admin);
        _;
    }
    modifier tokenUnfrozen {
        require(msg.sender == ico || msg.sender == admin || !tokensAreFrozen);
        _;
    }
    constructor (address _ico, address _admin) public {
        ico = _ico;
        admin = _admin;
    }
    function mintTokens(address _beneficiary, uint256 _value) external icoOnly {
        require(_beneficiary != address(0));
        require(_value > 0);
        uint256 tempValue = _value *  (10 ** uint256(decimals));
        balances[_beneficiary] = balances[_beneficiary].add(tempValue);
        totalSupply = totalSupply.add(tempValue);
        emit Mint(_beneficiary, tempValue);
        emit Transfer(0x0, _beneficiary, tempValue);
    }
    function defrostTokens() external icoOnly {
        tokensAreFrozen = false;
    }
    function frostTokens() external icoOnly {
        tokensAreFrozen = true;
    }
    function burnTokens(address _investor, uint256 _value) external icoOnly {
        require(_value > 0);
        require(balances[_investor] >= _value);
        uint256 tempValue = _value *  (10 ** uint256(decimals));
        totalSupply = totalSupply.sub(tempValue);
        balances[_investor] = balances[_investor].sub(tempValue);
        emit Burn(_investor, tempValue);
    }
    function balanceOf(address _who) public view returns(uint256) {
        return balances[_who];
    }
    function transfer(address _to, uint256 _amount) public tokenUnfrozen returns(bool) {
        require(_to != address(0));
        require(_to != address(this));
        require(_amount > 0);
        require(_amount <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _amount) public tokenUnfrozen returns(bool) {
        require(_to != address(0));
        require(_to != address(this));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }
    function approve(address _spender, uint256 _amount) public returns(bool) {
        // reduce spender's allowance to 0 then set desired value after to avoid race condition
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }
    function allowance(address _owner, address _spender) public view returns(uint256) {
        return allowed[_owner][_spender];
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_investor","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"frostTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"ico","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"defrostTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"tokensAreFrozen","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_beneficiary","type":"address"},{"name":"_value","type":"uint256"}],"name":"mintTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"admin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_ico","type":"address"},{"name":"_admin","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
6080604052600080556004805460a060020a60ff0219167401000000000000000000000000000000000000000017905534801561003b57600080fd5b50604051604080610c3183398101604052805160209091015160038054600160a060020a03938416600160a060020a03199182161790915560048054939092169216919091179055610b9f806100926000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b3146101745780630d1118ce146101ac57806318160ddd146101d257806323b872dd146101f9578063313ce567146102235780634ac6d5f41461024e5780635d4522011461026357806370a08231146102945780638e0ef033146102b557806395d89b41146102ca578063a9059cbb146102df578063ca67065f14610303578063dd62ed3e14610318578063f0dda65c1461033f578063f851a44014610363575b600080fd5b3480156100f657600080fd5b506100ff610378565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a03600435166024356103af565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101d0600160a060020a0360043516602435610451565b005b3480156101de57600080fd5b506101e7610556565b60408051918252519081900360200190f35b34801561020557600080fd5b50610198600160a060020a036004358116906024351660443561055c565b34801561022f57600080fd5b5061023861073e565b6040805160ff9092168252519081900360200190f35b34801561025a57600080fd5b506101d0610743565b34801561026f57600080fd5b506102786107a8565b60408051600160a060020a039092168252519081900360200190f35b3480156102a057600080fd5b506101e7600160a060020a03600435166107b7565b3480156102c157600080fd5b506101d06107d2565b3480156102d657600080fd5b506100ff610820565b3480156102eb57600080fd5b50610198600160a060020a0360043516602435610857565b34801561030f57600080fd5b506101986109b2565b34801561032457600080fd5b506101e7600160a060020a03600435811690602435166109d3565b34801561034b57600080fd5b506101d0600160a060020a03600435166024356109fe565b34801561036f57600080fd5b50610278610b3c565b60408051808201909152600b81527f43686565727320436f696e000000000000000000000000000000000000000000602082015281565b60008115806103df5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b15156103ea57600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600354600090600160a060020a03163314806104775750600454600160a060020a031633145b151561048257600080fd5b6000821161048f57600080fd5b600160a060020a0383166000908152600160205260409020548211156104b457600080fd5b50600054670de0b6b3a76400008202906104d4908263ffffffff610b4b16565b6000908155600160a060020a0384168152600160205260409020546104ff908263ffffffff610b4b16565b600160a060020a038416600081815260016020908152604091829020939093558051848152905191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592918290030190a2505050565b60005481565b600354600090600160a060020a03163314806105825750600454600160a060020a031633145b806105a8575060045474010000000000000000000000000000000000000000900460ff16155b15156105b357600080fd5b600160a060020a03831615156105c857600080fd5b600160a060020a0383163014156105de57600080fd5b600160a060020a03841660009081526001602052604090205482111561060357600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561063357600080fd5b600160a060020a03841660009081526001602052604090205461065c908363ffffffff610b4b16565b600160a060020a0385166000908152600160209081526040808320939093556002815282822033835290522054610699908363ffffffff610b4b16565b600160a060020a0380861660009081526002602090815260408083203384528252808320949094559186168152600190915220546106dd908363ffffffff610b5d16565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b601281565b600354600160a060020a03163314806107665750600454600160a060020a031633145b151561077157600080fd5b6004805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600354600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a03163314806107f55750600454600160a060020a031633145b151561080057600080fd5b6004805474ff000000000000000000000000000000000000000019169055565b60408051808201909152600481527f4348525300000000000000000000000000000000000000000000000000000000602082015281565b600354600090600160a060020a031633148061087d5750600454600160a060020a031633145b806108a3575060045474010000000000000000000000000000000000000000900460ff16155b15156108ae57600080fd5b600160a060020a03831615156108c357600080fd5b600160a060020a0383163014156108d957600080fd5b600082116108e657600080fd5b3360009081526001602052604090205482111561090257600080fd5b33600090815260016020526040902054610922908363ffffffff610b4b16565b3360009081526001602052604080822092909255600160a060020a03851681522054610954908363ffffffff610b5d16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60045474010000000000000000000000000000000000000000900460ff1681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a0316331480610a245750600454600160a060020a031633145b1515610a2f57600080fd5b600160a060020a0383161515610a4457600080fd5b60008211610a5157600080fd5b50600160a060020a038216600090815260016020526040902054670de0b6b3a7640000820290610a87908263ffffffff610b5d16565b600160a060020a03841660009081526001602052604081209190915554610ab4908263ffffffff610b5d16565b600055604080518281529051600160a060020a038516917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a2604080518281529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b600454600160a060020a031681565b600082821115610b5757fe5b50900390565b600082820183811015610b6c57fe5b93925050505600a165627a7a72305820d3c179aea06568e87ca91947e6914ce9be63270ed7947442695bb6b45fb253cf0029000000000000000000000000fc7816f5c39ca41238f770010d99e12b3c4ef4fa000000000000000000000000cdc8af3a3bd9144e88c392de631f8800f4caf18d
Contract_Creation_Code_ARM:



Contract Adress: 0xa6a75cce4504be61eaf35093b347fa879d24d921
Contract Name: TokenERC20
Contract_Source_Code: 
pragma solidity ^0.4.24;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }  // token的 接受者 这里声明接口, 将会在我们的ABI里
contract TokenERC20 {
/*********Token的属性说明************/
    string public name = 'Super DataBase Coin';
    string public symbol = 'SDBC';
    uint8 public decimals = 8;  // 18 是建议的默认值
    uint256 public totalSupply; // 发行量
    // 建立映射 地址对应了 uint' 便是他的余额
    mapping (address => uint256) public balanceOf;   
    // 地址对应余额
    mapping (address => mapping (address => uint256)) public allowance;
     // 事件，用来通知客户端Token交易发生
    event Transfer(address indexed from, address indexed to, uint256 value);
     // 事件，用来通知客户端代币被消耗(这里就不是转移, 是token用了就没了)
    event Burn(address indexed from, uint256 value);
    // 这里是构造函数, 实例创建时候执行
    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // 这里确定了总发行量
        balanceOf[msg.sender] = totalSupply;    // 这里就比较重要, 这里相当于实现了, 把token 全部给合约的Creator
        name = tokenName;
        symbol = tokenSymbol;
    }
    // token的发送函数
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);    // 不是零地址
        require(balanceOf[_from] >= _value);        // 有足够的余额来发送
        require(balanceOf[_to] + _value > balanceOf[_to]);  // 这里也有意思, 不能发送负数的值(hhhh)
        uint previousBalances = balanceOf[_from] + balanceOf[_to];  // 这个是为了校验, 避免过程出错, 总量不变对吧?
        balanceOf[_from] -= _value; //发钱 不多说
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);   // 这里触发了转账的事件 , 见上event
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);  // 判断总额是否一致, 避免过程出错
    }
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value); // 这里已经储存了 合约创建者的信息, 这个函数是只能被合约创建者使用
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     // 这句很重要, 地址对应的合约地址(也就是token余额)
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;   // 这里是可花费总量
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280601381526020017f537570657220446174614261736520436f696e000000000000000000000000008152506000908051906020019062000051929190620001a1565b506040805190810160405280600481526020017f5344424300000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620001a1565b506008600260006101000a81548160ff021916908360ff160217905550348015620000c957600080fd5b5060405162000f5538038062000f55833981018060405281019080805190602001909291908051820192919060200180518201929190505050600260009054906101000a900460ff1660ff16600a0a8302600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600090805190602001906200017e929190620001a1565b50806001908051906020019062000197929190620001a1565b5050505062000250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e457805160ff191683800117855562000215565b8280016001018555821562000215579182015b8281111562000214578251825591602001919060010190620001f7565b5b50905062000224919062000228565b5090565b6200024d91905b80821115620002495760008160009055506001016200022f565b5090565b90565b610cf580620002606000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a9578063095ea7b31461013957806318160ddd1461019e57806323b872dd146101c9578063313ce5671461024e57806370a082311461027f57806395d89b41146102d6578063a9059cbb14610366578063cae9ca51146103b3578063dd62ed3e1461045e575b600080fd5b3480156100b557600080fd5b506100be6104d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fe5780820151818401526020810190506100e3565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014557600080fd5b50610184600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610573565b604051808215151515815260200191505060405180910390f35b3480156101aa57600080fd5b506101b3610600565b6040518082815260200191505060405180910390f35b3480156101d557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610606565b604051808215151515815260200191505060405180910390f35b34801561025a57600080fd5b50610263610733565b604051808260ff1660ff16815260200191505060405180910390f35b34801561028b57600080fd5b506102c0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610746565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b506102eb61075e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032b578082015181840152602081019050610310565b50505050905090810190601f1680156103585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037257600080fd5b506103b1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107fc565b005b3480156103bf57600080fd5b50610444600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061080b565b604051808215151515815260200191505060405180910390f35b34801561046a57600080fd5b506104bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061098e565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056b5780601f106105405761010080835404028352916020019161056b565b820191906000526020600020905b81548152906001019060200180831161054e57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561069357600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506107288484846109b3565b600190509392505050565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b505050505081565b6108073383836109b3565b5050565b60008084905061081b8585610573565b15610985578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109155780820151818401526020810190506108fa565b50505050905090810190601f1680156109425780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561096457600080fd5b505af1158015610978573d6000803e3d6000fd5b5050505060019150610986565b5b509392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156109da57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2857600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610ab657600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610cc357fe5b505050505600a165627a7a72305820d82e6d673c2c5c344b9c6f50d7d02d0d71efc193d752f65c1a23e59905b8e2fc00290000000000000000000000000000000000000000000000000000000077359400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000013537570657220446174614261736520436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045344424300000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0x72a50e8717681f4838a8908e6a40f334ce85c7cc
Contract Name: HighwayAcademyCertificates
Contract_Source_Code: 
pragma solidity 0.4.25;
contract HighwayAcademyCertificates {
    event NewCertificate(uint256 indexed certificate_number, string info, string course_name, string student_name, string linkedin, string released_project, string mentor_name, string graduation_date_place);
    struct Certificate {
        string info;
        string course_name;
        string student_name;
        string student_linkedin;
        string released_project;
        string mentor_name;
        string graduation_date_place;
    }
    address public owner;
    uint256 public count = 0;
    mapping(uint256 => Certificate) public certificates;
    modifier onlyOwner {
        require(msg.sender == owner, "Only owner can use this function");
        _;
    }
    constructor() public {
        owner = msg.sender;
    }
    function addCertificate(uint256 certificate_number, string info, string course_name, string student_name, string student_linkedin, string released_project, string mentor_name, string graduation_date_place) public onlyOwner {
        count++;
        require(count == certificate_number, "Wrong certificate number");
        certificates[count] = Certificate(info, course_name, student_name, student_linkedin, released_project, mentor_name, graduation_date_place);
        emit NewCertificate(certificate_number, info, course_name, student_name, student_linkedin, released_project, mentor_name, graduation_date_place);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"certificate_number","type":"uint256"},{"name":"info","type":"string"},{"name":"course_name","type":"string"},{"name":"student_name","type":"string"},{"name":"student_linkedin","type":"string"},{"name":"released_project","type":"string"},{"name":"mentor_name","type":"string"},{"name":"graduation_date_place","type":"string"}],"name":"addCertificate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"certificates","outputs":[{"name":"info","type":"string"},{"name":"course_name","type":"string"},{"name":"student_name","type":"string"},{"name":"student_linkedin","type":"string"},{"name":"released_project","type":"string"},{"name":"mentor_name","type":"string"},{"name":"graduation_date_place","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"certificate_number","type":"uint256"},{"indexed":false,"name":"info","type":"string"},{"indexed":false,"name":"course_name","type":"string"},{"indexed":false,"name":"student_name","type":"string"},{"indexed":false,"name":"linkedin","type":"string"},{"indexed":false,"name":"released_project","type":"string"},{"indexed":false,"name":"mentor_name","type":"string"},{"indexed":false,"name":"graduation_date_place","type":"string"}],"name":"NewCertificate","type":"event"}]
Contract_Creation_Code_16:
6080604052600060015534801561001557600080fd5b5060008054600160a060020a03191633179055610f9d806100376000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306661abd8114610066578063388e6dca1461008d578063663b3e22146102615780638da5cb5b14610558575b600080fd5b34801561007257600080fd5b5061007b610596565b60408051918252519081900360200190f35b34801561009957600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261025f95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061059c9650505050505050565b005b34801561026d57600080fd5b50610279600435610aaf565b604051808060200180602001806020018060200180602001806020018060200188810388528f818151815260200191508051906020019080838360005b838110156102ce5781810151838201526020016102b6565b50505050905090810190601f1680156102fb5780820380516001836020036101000a031916815260200191505b5088810387528e818151815260200191508051906020019080838360005b83811015610331578181015183820152602001610319565b50505050905090810190601f16801561035e5780820380516001836020036101000a031916815260200191505b5088810386528d5181528d516020918201918f019080838360005b83811015610391578181015183820152602001610379565b50505050905090810190601f1680156103be5780820380516001836020036101000a031916815260200191505b5088810385528c5181528c516020918201918e019080838360005b838110156103f15781810151838201526020016103d9565b50505050905090810190601f16801561041e5780820380516001836020036101000a031916815260200191505b5088810384528b5181528b516020918201918d019080838360005b83811015610451578181015183820152602001610439565b50505050905090810190601f16801561047e5780820380516001836020036101000a031916815260200191505b5088810383528a5181528a516020918201918c019080838360005b838110156104b1578181015183820152602001610499565b50505050905090810190601f1680156104de5780820380516001836020036101000a031916815260200191505b5088810382528951815289516020918201918b019080838360005b838110156105115781810151838201526020016104f9565b50505050905090810190601f16801561053e5780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b34801561056457600080fd5b5061056d610eba565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff16331461062257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f6e6c79206f776e65722063616e2075736520746869732066756e6374696f6e604482015290519081900360640190fd5b60018054810190819055881461069957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f57726f6e67206365727469666963617465206e756d6265720000000000000000604482015290519081900360640190fd5b6040805160e0810182528881526020808201899052818301889052606082018790526080820186905260a0820185905260c082018490526001546000908152600282529290922081518051929391926106f59284920190610ed6565b50602082810151805161070e9260018501920190610ed6565b506040820151805161072a916002840191602090910190610ed6565b5060608201518051610746916003840191602090910190610ed6565b5060808201518051610762916004840191602090910190610ed6565b5060a0820151805161077e916005840191602090910190610ed6565b5060c0820151805161079a916006840191602090910190610ed6565b50905050877f0fe4673274ed77f08330956c16a4c9c4887ef436bc950e9c76049667731ca8ed88888888888888604051808060200180602001806020018060200180602001806020018060200188810388528f818151815260200191508051906020019080838360005b8381101561081c578181015183820152602001610804565b50505050905090810190601f1680156108495780820380516001836020036101000a031916815260200191505b5088810387528e818151815260200191508051906020019080838360005b8381101561087f578181015183820152602001610867565b50505050905090810190601f1680156108ac5780820380516001836020036101000a031916815260200191505b5088810386528d5181528d516020918201918f019080838360005b838110156108df5781810151838201526020016108c7565b50505050905090810190601f16801561090c5780820380516001836020036101000a031916815260200191505b5088810385528c5181528c516020918201918e019080838360005b8381101561093f578181015183820152602001610927565b50505050905090810190601f16801561096c5780820380516001836020036101000a031916815260200191505b5088810384528b5181528b516020918201918d019080838360005b8381101561099f578181015183820152602001610987565b50505050905090810190601f1680156109cc5780820380516001836020036101000a031916815260200191505b5088810383528a5181528a516020918201918c019080838360005b838110156109ff5781810151838201526020016109e7565b50505050905090810190601f168015610a2c5780820380516001836020036101000a031916815260200191505b5088810382528951815289516020918201918b019080838360005b83811015610a5f578181015183820152602001610a47565b50505050905090810190601f168015610a8c5780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390a25050505050505050565b600260208181526000928352604092839020805484516001821615610100026000190190911693909304601f8101839004830284018301909452838352928391830182828015610b405780601f10610b1557610100808354040283529160200191610b40565b820191906000526020600020905b815481529060010190602001808311610b2357829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bde5780601f10610bb357610100808354040283529160200191610bde565b820191906000526020600020905b815481529060010190602001808311610bc157829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959695945090925090830182828015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152949594935090830182828015610d005780601f10610cd557610100808354040283529160200191610d00565b820191906000526020600020905b815481529060010190602001808311610ce357829003601f168201915b5050505060048301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152949594935090830182828015610d905780601f10610d6557610100808354040283529160200191610d90565b820191906000526020600020905b815481529060010190602001808311610d7357829003601f168201915b5050505060058301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152949594935090830182828015610e205780601f10610df557610100808354040283529160200191610e20565b820191906000526020600020905b815481529060010190602001808311610e0357829003601f168201915b5050505060068301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152949594935090830182828015610eb05780601f10610e8557610100808354040283529160200191610eb0565b820191906000526020600020905b815481529060010190602001808311610e9357829003601f168201915b5050505050905087565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f1757805160ff1916838001178555610f44565b82800160010185558215610f44579182015b82811115610f44578251825591602001919060010190610f29565b50610f50929150610f54565b5090565b610f6e91905b80821115610f505760008155600101610f5a565b905600a165627a7a72305820d7d87e1b74d8cc5588d6ad4fd3f35fd78a333e88af8a1ede73fc27e891d68d3a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xFa4D0296D4b5DF9788ef0505d3Ab9302306C0106
Contract Name: ZCNYToken
Contract_Source_Code: 
pragma solidity ^0.4.17;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    /**
      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
      * account.
      */
    function Ownable() public {
        owner = msg.sender;
    }
    /**
      * @dev Throws if called by any account other than the owner.
      */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    /**
    * @dev Allows the current owner to transfer control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
    */
    function transferOwnership(address newOwner) public onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20Basic {
    uint public _totalSupply;
    function totalSupply() public constant returns (uint);
    function balanceOf(address who) public constant returns (uint);
    function transfer(address to, uint value) public;
    event Transfer(address indexed from, address indexed to, uint value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
    function allowance(address owner, address spender) public constant returns (uint);
    function transferFrom(address from, address to, uint value) public;
    function approve(address spender, uint value) public;
    event Approval(address indexed owner, address indexed spender, uint value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is Ownable, ERC20Basic {
    using SafeMath for uint;
    mapping(address => uint) public balances;
    // additional variables for use if transaction fees ever became necessary
    uint public basisPointsRate = 0;
    uint public maximumFee = 0;
    /**
    * @dev Fix for the ERC20 short address attack.
    */
    modifier onlyPayloadSize(uint size) {
        require(!(msg.data.length < size + 4));
        _;
    }
    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {
        uint fee = (_value.mul(basisPointsRate)).div(10000);
        if (fee > maximumFee) {
            fee = maximumFee;
        }
        uint sendAmount = _value.sub(fee);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(sendAmount);
        if (fee > 0) {
            balances[owner] = balances[owner].add(fee);
            Transfer(msg.sender, owner, fee);
        }
        Transfer(msg.sender, _to, sendAmount);
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param _owner The address to query the the balance of.
    * @return An uint representing the amount owned by the passed address.
    */
    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is BasicToken, ERC20 {
    mapping (address => mapping (address => uint)) public allowed;
    uint public constant MAX_UINT = 2**256 - 1;
    /**
    * @dev Transfer tokens from one address to another
    * @param _from address The address which you want to send tokens from
    * @param _to address The address which you want to transfer to
    * @param _value uint the amount of tokens to be transferred
    */
    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {
        var _allowance = allowed[_from][msg.sender];
        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
        // if (_value > _allowance) throw;
        uint fee = (_value.mul(basisPointsRate)).div(10000);
        if (fee > maximumFee) {
            fee = maximumFee;
        }
        if (_allowance < MAX_UINT) {
            allowed[_from][msg.sender] = _allowance.sub(_value);
        }
        uint sendAmount = _value.sub(fee);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(sendAmount);
        if (fee > 0) {
            balances[owner] = balances[owner].add(fee);
            Transfer(_from, owner, fee);
        }
        Transfer(_from, _to, sendAmount);
    }
    /**
    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
    * @param _spender The address which will spend the funds.
    * @param _value The amount of tokens to be spent.
    */
    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {
        // To change the approve amount you first have to reduce the addresses`
        //  allowance to zero by calling `approve(_spender, 0)` if it is not
        //  already 0 to mitigate the race condition described here:
        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
    }
    /**
    * @dev Function to check the amount of tokens than an owner allowed to a spender.
    * @param _owner address The address which owns the funds.
    * @param _spender address The address which will spend the funds.
    * @return A uint specifying the amount of tokens still available for the spender.
    */
    function allowance(address _owner, address _spender) public constant returns (uint remaining) {
        return allowed[_owner][_spender];
    }
}
/**
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
  event Pause();
  event Unpause();
  bool public paused = false;
  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
    require(!paused);
    _;
  }
  /**
   * @dev Modifier to make a function callable only when the contract is paused.
   */
  modifier whenPaused() {
    require(paused);
    _;
  }
  /**
   * @dev called by the owner to pause, triggers stopped state
   */
  function pause() onlyOwner whenNotPaused public {
    paused = true;
    Pause();
  }
  /**
   * @dev called by the owner to unpause, returns to normal state
   */
  function unpause() onlyOwner whenPaused public {
    paused = false;
    Unpause();
  }
}
contract BlackList is Ownable, BasicToken {
    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded ZCNY) ///////
    function getBlackListStatus(address _maker) external constant returns (bool) {
        return isBlackListed[_maker];
    }
    function getOwner() external constant returns (address) {
        return owner;
    }
    mapping (address => bool) public isBlackListed;
    function addBlackList (address _evilUser) public onlyOwner {
        isBlackListed[_evilUser] = true;
        AddedBlackList(_evilUser);
    }
    function removeBlackList (address _clearedUser) public onlyOwner {
        isBlackListed[_clearedUser] = false;
        RemovedBlackList(_clearedUser);
    }
    function destroyBlackFunds (address _blackListedUser) public onlyOwner {
        require(isBlackListed[_blackListedUser]);
        uint dirtyFunds = balanceOf(_blackListedUser);
        balances[_blackListedUser] = 0;
        _totalSupply -= dirtyFunds;
        DestroyedBlackFunds(_blackListedUser, dirtyFunds);
    }
    event DestroyedBlackFunds(address _blackListedUser, uint _balance);
    event AddedBlackList(address _user);
    event RemovedBlackList(address _user);
}
contract UpgradedStandardToken is StandardToken{
    // those methods are called by the legacy contract
    // and they must ensure msg.sender to be the contract address
    function transferByLegacy(address from, address to, uint value) public;
    function transferFromByLegacy(address sender, address from, address spender, uint value) public;
    function approveByLegacy(address from, address spender, uint value) public;
}
contract ZCNYToken is Pausable, StandardToken, BlackList {
    string public name;
    string public symbol;
    uint public decimals;
    address public upgradedAddress;
    bool public deprecated;
    //  The contract can be initialized with a number of tokens
    //  All the tokens are deposited to the owner address
    //
    // @param _balance Initial supply of the contract
    // @param _name Token Name
    // @param _symbol Token symbol
    // @param _decimals Token decimals
    function ZCNYToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {
        _totalSupply = _initialSupply;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        balances[owner] = _initialSupply;
        deprecated = false;
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function transfer(address _to, uint _value) public whenNotPaused {
        require(!isBlackListed[msg.sender]);
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);
        } else {
            return super.transfer(_to, _value);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {
        require(!isBlackListed[_from]);
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);
        } else {
            return super.transferFrom(_from, _to, _value);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function balanceOf(address who) public constant returns (uint) {
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).balanceOf(who);
        } else {
            return super.balanceOf(who);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);
        } else {
            return super.approve(_spender, _value);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function allowance(address _owner, address _spender) public constant returns (uint remaining) {
        if (deprecated) {
            return StandardToken(upgradedAddress).allowance(_owner, _spender);
        } else {
            return super.allowance(_owner, _spender);
        }
    }
    // deprecate current contract in favour of a new one
    function deprecate(address _upgradedAddress) public onlyOwner {
        deprecated = true;
        upgradedAddress = _upgradedAddress;
        Deprecate(_upgradedAddress);
    }
    // deprecate current contract if favour of a new one
    function totalSupply() public constant returns (uint) {
        if (deprecated) {
            return StandardToken(upgradedAddress).totalSupply();
        } else {
            return _totalSupply;
        }
    }
    // Issue a new amount of tokens
    // these tokens are deposited into the owner address
    //
    // @param _amount Number of tokens to be issued
    function issue(uint amount) public onlyOwner {
        require(_totalSupply + amount > _totalSupply);
        require(balances[owner] + amount > balances[owner]);
        balances[owner] += amount;
        _totalSupply += amount;
        Issue(amount);
    }
    // Redeem tokens.
    // These tokens are withdrawn from the owner address
    // if the balance must be enough to cover the redeem
    // or the call will fail.
    // @param _amount Number of tokens to be issued
    function redeem(uint amount) public onlyOwner {
        require(_totalSupply >= amount);
        require(balances[owner] >= amount);
        _totalSupply -= amount;
        balances[owner] -= amount;
        Redeem(amount);
    }
    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {
        // Ensure transparency by hardcoding limit beyond which fees can never be added
        require(newBasisPoints < 20);
        require(newMaxFee < 50);
        basisPointsRate = newBasisPoints;
        maximumFee = newMaxFee.mul(10**decimals);
        Params(basisPointsRate, maximumFee);
    }
    // Called when new token are issued
    event Issue(uint amount);
    // Called when tokens are redeemed
    event Redeem(uint amount);
    // Called when contract is deprecated
    event Deprecate(address newAddress);
    // Called if contract ever adds fees
    event Params(uint feeBasisPoints, uint maxFee);
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_upgradedAddress","type":"address"}],"name":"deprecate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"deprecated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_evilUser","type":"address"}],"name":"addBlackList","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"upgradedAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maximumFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_maker","type":"address"}],"name":"getBlackListStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newBasisPoints","type":"uint256"},{"name":"newMaxFee","type":"uint256"}],"name":"setParams","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"issue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"redeem","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"basisPointsRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isBlackListed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_clearedUser","type":"address"}],"name":"removeBlackList","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_UINT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_blackListedUser","type":"address"}],"name":"destroyBlackFunds","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_initialSupply","type":"uint256"},{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_decimals","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"Issue","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newAddress","type":"address"}],"name":"Deprecate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"feeBasisPoints","type":"uint256"},{"indexed":false,"name":"maxFee","type":"uint256"}],"name":"Params","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_blackListedUser","type":"address"},{"indexed":false,"name":"_balance","type":"uint256"}],"name":"DestroyedBlackFunds","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_user","type":"address"}],"name":"AddedBlackList","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_user","type":"address"}],"name":"RemovedBlackList","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"}]
Contract_Creation_Code_16:
60606040526000805460a060020a60ff0219168155600381905560045534156200002857600080fd5b604051620017d3380380620017d3833981016040528080519190602001805182019190602001805182019190602001805160008054600160a060020a03191633600160a060020a0316179055600186905591506007905083805162000092929160200190620000dd565b506008828051620000a8929160200190620000dd565b50600955505060008054600160a060020a0316815260026020526040902055600a805460a060020a60ff021916905562000182565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012057805160ff191683800117855562000150565b8280016001018555821562000150579182015b828111156200015057825182559160200191906001019062000133565b506200015e92915062000162565b5090565b6200017f91905b808211156200015e576000815560010162000169565b90565b61164180620001926000396000f3006060604052361561017a5763ffffffff60e060020a60003504166306fdde03811461017f5780630753c30c14610209578063095ea7b31461022a5780630e136b191461024c5780630ecb93c01461027357806318160ddd1461029257806323b872dd146102b757806326976e3f146102df57806327e235e31461030e578063313ce5671461032d57806335390714146103405780633eaaf86b146103535780633f4ba83a1461036657806359bf1abe146103795780635c658165146103985780635c975abb146103bd57806370a08231146103d05780638456cb59146103ef578063893d20e8146104025780638da5cb5b1461041557806395d89b4114610428578063a9059cbb1461043b578063c0324c771461045d578063cc872b6614610476578063db006a751461048c578063dd62ed3e146104a2578063dd644f72146104c7578063e47d6060146104da578063e4997dc5146104f9578063e5b5019a14610518578063f2fde38b1461052b578063f3bdc2281461054a575b600080fd5b341561018a57600080fd5b610192610569565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ce5780820151838201526020016101b6565b50505050905090810190601f1680156101fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021457600080fd5b610228600160a060020a0360043516610607565b005b341561023557600080fd5b610228600160a060020a03600435166024356106aa565b341561025757600080fd5b61025f610757565b604051901515815260200160405180910390f35b341561027e57600080fd5b610228600160a060020a0360043516610767565b341561029d57600080fd5b6102a56107e7565b60405190815260200160405180910390f35b34156102c257600080fd5b610228600160a060020a036004358116906024351660443561086e565b34156102ea57600080fd5b6102f2610932565b604051600160a060020a03909116815260200160405180910390f35b341561031957600080fd5b6102a5600160a060020a0360043516610941565b341561033857600080fd5b6102a5610953565b341561034b57600080fd5b6102a5610959565b341561035e57600080fd5b6102a561095f565b341561037157600080fd5b610228610965565b341561038457600080fd5b61025f600160a060020a03600435166109e4565b34156103a357600080fd5b6102a5600160a060020a0360043581169060243516610a06565b34156103c857600080fd5b61025f610a23565b34156103db57600080fd5b6102a5600160a060020a0360043516610a33565b34156103fa57600080fd5b610228610ad3565b341561040d57600080fd5b6102f2610b57565b341561042057600080fd5b6102f2610b66565b341561043357600080fd5b610192610b75565b341561044657600080fd5b610228600160a060020a0360043516602435610be0565b341561046857600080fd5b610228600435602435610cb9565b341561048157600080fd5b610228600435610d4f565b341561049757600080fd5b610228600435610dfe565b34156104ad57600080fd5b6102a5600160a060020a0360043581169060243516610eaf565b34156104d257600080fd5b6102a5610f5a565b34156104e557600080fd5b61025f600160a060020a0360043516610f60565b341561050457600080fd5b610228600160a060020a0360043516610f75565b341561052357600080fd5b6102a5610ff2565b341561053657600080fd5b610228600160a060020a0360043516610ff8565b341561055557600080fd5b610228600160a060020a036004351661104e565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b505050505081565b60005433600160a060020a0390811691161461062257600080fd5b600a805460a060020a74ff0000000000000000000000000000000000000000199091161773ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790557fcc358699805e9a8b7f77b522628c7cb9abd07d9efb86b6fb616af1609036a99e81604051600160a060020a03909116815260200160405180910390a150565b604060443610156106ba57600080fd5b600a5460a060020a900460ff161561074857600a54600160a060020a031663aee92d3333858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561072f57600080fd5b6102c65a03f1151561074057600080fd5b505050610752565b610752838361110c565b505050565b600a5460a060020a900460ff1681565b60005433600160a060020a0390811691161461078257600080fd5b600160a060020a03811660009081526006602052604090819020805460ff191660011790557f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc90829051600160a060020a03909116815260200160405180910390a150565b600a5460009060a060020a900460ff161561086657600a54600160a060020a03166318160ddd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561084457600080fd5b6102c65a03f1151561085557600080fd5b50505060405180519050905061086b565b506001545b90565b60005460a060020a900460ff161561088557600080fd5b600160a060020a03831660009081526006602052604090205460ff16156108ab57600080fd5b600a5460a060020a900460ff161561092757600a54600160a060020a0316638b477adb3385858560405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401600060405180830381600087803b151561072f57600080fd5b6107528383836111be565b600a54600160a060020a031681565b60026020526000908152604090205481565b60095481565b60045481565b60015481565b60005433600160a060020a0390811691161461098057600080fd5b60005460a060020a900460ff16151561099857600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600160a060020a03811660009081526006602052604090205460ff165b919050565b600560209081526000928352604080842090915290825290205481565b60005460a060020a900460ff1681565b600a5460009060a060020a900460ff1615610ac357600a54600160a060020a03166370a082318360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610aa157600080fd5b6102c65a03f11515610ab257600080fd5b505050604051805190509050610a01565b610acc826113bd565b9050610a01565b60005433600160a060020a03908116911614610aee57600080fd5b60005460a060020a900460ff1615610b0557600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031690565b600054600160a060020a031681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ff5780601f106105d4576101008083540402835291602001916105ff565b60005460a060020a900460ff1615610bf757600080fd5b600160a060020a03331660009081526006602052604090205460ff1615610c1d57600080fd5b600a5460a060020a900460ff1615610cab57600a54600160a060020a0316636e18980a33848460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610c9257600080fd5b6102c65a03f11515610ca357600080fd5b505050610cb5565b610cb582826113d8565b5050565b60005433600160a060020a03908116911614610cd457600080fd5b60148210610ce157600080fd5b60328110610cee57600080fd5b6003829055600954610d0a908290600a0a63ffffffff61155c16565b60048190556003547fb044a1e409eac5c48e5af22d4af52670dd1a99059537a78b31b48c6500a6354e9160405191825260208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610d6a57600080fd5b60015481810111610d7a57600080fd5b60008054600160a060020a031681526002602052604090205481810111610da057600080fd5b60008054600160a060020a03168152600260205260409081902080548301905560018054830190557fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a9082905190815260200160405180910390a150565b60005433600160a060020a03908116911614610e1957600080fd5b60015481901015610e2957600080fd5b60008054600160a060020a031681526002602052604090205481901015610e4f57600080fd5b60018054829003905560008054600160a060020a031681526002602052604090819020805483900390557f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a449082905190815260200160405180910390a150565b600a5460009060a060020a900460ff1615610f4757600a54600160a060020a031663dd62ed3e848460006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610f2557600080fd5b6102c65a03f11515610f3657600080fd5b505050604051805190509050610f54565b610f518383611592565b90505b92915050565b60035481565b60066020526000908152604090205460ff1681565b60005433600160a060020a03908116911614610f9057600080fd5b600160a060020a03811660009081526006602052604090819020805460ff191690557fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c90829051600160a060020a03909116815260200160405180910390a150565b60001981565b60005433600160a060020a0390811691161461101357600080fd5b600160a060020a0381161561104b576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6000805433600160a060020a0390811691161461106a57600080fd5b600160a060020a03821660009081526006602052604090205460ff16151561109157600080fd5b61109a82610a33565b600160a060020a038316600090815260026020526040808220919091556001805483900390559091507f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c6908390839051600160a060020a03909216825260208201526040908101905180910390a15050565b6040604436101561111c57600080fd5b811580159061114f5750600160a060020a0333811660009081526005602090815260408083209387168352929052205415155b1561115957600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a3505050565b60008080606060643610156111d257600080fd5b600160a060020a0380881660009081526005602090815260408083203390941683529290522054600354909450611224906127109061121890889063ffffffff61155c16565b9063ffffffff6115bd16565b92506004548311156112365760045492505b60001984101561127857611250848663ffffffff6115d416565b600160a060020a03808916600090815260056020908152604080832033909416835292905220555b611288858463ffffffff6115d416565b600160a060020a0388166000908152600260205260409020549092506112b4908663ffffffff6115d416565b600160a060020a0380891660009081526002602052604080822093909355908816815220546112e9908363ffffffff6115e616565b600160a060020a03871660009081526002602052604081209190915583111561137f5760008054600160a060020a0316815260026020526040902054611335908463ffffffff6115e616565b60008054600160a060020a03908116825260026020526040808320939093559054811691908916906000805160206115f68339815191529086905190815260200160405180910390a35b85600160a060020a031687600160a060020a03166000805160206115f68339815191528460405190815260200160405180910390a350505050505050565b600160a060020a031660009081526002602052604090205490565b600080604060443610156113eb57600080fd5b6114066127106112186003548761155c90919063ffffffff16565b92506004548311156114185760045492505b611428848463ffffffff6115d416565b600160a060020a033316600090815260026020526040902054909250611454908563ffffffff6115d416565b600160a060020a033381166000908152600260205260408082209390935590871681522054611489908363ffffffff6115e616565b600160a060020a0386166000908152600260205260408120919091558311156115205760008054600160a060020a03168152600260205260409020546114d5908463ffffffff6115e616565b60008054600160a060020a0390811682526002602052604080832093909355905481169133909116906000805160206115f68339815191529086905190815260200160405180910390a35b84600160a060020a031633600160a060020a03166000805160206115f68339815191528460405190815260200160405180910390a35050505050565b60008083151561156f576000915061158b565b5082820282848281151561157f57fe5b041461158757fe5b8091505b5092915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60008082848115156115cb57fe5b04949350505050565b6000828211156115e057fe5b50900390565b60008282018381101561158757fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582052a882978178dc93b7962539c96e9eb48a6c94b1f444d82f64b0873a034267180029
Contract_Creation_Code_ARM:



Contract Adress: 0x66b3487cf43c6661d590c534187e1c2bb6e61d6e
Contract Name: Goex
Contract_Source_Code: 
pragma solidity ^0.4.24;
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}
contract ERC20 is IERC20 {
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowed;
    uint256 private _totalSupply;
    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }
    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * Beware that changing an allowance with this method brings the risk that someone may use both the old
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    /**
     * @dev Transfer tokens from one address to another.
     * Note that while this function emits an Approval event, this is not required as per the specification,
     * and other compliant implementations may not emit the event.
     * @param from address The address which you want to send tokens from
     * @param to address The address which you want to transfer to
     * @param value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        emit Approval(from, msg.sender, _allowed[from][msg.sender]);
        return true;
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * Emits an Approval event.
     * @param spender The address which will spend the funds.
     * @param addedValue The amount of tokens to increase the allowance by.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
     * @dev Decrease the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To decrement
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * Emits an Approval event.
     * @param spender The address which will spend the funds.
     * @param subtractedValue The amount of tokens to decrease the allowance by.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
    * @dev Transfer token for a specified addresses
    * @param from The address to transfer from.
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
    /**
     * @dev Internal function that mints an amount of the token and assigns it to
     * an account. This encapsulates the modification of balances such that the
     * proper events are emitted.
     * @param account The account that will receive the created tokens.
     * @param value The amount that will be created.
     */
    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }
    /**
     * @dev Internal function that burns an amount of the token of a given
     * account.
     * @param account The account whose tokens will be burnt.
     * @param value The amount that will be burnt.
     */
    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }
    /**
     * @dev Internal function that burns an amount of the token of a given
     * account, deducting from the sender's allowance for said account. Uses the
     * internal burn function.
     * Emits an Approval event (reflecting the reduced allowance).
     * @param account The account whose tokens will be burnt.
     * @param value The amount that will be burnt.
     */
    function _burnFrom(address account, uint256 value) internal {
        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
        _burn(account, value);
        emit Approval(account, msg.sender, _allowed[account][msg.sender]);
    }
}
library Roles {
    struct Role {
        mapping (address => bool) bearer;
    }
    /**
     * @dev give an account access to this role
     */
    function add(Role storage role, address account) internal {
        require(account != address(0));
        require(!has(role, account));
        role.bearer[account] = true;
    }
    /**
     * @dev remove an account's access to this role
     */
    function remove(Role storage role, address account) internal {
        require(account != address(0));
        require(has(role, account));
        role.bearer[account] = false;
    }
    /**
     * @dev check if an account has this role
     * @return bool
     */
    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0));
        return role.bearer[account];
    }
}
contract MinterRole {
    using Roles for Roles.Role;
    event MinterAdded(address indexed account);
    event MinterRemoved(address indexed account);
    Roles.Role private _minters;
    constructor () internal {
        _addMinter(msg.sender);
    }
    modifier onlyMinter() {
        require(isMinter(msg.sender));
        _;
    }
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }
    function _addMinter(address account) internal {
        _minters.add(account);
        emit MinterAdded(account);
    }
    function _removeMinter(address account) internal {
        _minters.remove(account);
        emit MinterRemoved(account);
    }
}
contract ERC20Mintable is ERC20, MinterRole {
    /**
     * @dev Function to mint tokens
     * @param to The address that will receive the minted tokens.
     * @param value The amount of tokens to mint.
     * @return A boolean that indicates if the operation was successful.
     */
    function mint(address to, uint256 value) public onlyMinter returns (bool) {
        _mint(to, value);
        return true;
    }
}
contract ERC20Burnable is ERC20 {
    /**
     * @dev Burns a specific amount of tokens.
     * @param value The amount of token to be burned.
     */
    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }
    /**
     * @dev Burns a specific amount of tokens from the target address and decrements allowance
     * @param from address The address which you want to send tokens from
     * @param value uint256 The amount of token to be burned
     */
    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }
}
contract Goex is ERC20Mintable, ERC20Burnable {
  string public name = "Goex";
  string public symbol = "Goex";
  uint public decimals = 8;
  /**
   * @dev Constructor that gives msg.sender all of existing tokens.
   */
  constructor() public {
  }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"value","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280600481526020017f476f657800000000000000000000000000000000000000000000000000000000815250600490805190602001906200005192919062000295565b506040805190810160405280600481526020017f476f657800000000000000000000000000000000000000000000000000000000815250600590805190602001906200009f92919062000295565b506008600655348015620000b257600080fd5b50620000cd33620000d3640100000000026401000000009004565b62000344565b620000f78160036200013d6401000000000262001945179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200017a57600080fd5b62000195828262000200640100000000026401000000009004565b151515620001a257600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200023e57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d857805160ff191683800117855562000309565b8280016001018555821562000309579182015b8281111562000308578251825591602001919060010190620002eb565b5b5090506200031891906200031c565b5090565b6200034191905b808211156200033d57600081600090555060010162000323565b5090565b90565b611ad080620003546000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018657806318160ddd146101eb57806323b872dd14610216578063313ce5671461029b57806339509351146102c657806340c10f191461032b57806342966c681461039057806370a08231146103bd57806379cc67901461041457806395d89b4114610461578063983b2d56146104f15780639865027514610534578063a457c2d71461054b578063a9059cbb146105b0578063aa271e1a14610615578063dd62ed3e14610670575b600080fd5b34801561010257600080fd5b5061010b6106e7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014b578082015181840152602081019050610130565b50505050905090810190601f1680156101785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019257600080fd5b506101d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610785565b604051808215151515815260200191505060405180910390f35b3480156101f757600080fd5b506102006108b2565b6040518082815260200191505060405180910390f35b34801561022257600080fd5b50610281600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108bc565b604051808215151515815260200191505060405180910390f35b3480156102a757600080fd5b506102b0610ac4565b6040518082815260200191505060405180910390f35b3480156102d257600080fd5b50610311600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aca565b604051808215151515815260200191505060405180910390f35b34801561033757600080fd5b50610376600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d01565b604051808215151515815260200191505060405180910390f35b34801561039c57600080fd5b506103bb60048036038101908080359060200190929190505050610d2b565b005b3480156103c957600080fd5b506103fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d38565b6040518082815260200191505060405180910390f35b34801561042057600080fd5b5061045f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d80565b005b34801561046d57600080fd5b50610476610d8e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104b657808201518184015260208101905061049b565b50505050905090810190601f1680156104e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104fd57600080fd5b50610532600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e2c565b005b34801561054057600080fd5b50610549610e4c565b005b34801561055757600080fd5b50610596600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e57565b604051808215151515815260200191505060405180910390f35b3480156105bc57600080fd5b506105fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061108e565b604051808215151515815260200191505060405180910390f35b34801561062157600080fd5b50610656600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a5565b604051808215151515815260200191505060405180910390f35b34801561067c57600080fd5b506106d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110c2565b6040518082815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561077d5780601f106107525761010080835404028352916020019161077d565b820191906000526020600020905b81548152906001019060200180831161076057829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107c257600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b600061094d82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109d884848461116a565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b60065481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b0757600080fd5b610b9682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610d0c336110a5565b1515610d1757600080fd5b610d218383611357565b6001905092915050565b610d3533826114ab565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d8a82826115ff565b5050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b505050505081565b610e35336110a5565b1515610e4057600080fd5b610e49816117fd565b50565b610e5533611857565b565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e9457600080fd5b610f2382600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600061109b33848461116a565b6001905092915050565b60006110bb8260036118b190919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008083831115151561115b57600080fd5b82840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111a657600080fd5b6111f7816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061128a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561134d57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561139357600080fd5b6113a88160025461133690919063ffffffff16565b6002819055506113ff816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156114e757600080fd5b6114fc8160025461114990919063ffffffff16565b600281905550611553816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b61168e81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061171882826114ab565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b61181181600361194590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61186b8160036119f590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156118ee57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561198157600080fd5b61198b82826118b1565b15151561199757600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a3157600080fd5b611a3b82826118b1565b1515611a4657600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a72305820305cb0ce3134f642feefed2e655816a4a22a87190ec497cd6eabcde85ae894f70029
Contract_Creation_Code_ARM:



Contract Adress: 0xdfeae09d170ca8169991e9cf678b67cb572cb954
Contract Name: opterium
Contract_Source_Code: 
pragma solidity ^0.4.25;
contract opterium {
    /*
 *   See: http://opterium.ru/
 * 
 *   No one can change this smart contract, including the community creators.  
 *   The profit is : (interest is accrued continuously).
 * Up to 100  ETH = 1.0 % in 36 hours of your invested amount
 * From 100   ETH = 1.5 % in 36 hours *
 * From 200   ETH = 1.8 % in 36 hours *
 * From 500   ETH = 2.0 % in 36 hours *
 * From 1000  ETH = 1.6 % in 36 hours *
 * From 3000  ETH = 1.4 % in 36 hours *
 * From 5000  ETH = 1.2 % in 36 hours *
 * From 7000  ETH = 1.0 % in 36 hours *
 * From 10000 ETH = 2.5 % in 36 hours *
 *   Minimum deposit is 0.011 ETH.
 *
 *  How to make a deposit:
 *   Send cryptocurrency from ETH wallet (at least 0.011 ETH) to the address
 *   of the smart contract - opterium
 *   It is not allowed to make transfers from cryptocurrency exchanges.
 *   Only personal ETH wallet with private keys is allowed.
 * 
 *   Recommended limits are 200000 ETH, check the current ETH rate at
 *   the following link: https://ethgasstation.info/
 * 
 * How to get paid:
 *   Request your profit by sending 0 ETH to the address of the smart contract.
 *
  */  
    mapping (address => uint256) public invested;
    mapping (address => uint256) public atBlock;
    address techSupport = 0x720497fce7D8f7D7B89FB27E5Ae48b7DA884f582;
    uint techSupportPercent = 2;
    address defaultReferrer = 0x720497fce7D8f7D7B89FB27E5Ae48b7DA884f582;
    uint refPercent = 2;
    uint refBack = 2;
    function calculateProfitPercent(uint bal) private pure returns (uint) {
        if (bal >= 1e22) {
            return 25;
        }
        if (bal >= 7e21) {
            return 10;
        }
        if (bal >= 5e21) {
            return 12;
        }
        if (bal >= 3e21) {
            return 14;
        }
        if (bal >= 1e21) {
            return 16;
        }
        if (bal >= 5e20) {
            return 20;
        }
        if (bal >= 2e20) {
            return 18;
        }
        if (bal >= 1e20) {
            return 15;
        } else {
            return 10;
        }
    }
    function transferDefaultPercentsOfInvested(uint value) private {
        techSupport.transfer(value * techSupportPercent / 100);
    }
    function bytesToAddress(bytes bys) private pure returns (address addr) {
        assembly {
            addr := mload(add(bys, 20))
        }
    }
    function transferRefPercents(uint value, address sender) private {
        if (msg.data.length != 0) {
            address referrer = bytesToAddress(msg.data);
            if(referrer != sender) {
                sender.transfer(value * refBack / 100);
                referrer.transfer(value * refPercent / 100);
            } else {
                defaultReferrer.transfer(value * refPercent / 100);
            }
        } else {
            defaultReferrer.transfer(value * refPercent / 100);
        }
    }
    function () external payable {
        if (invested[msg.sender] != 0) {
            uint thisBalance = address(this).balance;
            uint amount = invested[msg.sender] * calculateProfitPercent(thisBalance) / 1000 * (block.number - atBlock[msg.sender]) / 9150;
            address sender = msg.sender;
            sender.transfer(amount);
        }
        if (msg.value > 0) {
            transferDefaultPercentsOfInvested(msg.value);
            transferRefPercents(msg.value, msg.sender);
        }
        atBlock[msg.sender] = block.number;
        invested[msg.sender] += (msg.value);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"invested","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"atBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
60806040526002805473720497fce7d8f7d7b89fb27e5ae48b7da884f582600160a060020a031991821681178355600383905560048054909216179055600581905560065534801561005057600080fd5b5061046f806100606000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166366b3f6bf81146101285780638aac13621461015b575b3360009081526020819052604081205481908190156100e65733600090815260016020526040902054303193506123be9043036103e861008a8661017c565b33600090815260208190526040902054028115156100a457fe5b04028115156100af57fe5b6040519190049250339150819083156108fc029084906000818181858888f193505050501580156100e4573d6000803e3d6000fd5b505b6000341115610102576100f83461024a565b6101023433610292565b505033600090815260016020908152604080832043905590829052902080543401905550005b34801561013457600080fd5b50610149600160a060020a0360043516610418565b60408051918252519081900360200190f35b34801561016757600080fd5b50610149600160a060020a036004351661042a565b600069021e19e0c9bab2400000821061019757506019610245565b69017b7883c0691660000082106101b05750600a610245565b69010f0cf064dd5920000082106101c95750600c610245565b68a2a15d09519be0000082106101e15750600e610245565b683635c9adc5dea0000082106101f957506010610245565b681b1ae4d6e2ef500000821061021157506014610245565b680ad78ebc5ac6200000821061022957506012610245565b68056bc75e2d6310000082106102415750600f610245565b50600a5b919050565b600254600354604051600160a060020a039092169160649184029190910480156108fc02916000818181858888f1935050505015801561028e573d6000803e3d6000fd5b5050565b600036156103cd576102d46000368080601f0160208091040260200160405190810160405280939291908181526020018383808284375061043c945050505050565b9050600160a060020a03808216908316146103825781600160a060020a03166108fc6064600654860281151561030657fe5b049081150290604051600060405180830381858888f19350505050158015610332573d6000803e3d6000fd5b5080600160a060020a03166108fc6064600554860281151561035057fe5b049081150290604051600060405180830381858888f1935050505015801561037c573d6000803e3d6000fd5b506103c8565b600454600554604051600160a060020a039092169160649186029190910480156108fc02916000818181858888f193505050501580156103c6573d6000803e3d6000fd5b505b610413565b600454600554604051600160a060020a039092169160649186029190910480156108fc02916000818181858888f19350505050158015610411573d6000803e3d6000fd5b505b505050565b60006020819052908152604090205481565b60016020526000908152604090205481565b60140151905600a165627a7a7230582058da05d2d2e7fb260f570bcf72db74343be624f621f74b194068ec055539f1010029
Contract_Creation_Code_ARM:



Contract Adress: 0xc84227fc4ccd9f9b5478825fce284eb8cef47fca
Contract Name: Moontrex
Contract_Source_Code: 
contract Moontrex {
    /* Public variables of the token */
    string public standard = 'Token 0.1';
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public initialSupply;
    uint256 public totalSupply;
    /* This creates an array with all balances */
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    /* Initializes contract with initial supply tokens to the creator of the contract */
    function Moontrex() {
         initialSupply = 1100000000000000000000000;
        name ="Moontrex";
        decimals = 16;
        symbol = "MOX";
        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens
        totalSupply = initialSupply;                        // Update total supply
    }
    /* Send coins */
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
        balanceOf[msg.sender] -= _value;                     // Subtract from the sender
        balanceOf[_to] += _value;                            // Add the same to the recipient
    }
    /* This unnamed function is called whenever someone tries to send ether to it */
    function () {
        throw;     // Prevents accidental sending of ether
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"initialSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"standard","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}]
Contract_Creation_Code_16:
60606040526040805190810160405280600981526020017f546f6b656e20302e3100000000000000000000000000000000000000000000008152506000908051906020019061004f929190610174565b50341561005b57600080fd5b69e8ef1e96ae38978000006004819055506040805190810160405280600881526020017f4d6f6f6e74726578000000000000000000000000000000000000000000000000815250600190805190602001906100b7929190610174565b506010600360006101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f4d4f5800000000000000000000000000000000000000000000000000000000008152506002908051906020019061011f929190610174565b50600454600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600581905550610219565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101b557805160ff19168380011785556101e3565b828001600101855582156101e3579182015b828111156101e25782518255916020019190600101906101c7565b5b5090506101f091906101f4565b5090565b61021691905b808211156102125760008160009055506001016101fa565b5090565b90565b6107a8806102286000396000f300606060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a957806318160ddd14610137578063313ce56714610160578063378dc3dc1461018f5780635a3b7e42146101b857806370a082311461024657806395d89b4114610293578063a9059cbb14610321578063dd62ed3e14610363575b34156100a457600080fd5b600080fd5b34156100b457600080fd5b6100bc6103cf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fc5780820151818401526020810190506100e1565b50505050905090810190601f1680156101295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014257600080fd5b61014a61046d565b6040518082815260200191505060405180910390f35b341561016b57600080fd5b610173610473565b604051808260ff1660ff16815260200191505060405180910390f35b341561019a57600080fd5b6101a2610486565b6040518082815260200191505060405180910390f35b34156101c357600080fd5b6101cb61048c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020b5780820151818401526020810190506101f0565b50505050905090810190601f1680156102385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025157600080fd5b61027d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061052a565b6040518082815260200191505060405180910390f35b341561029e57600080fd5b6102a6610542565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e65780820151818401526020810190506102cb565b50505050905090810190601f1680156103135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032c57600080fd5b610361600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105e0565b005b341561036e57600080fd5b6103b9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610757565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104655780601f1061043a57610100808354040283529160200191610465565b820191906000526020600020905b81548152906001019060200180831161044857829003601f168201915b505050505081565b60055481565b600360009054906101000a900460ff1681565b60045481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b505050505081565b60066020528060005260406000206000915090505481565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105d85780601f106105ad576101008083540402835291602001916105d8565b820191906000526020600020905b8154815290600101906020018083116105bb57829003601f168201915b505050505081565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561062c57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156106b957600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b60076020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820a475d80e5620a374260ad689cd05ed821979bd85a01f56efaf4f0cfdf9b03a720029
Contract_Creation_Code_ARM:



Contract Adress: 0x766f824e31cd8624976d0e01ac8bf7faefd772f7
Contract Name: TreasureToken
Contract_Source_Code: 
pragma solidity ^0.4.24;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public{
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) balances;
  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) allowed;
  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    uint256 _allowance = allowed[_from][msg.sender];
    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
    // require (_value <= _allowance);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }
  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }
  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval (address _spender, uint _addedValue) public
    returns (bool success)  {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  function decreaseApproval (address _spender, uint _subtractedValue) public
    returns (bool success) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
contract TreasureToken is StandardToken  {
    string public constant name = "Treasure Token";
    string public constant symbol = "TST";
    uint public constant decimals = 8;
    // there is no problem in using * here instead of .mul()
    uint256 public constant initialSupply = 10000000000 * (10 ** uint256(decimals));
    // Constructors
    constructor() public {
        totalSupply = initialSupply;
        balances[msg.sender] = initialSupply; // Send all tokens to owner
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"initialSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b506008600a0a6402540be400026000819055506008600a0a6402540be40002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611147806100816000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101b457806323b872dd146101df578063313ce56714610264578063378dc3dc1461028f57806366188463146102ba57806370a082311461031f57806395d89b4114610376578063a9059cbb14610406578063d73dd6231461046b578063dd62ed3e146104d0575b600080fd5b3480156100cb57600080fd5b506100d4610547565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101145780820151818401526020810190506100f9565b50505050905090810190601f1680156101415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015b57600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610580565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c9610672565b6040518082815260200191505060405180910390f35b3480156101eb57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610678565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b50610279610964565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610969565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610305600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610978565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b50610360600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c09565b6040518082815260200191505060405180910390f35b34801561038257600080fd5b5061038b610c52565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103cb5780820151818401526020810190506103b0565b50505050905090810190601f1680156103f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041257600080fd5b50610451600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c8b565b604051808215151515815260200191505060405180910390f35b34801561047757600080fd5b506104b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e61565b604051808215151515815260200191505060405180910390f35b3480156104dc57600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061105d565b6040518082815260200191505060405180910390f35b6040805190810160405280600e81526020017f547265617375726520546f6b656e00000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156106b757600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061078883600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110e490919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061081d83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110fd90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061087383826110e490919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600881565b6008600a0a6402540be4000281565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610a89576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b1d565b610a9c83826110e490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f545354000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610cc857600080fd5b610d1a82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110e490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610daf82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110fd90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000610ef282600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110fd90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156110f257fe5b818303905092915050565b600080828401905083811015151561111157fe5b80915050929150505600a165627a7a723058205a52bc215bc3028e72d81805412aa457c3bc2bbb2e51fac418bb8465d10fa0070029
Contract_Creation_Code_ARM:



Contract Adress: 0xb329faf7d7eeeb484030f3309e0a9b913e90abb3
Contract Name: CustomToken
Contract_Source_Code: 
pragma solidity ^0.4.19;
contract BaseToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
        Transfer(_from, _to, _value);
    }
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
}
contract CustomToken is BaseToken {
    function CustomToken() public {
        totalSupply = 1500000000000000000000000000;
        name = 'Budweiser';
        symbol = 'BWSR';
        decimals = 18;
        balanceOf[0x9A83EBbA7068fa46A67AD710651a0bB1B9441280] = totalSupply;
        Transfer(address(0), 0x9A83EBbA7068fa46A67AD710651a0bB1B9441280, totalSupply);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b506b04d8c55aefb8c05b5c0000006003819055506040805190810160405280600981526020017f42756477656973657200000000000000000000000000000000000000000000008152506000908051906020019061006f9291906101b3565b506040805190810160405280600481526020017f4257535200000000000000000000000000000000000000000000000000000000815250600190805190602001906100bb9291906101b3565b506012600260006101000a81548160ff021916908360ff16021790555060035460046000739a83ebba7068fa46a67ad710651a0bb1b944128073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550739a83ebba7068fa46a67ad710651a0bb1b944128073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6003546040518082815260200191505060405180910390a3610258565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f457805160ff1916838001178555610222565b82800160010185558215610222579182015b82811115610221578251825591602001919060010190610206565b5b50905061022f9190610233565b5090565b61025591905b80821115610251576000816000905550600101610239565b5090565b90565b610b41806102676000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e578063095ea7b31461012e57806318160ddd1461019357806323b872dd146101be578063313ce5671461024357806370a082311461027457806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e146103c0575b600080fd5b3480156100aa57600080fd5b506100b3610437565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610179600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104d5565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a86105c7565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b50610229600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105cd565b604051808215151515815260200191505060405180910390f35b34801561024f57600080fd5b506102586106fa565b604051808260ff1660ff16815260200191505060405180910390f35b34801561028057600080fd5b506102b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061070d565b6040518082815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610725565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610320578082015181840152602081019050610305565b50505050905090810190601f16801561034d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036757600080fd5b506103a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107c3565b604051808215151515815260200191505060405180910390f35b3480156103cc57600080fd5b50610421600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107da565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561065a57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506106ef8484846107ff565b600190509392505050565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107bb5780601f10610790576101008083540402835291602001916107bb565b820191906000526020600020905b81548152906001019060200180831161079e57829003601f168201915b505050505081565b60006107d03384846107ff565b6001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561082657600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561087457600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561090257600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610aaa57fe5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050505600a165627a7a723058209dc731c14f90a365596ea877c37bac0b86a2e771f4a48c095d0db4807e90d1810029
Contract_Creation_Code_ARM:



Contract Adress: 0x5d24041b851a001d33dd9019b1da2663b6dcae9d
Contract Name: EPWR
Contract_Source_Code: 
pragma solidity ^0.4.19;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
contract Owned {
	address private Owner;
	function Owned() public{
	    Owner = msg.sender;
	}
	function IsOwner(address addr) view public returns(bool)
	{
	    return Owner == addr;
	}
	function TransferOwner(address newOwner) public onlyOwner
	{
	    Owner = newOwner;
	}
	function Terminate() public onlyOwner
	{
	    selfdestruct(Owner);
	}
	modifier onlyOwner(){
        require(msg.sender == Owner);
        _;
    }
}
contract EPWR is Owned {
    using SafeMath for uint256;
    string public constant name = "ETHEREUM POWER";
    string public constant symbol = "EPWR";
    uint256 public constant decimals = 18;  // 18 is the most common number of decimal places
    bool private tradeable;
    uint256 private currentSupply;
    mapping(address => uint256) private balances;
    mapping(address => mapping(address=> uint256)) private allowed;
    mapping(address => bool) private lockedAccounts;  
	/*
		Incoming Ether
	*/	
    event ReceivedEth(address indexed _from, uint256 _value);
	//this is the fallback
	function () payable public {
		emit ReceivedEth(msg.sender, msg.value);		
	}
	event TransferredEth(address indexed _to, uint256 _value);
	function FoundationTransfer(address _to, uint256 amtEth, uint256 amtToken) public onlyOwner
	{
		require(address(this).balance >= amtEth && balances[this] >= amtToken );
		if(amtEth >0)
		{
			_to.transfer(amtEth);
			emit TransferredEth(_to, amtEth);
		}
		if(amtToken > 0)
		{
			require(balances[_to] + amtToken > balances[_to]);
			balances[this] -= amtToken;
			balances[_to] += amtToken;
			emit Transfer(this, _to, amtToken);
		}
	}	
	/*
		End Incoming Ether
	*/
    function EPWR( ) public
    {
        uint256 initialTotalSupply = 500000000;
        balances[this] = initialTotalSupply * (10**decimals);
        currentSupply =  initialTotalSupply * (10**decimals);
	    emit Transfer(address(0), this, currentSupply);
    }
	uint256 constant startTime = 1525132800; // Date.UTC(2018, 4, 1) as seconds
	uint256 constant startAmt = 95000000;
	uint256 _lastDayPaid = 0;
	uint256 _currentMonth = 0;
	uint256 factor = 10000000;
    event DayMinted(uint256 day,uint256 val, uint256 now);
    function DailyMint() public {
        uint256 day = (now-startTime)/(60*60*24);
        require(startTime <= now);
        require(day >= _lastDayPaid);
        uint256 month = _lastDayPaid/30;
        if(month > _currentMonth){
            _currentMonth += 1;
            factor = (factor * 99)/100;
        }
        uint256 todaysPayout = (((factor * startAmt )/10000000)/30)* (10**decimals);
        balances[this] +=todaysPayout;
        currentSupply += todaysPayout;
        emit Transfer(address(0), this, todaysPayout);
        emit DayMinted(_lastDayPaid, todaysPayout, now);
        _lastDayPaid+=1;
    }
    function lastDayPaid() public view returns(uint256){
        return _lastDayPaid;
    }
	function MintToken(uint256 amt) public onlyOwner {
	    currentSupply += amt;
	    balances[this] += amt;
	    emit Transfer(address(0), this, amt);
	}
	function DestroyToken(uint256 amt) public onlyOwner {
	    require ( balances[this] >= amt);
	    currentSupply -= amt;
	    balances[this] -= amt;
	    emit Transfer(this,address(0), amt);
	}
    event SoldToken(address _buyer, uint256 _value, string note);
    function BuyToken(address _buyer, uint256 _value, string note) public onlyOwner
    {
		require(balances[this] >= _value && balances[_buyer] + _value > balances[_buyer]);
        emit SoldToken( _buyer,  _value,  note);
        balances[this] -= _value;
        balances[_buyer] += _value;
        emit Transfer(this, _buyer, _value);
    }
    function LockAccount(address toLock) public onlyOwner
    {
        lockedAccounts[toLock] = true;
    }
    function UnlockAccount(address toUnlock) public onlyOwner
    {
        delete lockedAccounts[toUnlock];
    }
    function SetTradeable(bool t) public onlyOwner
    {
        tradeable = t;
    }
    function IsTradeable() public view returns(bool)
    {
        return tradeable;
    }
    function totalSupply() constant public returns (uint256)
    {
        return currentSupply;
    }
    function balanceOf(address _owner) constant public returns (uint256 balance)
    {
        return balances[_owner];
    }
    function transfer(address _to, uint256 _value) public notLocked returns (bool success) {
        require(tradeable);
         if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
             emit Transfer( msg.sender, _to,  _value);
             balances[msg.sender] -= _value;
             balances[_to] += _value;
             return true;
         } else {
             return false;
         }
     }
    function transferFrom(address _from, address _to, uint _value)public notLocked returns (bool success) {
        require(!lockedAccounts[_from] && !lockedAccounts[_to]);
		require(tradeable);
        if (balances[_from] >= _value
            && allowed[_from][msg.sender] >= _value
            && balances[_to] + _value > balances[_to]) {
            emit Transfer( _from, _to,  _value);
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            balances[_to] += _value;
            return true;
        } else {
            return false;
        }
    }
     /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }
  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
   modifier notLocked(){
       require (!lockedAccounts[msg.sender]);
       _;
   }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"amt","type":"uint256"}],"name":"MintToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"amtEth","type":"uint256"},{"name":"amtToken","type":"uint256"}],"name":"FoundationTransfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"toLock","type":"address"}],"name":"LockAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_buyer","type":"address"},{"name":"_value","type":"uint256"},{"name":"note","type":"string"}],"name":"BuyToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amt","type":"uint256"}],"name":"DestroyToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"TransferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"IsTradeable","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"t","type":"bool"}],"name":"SetTradeable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"Terminate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"toUnlock","type":"address"}],"name":"UnlockAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"DailyMint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"IsOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lastDayPaid","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"ReceivedEth","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"TransferredEth","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"day","type":"uint256"},{"indexed":false,"name":"val","type":"uint256"},{"indexed":false,"name":"now","type":"uint256"}],"name":"DayMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_buyer","type":"address"},{"indexed":false,"name":"_value","type":"uint256"},{"indexed":false,"name":"note","type":"string"}],"name":"SoldToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
6080604052600060055560006006556298968060075534801561002157600080fd5b5060008054600160a060020a03191633178155308082526002602090815260408084206b019d971e4fe8401e7400000090819055600181905581519081529051631dcd650094927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3506110c9806100a06000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305297781811461017557806306fdde031461018f5780630730a32214610219578063095ea7b31461024057806318160ddd1461027857806323b872dd1461029f5780632e42b012146102c9578063313ce567146102ea578063321de1d4146102ff5780635daf8a7114610368578063661884631461038057806370a08231146103a4578063858ac4d8146103c55780638aa99826146103e65780638e3bd6fa146103fb5780639445eb3a1461041557806395d89b411461042a578063a9059cbb1461043f578063b9c97a4414610463578063d73dd62314610484578063d9da76de146104a8578063dd0860a8146104bd578063dd62ed3e146104de578063ef43143714610505575b60408051348152905133917f52a6cdf67c40ce333b3d846e4e143db87f71dd7935612a4cafcf6ba76047ca1f919081900360200190a2005b34801561018157600080fd5b5061018d60043561051a565b005b34801561019b57600080fd5b506101a4610574565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101de5781810151838201526020016101c6565b50505050905090810190601f16801561020b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022557600080fd5b5061018d600160a060020a03600435166024356044356105ab565b34801561024c57600080fd5b50610264600160a060020a03600435166024356106f5565b604080519115158252519081900360200190f35b34801561028457600080fd5b5061028d61075c565b60408051918252519081900360200190f35b3480156102ab57600080fd5b50610264600160a060020a0360043581169060243516604435610762565b3480156102d557600080fd5b5061018d600160a060020a03600435166108fc565b3480156102f657600080fd5b5061028d610937565b34801561030b57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261018d948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061093c9650505050505050565b34801561037457600080fd5b5061018d600435610aa9565b34801561038c57600080fd5b50610264600160a060020a0360043516602435610b24565b3480156103b057600080fd5b5061028d600160a060020a0360043516610c14565b3480156103d157600080fd5b5061018d600160a060020a0360043516610c2f565b3480156103f257600080fd5b50610264610c75565b34801561040757600080fd5b5061018d6004351515610c96565b34801561042157600080fd5b5061018d610ced565b34801561043657600080fd5b506101a4610d12565b34801561044b57600080fd5b50610264600160a060020a0360043516602435610d49565b34801561046f57600080fd5b5061018d600160a060020a0360043516610e35565b34801561049057600080fd5b50610264600160a060020a0360043516602435610e6d565b3480156104b457600080fd5b5061018d610f06565b3480156104c957600080fd5b50610264600160a060020a0360043516611017565b3480156104ea57600080fd5b5061028d600160a060020a036004358116906024351661102b565b34801561051157600080fd5b5061028d611056565b600054600160a060020a0316331461053157600080fd5b60018054820190553060008181526002602090815260408083208054860190558051858152905160008051602061107e833981519152929181900390910190a350565b60408051808201909152600e81527f455448455245554d20504f574552000000000000000000000000000000000000602082015281565b600054600160a060020a031633146105c257600080fd5b303182118015906105e25750306000908152600260205260409020548111155b15156105ed57600080fd5b600082111561066d57604051600160a060020a0384169083156108fc029084906000818181858888f1935050505015801561062c573d6000803e3d6000fd5b50604080518381529051600160a060020a038516917f83007cefb28dc4cfb49f429f899c69d37f8011db578f48da2f64929a79bf67b3919081900360200190a25b60008111156106f057600160a060020a0383166000908152600260205260409020548181011161069c57600080fd5b30600081815260026020908152604080832080548690039055600160a060020a038716808452928190208054860190558051858152905192939260008051602061107e833981519152929181900390910190a35b505050565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60015490565b3360009081526004602052604081205460ff161561077f57600080fd5b600160a060020a03841660009081526004602052604090205460ff161580156107c15750600160a060020a03831660009081526004602052604090205460ff16155b15156107cc57600080fd5b60005474010000000000000000000000000000000000000000900460ff1615156107f557600080fd5b600160a060020a03841660009081526002602052604090205482118015906108405750600160a060020a03841660009081526003602090815260408083203384529091529020548211155b80156108655750600160a060020a038316600090815260026020526040902054828101115b156108f15782600160a060020a031684600160a060020a031660008051602061107e833981519152846040518082815260200191505060405180910390a350600160a060020a03808416600090815260026020818152604080842080548790039055600382528084203385528252808420805487900390559386168352522080548201905560016108f5565b5060005b9392505050565b600054600160a060020a0316331461091357600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b601281565b600054600160a060020a0316331461095357600080fd5b30600090815260026020526040902054821180159061098b5750600160a060020a038316600090815260026020526040902054828101115b151561099657600080fd5b7f0307f82a1d7930932f894f6f841bd41285da9d1374694c831ad1efa5911393168383836040518084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a155781810151838201526020016109fd565b50505050905090810190601f168015610a425780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a130600081815260026020908152604080832080548790039055600160a060020a038716808452928190208054870190558051868152905192939260008051602061107e833981519152929181900390910190a3505050565b600054600160a060020a03163314610ac057600080fd5b30600090815260026020526040902054811115610adc57600080fd5b600180548290039055306000818152600260209081526040808320805486900390558051858152905192939260008051602061107e833981519152929181900390910190a350565b336000908152600360209081526040808320600160a060020a038616845290915281205480831115610b7957336000908152600360209081526040808320600160a060020a0388168452909152812055610bae565b610b89818463ffffffff61105c16565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a03163314610c4657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005474010000000000000000000000000000000000000000900460ff1690565b600054600160a060020a03163314610cad57600080fd5b60008054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b600054600160a060020a03163314610d0457600080fd5b600054600160a060020a0316ff5b60408051808201909152600481527f4550575200000000000000000000000000000000000000000000000000000000602082015281565b3360009081526004602052604081205460ff1615610d6657600080fd5b60005474010000000000000000000000000000000000000000900460ff161515610d8f57600080fd5b336000908152600260205260409020548211801590610dc75750600160a060020a038316600090815260026020526040902054828101115b15610e2d57604080518381529051600160a060020a03851691339160008051602061107e8339815191529181900360200190a3503360009081526002602052604080822080548490039055600160a060020a038416825290208054820190556001610756565b506000610756565b600054600160a060020a03163314610e4c57600080fd5b600160a060020a03166000908152600460205260409020805460ff19169055565b336000908152600360209081526040808320600160a060020a0386168452909152812054610ea1908363ffffffff61106e16565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000808062015180635ae7adff19420104925042635ae7ae001115610f2a57600080fd5b600554831015610f3957600080fd5b600554601e90049150600654821115610f6357600680546001019055600754606490606302046007555b506007543060008181526002602090815260408083208054601e629896806305a995c09098029790970496909604670de0b6b3a764000002958601905560018054860190558051858152905160008051602061107e833981519152929181900390910190a360055460408051918252602082018390524282820152517f2bd46683d2f09f7082e2121b94af20e57d4ebfc802b67f4bb92d31adf4c1dbc39181900360600190a1505060058054600101905550565b600054600160a060020a0391821691161490565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60055490565b60008282111561106857fe5b50900390565b6000828201838110156108f557fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a623b3bab579324f071ed01f409f9ca6a82c356e74c55b7a73d2acf08c3e74120029
Contract_Creation_Code_ARM:



Contract Adress: 0x0a0ba2b6d7955029653b9f7ce42f7b6760d705ac
Contract Name: GGTCCoin
Contract_Source_Code: 
pragma solidity ^0.4.11;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) balances;
  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) allowed;
  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }
  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) returns (bool) {
    // To change the approve amount you first have to reduce the addresses`
    //  allowance to zero by calling `approve(_spender, 0)` if it is not
    //  already 0 to mitigate the race condition described here:
    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }
  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval (address _spender, uint _addedValue)
    returns (bool success) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  function decreaseApproval (address _spender, uint _subtractedValue)
    returns (bool success) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
/**
 * @title GGTCCoin
 * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.
 * Note they can later distribute these tokens as they wish using `transfer` and other
 * `StandardToken` functions.
 */
contract GGTCCoin is StandardToken {
  string public constant name = "GGTC";
  string public constant symbol = "GGTC";
  uint8 public constant decimals = 18;
  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));
  /**
   * @dev Constructor that gives msg.sender all of existing tokens.
   */
  function GGTCCoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
6060604052341561000f57600080fd5b601260ff16600a0a633b9aca0002600081905550601260ff16600a0a633b9aca0002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112ae806100836000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014d57806318160ddd146101a757806323b872dd146101d05780632ff2e9dc14610249578063313ce5671461027257806366188463146102a157806370a08231146102fb57806395d89b4114610348578063a9059cbb146103d6578063d73dd62314610430578063dd62ed3e1461048a575b600080fd5b34156100ca57600080fd5b6100d26104f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401526020810190506100f7565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015857600080fd5b61018d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061052f565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba6106b6565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b61022f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106bc565b604051808215151515815260200191505060405180910390f35b341561025457600080fd5b61025c610a7b565b6040518082815260200191505060405180910390f35b341561027d57600080fd5b610285610a8c565b604051808260ff1660ff16815260200191505060405180910390f35b34156102ac57600080fd5b6102e1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a91565b604051808215151515815260200191505060405180910390f35b341561030657600080fd5b610332600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d22565b6040518082815260200191505060405180910390f35b341561035357600080fd5b61035b610d6b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039b578082015181840152602081019050610380565b50505050905090810190601f1680156103c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e157600080fd5b610416600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610da4565b604051808215151515815260200191505060405180910390f35b341561043b57600080fd5b610470600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fc8565b604051808215151515815260200191505060405180910390f35b341561049557600080fd5b6104e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111c4565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f474754430000000000000000000000000000000000000000000000000000000081525081565b6000808214806105bb57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156105c657600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106f957600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561074757600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107d257600080fd5b61082482600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108b982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061098b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601260ff16600a0a633b9aca000281565b601281565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610ba2576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c36565b610bb5838261124b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600481526020017f474754430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610de157600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e2f57600080fd5b610e8182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f1682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600061105982600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561125957fe5b818303905092915050565b600080828401905083811015151561127857fe5b80915050929150505600a165627a7a723058203a42bb22a9f7046782147b1a19388239f93ba32280eb1eea94492f26905e402a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xd79396ab3bfaaa0d9f6d11f95bb641601d93c0a9
Contract Name: TokenRegistry
Contract_Source_Code: 
pragma solidity 0.4.18;
// File: zeppelin-solidity/contracts/ownership/Ownable.sol
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
// File: contracts/TokenRegistry.sol
/**
 * The TokenRegistry is a basic registry mapping token symbols
 * to their known, deployed addresses on the current blockchain.
 *
 * Note that the TokenRegistry does *not* mediate any of the
 * core protocol's business logic, but, rather, is a helpful
 * utility for Terms Contracts to use in encoding, decoding, and
 * resolving the addresses of currently deployed tokens.
 *
 * At this point in time, administration of the Token Registry is
 * under Dharma Labs' control.  With more sophisticated decentralized
 * governance mechanisms, we intend to shift ownership of this utility
 * contract to the Dharma community.
 */
contract TokenRegistry is Ownable {
    mapping (bytes32 => TokenAttributes) public symbolHashToTokenAttributes;
    string[256] public tokenSymbolList;
    uint8 public tokenSymbolListLength;
    struct TokenAttributes {
        // The ERC20 contract address.
        address tokenAddress;
        // The index in `tokenSymbolList` where the token's symbol can be found.
        uint tokenIndex;
        // The name of the given token, e.g. "Canonical Wrapped Ether"
        string name;
        // The number of digits that come after the decimal place when displaying token value.
        uint8 numDecimals;
    }
    /**
     * Maps the given symbol to the given token attributes.
     */
    function setTokenAttributes(
        string _symbol,
        address _tokenAddress,
        string _tokenName,
        uint8 _numDecimals
    )
        public onlyOwner
    {
        bytes32 symbolHash = keccak256(_symbol);
        // Attempt to retrieve the token's attributes from the registry.
        TokenAttributes memory attributes = symbolHashToTokenAttributes[symbolHash];
        if (attributes.tokenAddress == address(0)) {
            // The token has not yet been added to the registry.
            attributes.tokenAddress = _tokenAddress;
            attributes.numDecimals = _numDecimals;
            attributes.name = _tokenName;
            attributes.tokenIndex = tokenSymbolListLength;
            tokenSymbolList[tokenSymbolListLength] = _symbol;
            tokenSymbolListLength++;
        } else {
            // The token has already been added to the registry; update attributes.
            attributes.tokenAddress = _tokenAddress;
            attributes.numDecimals = _numDecimals;
            attributes.name = _tokenName;
        }
        // Update this contract's storage.
        symbolHashToTokenAttributes[symbolHash] = attributes;
    }
    /**
     * Given a symbol, resolves the current address of the token the symbol is mapped to.
     */
    function getTokenAddressBySymbol(string _symbol) public view returns (address) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.tokenAddress;
    }
    /**
     * Given the known index of a token within the registry's symbol list,
     * returns the address of the token mapped to the symbol at that index.
     *
     * This is a useful utility for compactly encoding the address of a token into a
     * TermsContractParameters string -- by encoding a token by its index in a
     * a 256 slot array, we can represent a token by a 1 byte uint instead of a 20 byte address.
     */
    function getTokenAddressByIndex(uint _index) public view returns (address) {
        string storage symbol = tokenSymbolList[_index];
        return getTokenAddressBySymbol(symbol);
    }
    /**
     * Given a symbol, resolves the index of the token the symbol is mapped to within the registry's
     * symbol list.
     */
    function getTokenIndexBySymbol(string _symbol) public view returns (uint) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.tokenIndex;
    }
    /**
     * Given an index, resolves the symbol of the token at that index in the registry's
     * token symbol list.
     */
    function getTokenSymbolByIndex(uint _index) public view returns (string) {
        return tokenSymbolList[_index];
    }
    /**
     * Given a symbol, returns the name of the token the symbol is mapped to within the registry's
     * symbol list.
     */
    function getTokenNameBySymbol(string _symbol) public view returns (string) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.name;
    }
    /**
     * Given the symbol for a token, returns the number of decimals as provided in
     * the associated TokensAttribute struct.
     *
     * Example:
     *   getNumDecimalsFromSymbol("REP");
     *   => 18
     */
    function getNumDecimalsFromSymbol(string _symbol) public view returns (uint8) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.numDecimals;
    }
    /**
     * Given the index for a token in the registry, returns the number of decimals as provided in
     * the associated TokensAttribute struct.
     *
     * Example:
     *   getNumDecimalsByIndex(1);
     *   => 18
     */
    function getNumDecimalsByIndex(uint _index) public view returns (uint8) {
        string memory symbol = getTokenSymbolByIndex(_index);
        return getNumDecimalsFromSymbol(symbol);
    }
    /**
     * Given the index for a token in the registry, returns the name of the token as provided in
     * the associated TokensAttribute struct.
     *
     * Example:
     *   getTokenNameByIndex(1);
     *   => "Canonical Wrapped Ether"
     */
    function getTokenNameByIndex(uint _index) public view returns (string) {
        string memory symbol = getTokenSymbolByIndex(_index);
        string memory tokenName = getTokenNameBySymbol(symbol);
        return tokenName;
    }
    /**
     * Given the symbol for a token in the registry, returns a tuple containing the token's address,
     * the token's index in the registry, the token's name, and the number of decimals.
     *
     * Example:
     *   getTokenAttributesBySymbol("WETH");
     *   => ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", 1, "Canonical Wrapped Ether", 18]
     */
    function getTokenAttributesBySymbol(string _symbol)
        public
        view
        returns (
            address,
            uint,
            string,
            uint
        )
    {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return (
            attributes.tokenAddress,
            attributes.tokenIndex,
            attributes.name,
            attributes.numDecimals
        );
    }
    /**
     * Given the index for a token in the registry, returns a tuple containing the token's address,
     * the token's symbol, the token's name, and the number of decimals.
     *
     * Example:
     *   getTokenAttributesByIndex(1);
     *   => ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "WETH", "Canonical Wrapped Ether", 18]
     */
    function getTokenAttributesByIndex(uint _index)
        public
        view
        returns (
            address,
            string,
            string,
            uint8
        )
    {
        string memory symbol = getTokenSymbolByIndex(_index);
        bytes32 symbolHash = keccak256(symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return (
            attributes.tokenAddress,
            symbol,
            attributes.name,
            attributes.numDecimals
        );
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenAttributesByIndex","outputs":[{"name":"","type":"address"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenIndexBySymbol","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenAddressBySymbol","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"symbolHashToTokenAttributes","outputs":[{"name":"tokenAddress","type":"address"},{"name":"tokenIndex","type":"uint256"},{"name":"name","type":"string"},{"name":"numDecimals","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_symbol","type":"string"},{"name":"_tokenAddress","type":"address"},{"name":"_tokenName","type":"string"},{"name":"_numDecimals","type":"uint8"}],"name":"setTokenAttributes","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenAddressByIndex","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenSymbolByIndex","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenAttributesBySymbol","outputs":[{"name":"","type":"address"},{"name":"","type":"uint256"},{"name":"","type":"string"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getNumDecimalsFromSymbol","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getNumDecimalsByIndex","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"tokenSymbolList","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenNameBySymbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenSymbolListLength","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenNameByIndex","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:
6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b4a806100536000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e71f8d1146100eb5780632e1e1bb3146102335780633550b6d9146102a45780633dbe284a1461034157806351d658d2146104455780635715c5b7146105105780636e7cbb0d146105735780638052348b1461060f57806380ec85871461072657806382f694301461079d5780638da5cb5b146107da57806395f121bf1461082f578063bd7b564d146108cb578063c51ccb40146109a1578063f2fde38b146109d0578063fa7f369714610a09575b600080fd5b34156100f657600080fd5b61010c6004808035906020019091905050610aa5565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018460ff1660ff168152602001838103835286818151815260200191508051906020019080838360005b8381101561018e578082015181840152602081019050610173565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156101f45780820151818401526020810190506101d9565b50505050905090810190601f1680156102215780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b341561023e57600080fd5b61028e600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c3b565b6040518082815260200191505060405180910390f35b34156102af57600080fd5b6102ff600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610cd0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034c57600080fd5b610366600480803560001916906020019091905050610d85565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018360ff1660ff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156104335780601f1061040857610100808354040283529160200191610433565b820191906000526020600020905b81548152906001019060200180831161041657829003601f168201915b50509550505050505060405180910390f35b341561045057600080fd5b61050e600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff16906020019091905050610de1565b005b341561051b57600080fd5b6105316004808035906020019091905050611217565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561057e57600080fd5b61059460048080359060200190919050506112d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d45780820151818401526020810190506105b9565b50505050905090810190601f1680156106015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561061a57600080fd5b61066a600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611390565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156106e85780820151818401526020810190506106cd565b50505050905090810190601f1680156107155780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561073157600080fd5b610781600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611515565b604051808260ff1660ff16815260200191505060405180910390f35b34156107a857600080fd5b6107be60048080359060200190919050506115b7565b604051808260ff1660ff16815260200191505060405180910390f35b34156107e557600080fd5b6107ed6115dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561083a57600080fd5b6108506004808035906020019091905050611602565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610890578082015181840152602081019050610875565b50505050905090810190601f1680156108bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108d657600080fd5b610926600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506116b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096657808201518184015260208101905061094b565b50505050905090810190601f1680156109935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156109ac57600080fd5b6109b46117e8565b604051808260ff1660ff16815260200191505060405180910390f35b34156109db57600080fd5b610a07600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117fc565b005b3415610a1457600080fd5b610a2a6004808035906020019091905050611951565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a6a578082015181840152602081019050610a4f565b50505050905090810190601f168015610a975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000610aaf611989565b610ab7611989565b6000610ac1611989565b600080610acd886112d7565b9250826040518082805190602001908083835b602083101515610b055780518252602082019150602081019050602083039250610ae0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683826002018360030160009054906101000a900460ff16818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c225780601f10610bf757610100808354040283529160200191610c22565b820191906000526020600020905b815481529060010190602001808311610c0557829003601f168201915b5050505050915096509650965096505050509193509193565b6000806000836040518082805190602001908083835b602083101515610c765780518252602082019150602081019050602083039250610c51565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506001600083600019166000191681526020019081526020016000209050806001015492505050919050565b6000806000836040518082805190602001908083835b602083101515610d0b5780518252602082019150602081019050602083039250610ce6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050919050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201908060030160009054906101000a900460ff16905084565b6000610deb61199d565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4657600080fd5b856040518082805190602001908083835b602083101515610e7c5780518252602082019150602081019050602083039250610e57565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150600160008360001916600019168152602001908152602001600020608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fcb5780601f10610fa057610100808354040283529160200191610fcb565b820191906000526020600020905b815481529060010190602001808311610fae57829003601f168201915b505050505081526020016003820160009054906101000a900460ff1660ff1660ff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16141561110d5784816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816060019060ff16908160ff168152505083816040018190525061010260009054906101000a900460ff1660ff1681602001818152505085600261010260009054906101000a900460ff1660ff16610100811015156110c057fe5b0190805190602001906110d49291906119e5565b50610102600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff16021790555050611161565b84816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816060019060ff16908160ff16815250508381604001819052505b8060016000846000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906111ea929190611a65565b5060608201518160030160006101000a81548160ff021916908360ff160217905550905050505050505050565b6000806002836101008110151561122a57fe5b0190506112cf818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112c55780601f1061129a576101008083540402835291602001916112c5565b820191906000526020600020905b8154815290600101906020018083116112a857829003601f168201915b5050505050610cd0565b915050919050565b6112df611989565b600282610100811015156112ef57fe5b018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113845780601f1061135957610100808354040283529160200191611384565b820191906000526020600020905b81548152906001019060200180831161136757829003601f168201915b50505050509050919050565b60008061139b611989565b6000806000866040518082805190602001908083835b6020831015156113d657805182526020820191506020810190506020830392506113b1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010154826002018360030160009054906101000a900460ff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114f75780601f106114cc576101008083540402835291602001916114f7565b820191906000526020600020905b8154815290600101906020018083116114da57829003601f168201915b505050505091508060ff169050955095509550955050509193509193565b6000806000836040518082805190602001908083835b602083101515611550578051825260208201915060208101905060208303925061152b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060030160009054906101000a900460ff1692505050919050565b60006115c1611989565b6115ca836112d7565b90506115d581611515565b915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002816101008110151561161257fe5b016000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116ad5780601f10611682576101008083540402835291602001916116ad565b820191906000526020600020905b81548152906001019060200180831161169057829003601f168201915b505050505081565b6116bd611989565b600080836040518082805190602001908083835b6020831015156116f657805182526020820191506020810190506020830392506116d1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506001600083600019166000191681526020019081526020016000209050806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117da5780601f106117af576101008083540402835291602001916117da565b820191906000526020600020905b8154815290600101906020018083116117bd57829003601f168201915b505050505092505050919050565b61010260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561189357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611959611989565b611961611989565b611969611989565b611972846112d7565b915061197d826116b5565b90508092505050919050565b602060405190810160405280600081525090565b608060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016119d5611ae5565b8152602001600060ff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a2657805160ff1916838001178555611a54565b82800160010185558215611a54579182015b82811115611a53578251825591602001919060010190611a38565b5b509050611a619190611af9565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611aa657805160ff1916838001178555611ad4565b82800160010185558215611ad4579182015b82811115611ad3578251825591602001919060010190611ab8565b5b509050611ae19190611af9565b5090565b602060405190810160405280600081525090565b611b1b91905b80821115611b17576000816000905550600101611aff565b5090565b905600a165627a7a723058209b941d0de0d510f499d51005e8694ec912b4d67e9024bb0e60459a4c44c3c3510029
Contract_Creation_Code_ARM:



Contract Adress: 0x3715669c0624371d25cdec2c3e22ddc0d3328fd4
Contract Name: PantheonChina
Contract_Source_Code: 
pragma solidity 0.4.25;
/*
* Pantheon China 第一份智能合約提供穩定的收入。 
* 智能合約可確保您的資金免遭盜竊和黑客攻擊
* 不要投入超過你可以輸的
*/
contract PantheonChina {
    struct UserRecord {
        address referrer;
        uint tokens;
        uint gained_funds;
        uint ref_funds;
        // 這個領域可能是負面的
        int funds_correction;
    }
    using SafeMath for uint;
    using SafeMathInt for int;
    using Fee for Fee.fee;
    using ToAddress for bytes;
    // ERC20
    string constant public name = "Pantheon China";
    string constant public symbol = "PAC";
    uint8 constant public decimals = 18;
    // Fees
    Fee.fee private fee_purchase = Fee.fee(1, 10); // 10%
    Fee.fee private fee_selling  = Fee.fee(1, 20); // 5%
    Fee.fee private fee_transfer = Fee.fee(1, 100); // 1%
    Fee.fee private fee_referral = Fee.fee(33, 100); // 33%
    // 最少量的令牌將成為推薦計劃的參與者
    uint constant private minimal_stake = 10e18;
    // 轉換eth < - >令牌的因素，具有所需的計算精度
    uint constant private precision_factor = 1e18;
    // 定價政策
    //  - 如果用戶購買1個令牌，價格將增加“price_offset”值
    //  - 如果用戶賣出1個令牌，價格將降低“price_offset”值
    // 有關詳細信息，請參閱方法“fundsToTokens”和“tokensToFunds”
    uint private price = 1e29; // 100 Gwei * precision_factor
    uint constant private price_offset = 1e28; // 10 Gwei * precision_factor
    // 令牌總數
    uint private total_supply = 0;
    // 令牌持有者之間共享的總利潤。由於此參數，它並不能準確反映資金總額
    // 可以修改以在總供應量發生變化時保持真實用戶的股息
    // 有關詳細信息，請參閱方法“dividendsOf”並在代碼中使用“funds_correction”
    uint private shared_profit = 0;
    // 用戶數據的映射
    mapping(address => UserRecord) private user_data;
    // ==== 修改 ==== //
    modifier onlyValidTokenAmount(uint tokens) {
        require(tokens > 0, "Amount of tokens must be greater than zero");
        require(tokens <= user_data[msg.sender].tokens, "You have not enough tokens");
        _;
    }
    // ==== 上市 API ==== //
    // ---- 寫作方法 ---- //
    function () public payable {
        buy(msg.data.toAddr());
    }
    /*
    *  從收到的資金購買代幣
    */
    function buy(address referrer) public payable {
        // 報名費
        (uint fee_funds, uint taxed_funds) = fee_purchase.split(msg.value);
        require(fee_funds != 0, "Incoming funds is too small");
        // 更新用戶的推薦人
        //  - 你不能成為自己的推薦人
        //  - 用戶和他的推薦人將在一起生活
        UserRecord storage user = user_data[msg.sender];
        if (referrer != 0x0 && referrer != msg.sender && user.referrer == 0x0) {
            user.referrer = referrer;
        }
        // 申請推薦獎金
        if (user.referrer != 0x0) {
            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, msg.value);
            require(fee_funds != 0, "收入資金太小");
        }
        // 計算代幣金額和變更價格
        (uint tokens, uint _price) = fundsToTokens(taxed_funds);
        require(tokens != 0, "收入資金太小");
        price = _price;
        // 薄荷代幣，增加共享利潤
        mintTokens(msg.sender, tokens);
        shared_profit = shared_profit.add(fee_funds);
        emit Purchase(msg.sender, msg.value, tokens, price / precision_factor, now);
    }
    /*
    *  出售給定數量的代幣並獲得資金
    */
    function sell(uint tokens) public onlyValidTokenAmount(tokens) {
        // 計算資金數額和變更價格
        (uint funds, uint _price) = tokensToFunds(tokens);
        require(funds != 0, "沒有足夠的令牌來做這件事");
        price = _price;
        // 申請費
        (uint fee_funds, uint taxed_funds) = fee_selling.split(funds);
        require(fee_funds != 0, "沒有足夠的令牌來做這件事");
        // 刻錄令牌並為用戶的股息增加資金
        burnTokens(msg.sender, tokens);
        UserRecord storage user = user_data[msg.sender];
        user.gained_funds = user.gained_funds.add(taxed_funds);
        // 增加共享利潤
        shared_profit = shared_profit.add(fee_funds);
        emit Selling(msg.sender, tokens, funds, price / precision_factor, now);
    }
    /*
    *  將給定數量的令牌從發件人轉移到另一個用戶
    * ERC20
    */
    function transfer(address to_addr, uint tokens) public onlyValidTokenAmount(tokens) returns (bool success) {
        require(to_addr != msg.sender, "You cannot transfer tokens to yourself");
        // 申請費
        (uint fee_tokens, uint taxed_tokens) = fee_transfer.split(tokens);
        require(fee_tokens != 0, "Insufficient tokens to do that");
        // 計算資金數額和變更價格
        (uint funds, uint _price) = tokensToFunds(fee_tokens);
        require(funds != 0, "Insufficient tokens to do that");
        price = _price;
        // 燃燒和薄荷代幣，不含費用
        burnTokens(msg.sender, tokens);
        mintTokens(to_addr, taxed_tokens);
        // 增加共享利潤
        shared_profit = shared_profit.add(funds);
        emit Transfer(msg.sender, to_addr, tokens);
        return true;
    }
    /*
    *  再投資所有股息
    */
    function reinvest() public {
        // 獲得所有股息
        uint funds = dividendsOf(msg.sender);
        require(funds > 0, "You have no dividends");
        // 做出更正，之後的事件將為0
        UserRecord storage user = user_data[msg.sender];
        user.funds_correction = user.funds_correction.add(int(funds));
        // 申請費
        (uint fee_funds, uint taxed_funds) = fee_purchase.split(funds);
        require(fee_funds != 0, "Insufficient dividends to do that");
        // 申請推薦獎金
        if (user.referrer != 0x0) {
            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, funds);
            require(fee_funds != 0, "Insufficient dividends to do that");
        }
        // 計算代幣金額和變更價格
        (uint tokens, uint _price) = fundsToTokens(taxed_funds);
        require(tokens != 0, "Insufficient dividends to do that");
        price = _price;
        // 薄荷代幣，增加共享利潤
        mintTokens(msg.sender, tokens);
        shared_profit = shared_profit.add(fee_funds);
        emit Reinvestment(msg.sender, funds, tokens, price / precision_factor, now);
    }
    /*
    *  撤回所有股息
    */
    function withdraw() public {
        // 獲得所有股息
        uint funds = dividendsOf(msg.sender);
        require(funds > 0, "You have no dividends");
        // 做出更正，之後的事件將為0
        UserRecord storage user = user_data[msg.sender];
        user.funds_correction = user.funds_correction.add(int(funds));
        // 發送資金
        msg.sender.transfer(funds);
        emit Withdrawal(msg.sender, funds, now);
    }
    /*
    *  出售所有代幣和分紅
    */
    function exit() public {
        // 賣掉所有代幣
        uint tokens = user_data[msg.sender].tokens;
        if (tokens > 0) {
            sell(tokens);
        }
        withdraw();
    }
    /*
    * 警告！此方法在令牌持有者之間分配所有傳入資金，並且不提供任何內容
    * 它將在未來由我們的生態系統中的其他合同/地址使用
    * 但如果你想捐款，歡迎你
    */
    function donate() public payable {
        shared_profit = shared_profit.add(msg.value);
        emit Donation(msg.sender, msg.value, now);
    }
    function totalSupply() public view returns (uint) {
        return total_supply;
    }
    function balanceOf(address addr) public view returns (uint) {
        return user_data[addr].tokens;
    }
    function dividendsOf(address addr) public view returns (uint) {
        UserRecord memory user = user_data[addr];
        int d = int(user.gained_funds.add(user.ref_funds));
        require(d >= 0);
        if (total_supply > 0) {
            d = d.add(int(shared_profit.mul(user.tokens) / total_supply));
        }
        if (user.funds_correction > 0) {
            d = d.sub(user.funds_correction);
        }
        else if (user.funds_correction < 0) {
            d = d.add(-user.funds_correction);
        }
        require(d >= 0);
        return uint(d);
    }
    function expectedTokens(uint funds, bool apply_fee) public view returns (uint) {
        if (funds == 0) {
            return 0;
        }
        if (apply_fee) {
            (,uint _funds) = fee_purchase.split(funds);
            funds = _funds;
        }
        (uint tokens,) = fundsToTokens(funds);
        return tokens;
    }
    function expectedFunds(uint tokens, bool apply_fee) public view returns (uint) {
        // 總共有空令牌或沒有銷售代幣
        if (tokens == 0 || total_supply == 0) {
            return 0;
        }
        // 比總共開採更多的令牌，只是從計算中排除不必要的令牌
        else if (tokens > total_supply) {
            tokens = total_supply;
        }
        (uint funds,) = tokensToFunds(tokens);
        if (apply_fee) {
            (,uint _funds) = fee_selling.split(funds);
            funds = _funds;
        }
        return funds;
    }
    /*
    *  下一個令牌的購買價格
    */
    function buyPrice() public view returns (uint) {
        return price / precision_factor;
    }
    /*
    *  售價下一個令牌
    */
    function sellPrice() public view returns (uint) {
        return price.sub(price_offset) / precision_factor;
    }
    // ==== 私人的 API ==== //
    function mintTokens(address addr, uint tokens) internal {
        UserRecord storage user = user_data[addr];
        bool not_first_minting = total_supply > 0;
        if (not_first_minting) {
            shared_profit = shared_profit.mul(total_supply.add(tokens)) / total_supply;
        }
        total_supply = total_supply.add(tokens);
        user.tokens = user.tokens.add(tokens);
        if (not_first_minting) {
            user.funds_correction = user.funds_correction.add(int(tokens.mul(shared_profit) / total_supply));
        }
    }
    function burnTokens(address addr, uint tokens) internal {
        UserRecord storage user = user_data[addr];
        uint dividends_from_tokens = 0;
        if (total_supply == tokens) {
            dividends_from_tokens = shared_profit.mul(user.tokens) / total_supply;
        }
        shared_profit = shared_profit.mul(total_supply.sub(tokens)) / total_supply;
        total_supply = total_supply.sub(tokens);
        user.tokens = user.tokens.sub(tokens);
        if (total_supply > 0) {
            user.funds_correction = user.funds_correction.sub(int(tokens.mul(shared_profit) / total_supply));
        }
        else if (dividends_from_tokens != 0) {
            user.funds_correction = user.funds_correction.sub(int(dividends_from_tokens));
        }
    }
    function rewardReferrer(address addr, address referrer_addr, uint funds, uint full_funds) internal returns (uint funds_after_reward) {
        UserRecord storage referrer = user_data[referrer_addr];
        if (referrer.tokens >= minimal_stake) {
            (uint reward_funds, uint taxed_funds) = fee_referral.split(funds);
            referrer.ref_funds = referrer.ref_funds.add(reward_funds);
            emit ReferralReward(addr, referrer_addr, full_funds, reward_funds, now);
            return taxed_funds;
        }
        else {
            return funds;
        }
    }
    function fundsToTokens(uint funds) internal view returns (uint tokens, uint _price) {
        uint b = price.mul(2).sub(price_offset);
        uint D = b.mul(b).add(price_offset.mul(8).mul(funds).mul(precision_factor));
        uint n = D.sqrt().sub(b).mul(precision_factor) / price_offset.mul(2);
        uint anp1 = price.add(price_offset.mul(n) / precision_factor);
        return (n, anp1);
    }
    function tokensToFunds(uint tokens) internal view returns (uint funds, uint _price) {
        uint sell_price = price.sub(price_offset);
        uint an = sell_price.add(price_offset).sub(price_offset.mul(tokens) / precision_factor);
        uint sn = sell_price.add(an).mul(tokens) / precision_factor.mul(2);
        return (sn / precision_factor, an);
    }
    // ==== 活動 ==== //
    event Purchase(address indexed addr, uint funds, uint tokens, uint price, uint time);
    event Selling(address indexed addr, uint tokens, uint funds, uint price, uint time);
    event Reinvestment(address indexed addr, uint funds, uint tokens, uint price, uint time);
    event Withdrawal(address indexed addr, uint funds, uint time);
    event Donation(address indexed addr, uint funds, uint time);
    event ReferralReward(address indexed referral_addr, address indexed referrer_addr, uint funds, uint reward_funds, uint time);
    //ERC20
    event Transfer(address indexed from_addr, address indexed to_addr, uint tokens);
}
library SafeMath {
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }
        uint c = a * b;
        require(c / a == b, "mul failed");
        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        require(b <= a, "sub failed");
        return a - b;
    }
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "add failed");
        return c;
    }
    function sqrt(uint x) internal pure returns (uint y) {
        uint z = add(x, 1) / 2;
        y = x;
        while (z < y) {
            y = z;
            z = add(x / z, z) / 2;
        }
    }
}
library SafeMathInt {
    function sub(int a, int b) internal pure returns (int) {
        int c = a - b;
        require(c <= a, "sub failed");
        return c;
    }
    function add(int a, int b) internal pure returns (int) {
        int c = a + b;
        require(c >= a, "add failed");
        return c;
    }
}
library Fee {
    using SafeMath for uint;
    struct fee {
        uint num;
        uint den;
    }
    function split(fee memory f, uint value) internal pure returns (uint tax, uint taxed_value) {
        if (value == 0) {
            return (0, 0);
        }
        tax = value.mul(f.num) / f.den;
        taxed_value = value.sub(tax);
    }
    function get_tax(fee memory f, uint value) internal pure returns (uint tax) {
        if (value == 0) {
            return 0;
        }
        tax = value.mul(f.num) / f.den;
    }
}
library ToAddress {
    function toAddr(bytes source) internal pure returns (address addr) {
        assembly {
            addr := mload(add(source, 0x14))
        }
        return addr;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"dividendsOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to_addr","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokens","type":"uint256"},{"name":"apply_fee","type":"bool"}],"name":"expectedFunds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"funds","type":"uint256"},{"name":"apply_fee","type":"bool"}],"name":"expectedTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"uint256"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"donate","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"referrer","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[],"name":"reinvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"tokens","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Purchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Selling","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"tokens","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Reinvestment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Withdrawal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Donation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"referral_addr","type":"address"},{"indexed":true,"name":"referrer_addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"reward_funds","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"ReferralReward","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from_addr","type":"address"},{"indexed":true,"name":"to_addr","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
60016080819052600a60a0819052600082815581835560c0839052601460e081905260028490556003556101008390526064610120819052600493909355600583905561018060405260216101408190526101608490526006556007929092556c01431e0fae6d7217caa000000060085560098290555534801561008257600080fd5b50611a79806100926000396000f3006080604052600436106100ef5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461013357806306fdde031461016657806318160ddd146101f0578063313ce567146102055780633ccfd60b146102305780634b7503341461024557806370a082311461025a5780638620410b1461027b57806395d89b4114610290578063a9059cbb146102a5578063be2eaad4146102dd578063c5f60620146102fa578063e4849b3214610317578063e9fad8ee1461032f578063ed88c68e14610344578063f088d5471461034c578063fdb5a03e14610360575b61013161012c6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610375945050505050565b61037c565b005b34801561013f57600080fd5b50610154600160a060020a03600435166105e8565b60408051918252519081900360200190f35b34801561017257600080fd5b5061017b610718565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b557818101518382015260200161019d565b50505050905090810190601f1680156101e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fc57600080fd5b5061015461074f565b34801561021157600080fd5b5061021a610755565b6040805160ff9092168252519081900360200190f35b34801561023c57600080fd5b5061013161075a565b34801561025157600080fd5b50610154610855565b34801561026657600080fd5b50610154600160a060020a0360043516610890565b34801561028757600080fd5b506101546108ae565b34801561029c57600080fd5b5061017b6108c3565b3480156102b157600080fd5b506102c9600160a060020a03600435166024356108fa565b604080519115158252519081900360200190f35b3480156102e957600080fd5b506101546004356024351515610bd4565b34801561030657600080fd5b506101546004356024351515610c4f565b34801561032357600080fd5b50610131600435610caa565b34801561033b57600080fd5b50610131610f79565b610131610fa8565b610131600160a060020a036004351661037c565b34801561036c57600080fd5b50610131610ff9565b6014015190565b6040805180820190915260008054825260015460208301529081908190819081906103ad903463ffffffff6112cb16565b9095509350841515610409576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b336000908152600b602052604090209250600160a060020a0386161580159061043b5750600160a060020a0386163314155b801561044f57508254600160a060020a0316155b1561047b57825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161783555b8254600160a060020a0316156104fc5782546104a3903390600160a060020a0316873461131e565b94508415156104fc576040805160e560020a62461bcd02815260206004820152601260248201527fe694b6e585a5e8b387e98791e5a4aae5b08f0000000000000000000000000000604482015290519081900360640190fd5b610505846113f9565b9092509050811515610561576040805160e560020a62461bcd02815260206004820152601260248201527fe694b6e585a5e8b387e98791e5a4aae5b08f0000000000000000000000000000604482015290519081900360640190fd5b60088190556105703383611520565b600a54610583908663ffffffff6115f016565b600a5560085433907fd721454499cf9c37b757e03b9d675df451c229048129d6e2d552216a035e6a559034908590670de0b6b3a7640000905b6040805194855260208501939093520482820152426060830152519081900360800190a2505050505050565b60006105f2611a14565b50600160a060020a038083166000908152600b60209081526040808320815160a081018352815490951685526001810154928501929092526002820154908401819052600382015460608501819052600490920154608085015261065b9163ffffffff6115f016565b9050600081121561066b57600080fd5b600060095411156106b0576106ad6009546106958460200151600a5461165890919063ffffffff16565b81151561069e57fe5b8391900463ffffffff6116d116565b90505b6000826080015113156106da5760808201516106d390829063ffffffff61172e16565b9050610703565b60008260800151121561070357608082015161070090829060000363ffffffff6116d116565b90505b600081121561071157600080fd5b9392505050565b60408051808201909152600e81527f50616e7468656f6e204368696e61000000000000000000000000000000000000602082015281565b60095490565b601281565b600080610766336105e8565b9150600082116107c0576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b50336000908152600b6020526040902060048101546107e5908363ffffffff6116d116565b6004820155604051339083156108fc029084906000818181858888f19350505050158015610817573d6000803e3d6000fd5b5060408051838152426020820152815133927fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb928290030190a25050565b6000670de0b6b3a76400006108816b204fce5e3e2502611000000060085461178b90919063ffffffff16565b81151561088a57fe5b04905090565b600160a060020a03166000908152600b602052604090206001015490565b600854600090670de0b6b3a76400009061088a565b60408051808201909152600381527f5041430000000000000000000000000000000000000000000000000000000000602082015281565b6000808080808581811161097e576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600b60205260409020600101548111156109e8576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b600160a060020a038816331415610a6f576040805160e560020a62461bcd02815260206004820152602660248201527f596f752063616e6e6f74207472616e7366657220746f6b656e7320746f20796f60448201527f757273656c660000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040805180820190915260045481526005546020820152610a96908863ffffffff6112cb16565b9095509350841515610af2576040805160e560020a62461bcd02815260206004820152601e60248201527f496e73756666696369656e7420746f6b656e7320746f20646f20746861740000604482015290519081900360640190fd5b610afb856117eb565b9093509150821515610b57576040805160e560020a62461bcd02815260206004820152601e60248201527f496e73756666696369656e7420746f6b656e7320746f20646f20746861740000604482015290519081900360640190fd5b6008829055610b6633886118b5565b610b708885611520565b600a54610b83908463ffffffff6115f016565b600a55604080518881529051600160a060020a038a169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001979650505050505050565b60008080841580610be55750600954155b15610bf35760009250610c47565b600954851115610c035760095494505b610c0c856117eb565b5091508315610c43576040805180820190915260025481526003546020820152610c3c908363ffffffff6112cb16565b9150508091505b8192505b505092915050565b60008080841515610c635760009250610c47565b8315610c97576040805180820190915260005481526001546020820152610c90908663ffffffff6112cb16565b9250508194505b610ca0856113f9565b5095945050505050565b60008080808085818111610d2e576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600b6020526040902060010154811115610d98576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b610da1876117eb565b9096509450851515610e22576040805160e560020a62461bcd028152602060048201526024808201527fe6b292e69c89e8b6b3e5a4a0e79a84e4bba4e7898ce4be86e5819ae98099e4bb60448201527fb6e4ba8b00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60088590556040805180820190915260025481526003546020820152610e4e908763ffffffff6112cb16565b9094509250831515610ecf576040805160e560020a62461bcd028152602060048201526024808201527fe6b292e69c89e8b6b3e5a4a0e79a84e4bba4e7898ce4be86e5819ae98099e4bb60448201527fb6e4ba8b00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610ed933886118b5565b336000908152600b602052604090206002810154909250610f00908463ffffffff6115f016565b6002830155600a54610f18908563ffffffff6115f016565b600a556008546040805189815260208101899052670de0b6b3a7640000909204828201524260608301525133917fafd310387603da0dcf44f11f54b04254b548c58b194e75f85851e849f0eef307919081900360800190a250505050505050565b336000908152600b602052604081206001015490811115610f9d57610f9d81610caa565b610fa561075a565b50565b600a54610fbb903463ffffffff6115f016565b600a5560408051348152426020820152815133927f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec928290030190a2565b60008060008060008061100b336105e8565b955060008611611065576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b336000908152600b60205260409020600481015490955061108c908763ffffffff6116d116565b600486015560408051808201909152600054815260015460208201526110b8908763ffffffff6112cb16565b909450925083151561113a576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8454600160a060020a0316156111e1578454611162903390600160a060020a0316868961131e565b93508315156111e1576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6111ea836113f9565b909250905081151561126c576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600881905561127b3383611520565b600a5461128e908563ffffffff6115f016565b600a5560085433907f1abe689c7914cafd54f789eb0851e90cba235302161e81e259ee4c357c374d829088908590670de0b6b3a7640000906105bc565b6000808215156112e057506000905080611317565b602084015184516112f890859063ffffffff61165816565b81151561130157fe5b049150611314838363ffffffff61178b16565b90505b9250929050565b600160a060020a0383166000908152600b60205260408120600181015482908190678ac7230489e80000116113ea576040805180820190915260065481526007546020820152611374908763ffffffff6112cb16565b6003850154919350915061138e908363ffffffff6115f016565b6003840155604080518681526020810184905242818301529051600160a060020a03808a1692908b16917f870e4e1dcfab6c09707448d3659b3d8097c084bf06e7467d6029940cd7122ee09181900360600190a38093506113ee565b8593505b505050949350505050565b6000806000806000806114346b204fce5e3e25026110000000611428600260085461165890919063ffffffff16565b9063ffffffff61178b16565b935061148c611470670de0b6b3a76400006114648a816b204fce5e3e25026110000000600863ffffffff61165816565b9063ffffffff61165816565b611480868063ffffffff61165816565b9063ffffffff6115f016565b92506114ab6b204fce5e3e25026110000000600263ffffffff61165816565b6114c4670de0b6b3a764000061146487611428886119bb565b8115156114cd57fe5b049150611512670de0b6b3a76400006114f86b204fce5e3e250261100000008563ffffffff61165816565b81151561150157fe5b60085491900463ffffffff6115f016565b919791965090945050505050565b600160a060020a0382166000908152600b6020526040812060095490911080156115775760095461156961155a828663ffffffff6115f016565b600a549063ffffffff61165816565b81151561157257fe5b04600a555b60095461158a908463ffffffff6115f016565b60095560018201546115a2908463ffffffff6115f016565b600183015580156115ea576115e46009546115c8600a548661165890919063ffffffff16565b8115156115d157fe5b600485015491900463ffffffff6116d116565b60048301555b50505050565b60008282018381101561164d576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b8091505b5092915050565b60008083151561166b5760009150611651565b5082820282848281151561167b57fe5b041461164d576040805160e560020a62461bcd02815260206004820152600a60248201527f6d756c206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008282018381121561164d576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008183038381131561164d576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000828211156117e5576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b50900390565b60008060008060006118146b204fce5e3e2502611000000060085461178b90919063ffffffff16565b9250611864670de0b6b3a764000061183e6b204fce5e3e250261100000008963ffffffff61165816565b81151561184757fe5b04611428856b204fce5e3e2502611000000063ffffffff6115f016565b915061187f670de0b6b3a7640000600263ffffffff61165816565b61189387611464868663ffffffff6115f016565b81151561189c57fe5b670de0b6b3a76400009190040496919550909350505050565b600160a060020a0382166000908152600b60205260408120600954909190831415611901576009546001830154600a546118f49163ffffffff61165816565b8115156118fd57fe5b0490505b60095461191761155a828663ffffffff61178b16565b81151561192057fe5b04600a55600954611937908463ffffffff61178b16565b600955600182015461194f908463ffffffff61178b16565b6001830155600954600010156119a05761199660095461197a600a548661165890919063ffffffff16565b81151561198357fe5b600485015491900463ffffffff61172e16565b60048301556115ea565b80156115ea5760048201546115e4908263ffffffff61172e16565b60008060026119cb8460016115f0565b8115156119d457fe5b0490508291505b81811015611a0e5780915060026119fd82858115156119f657fe5b04836115f0565b811515611a0657fe5b0490506119db565b50919050565b60a0604051908101604052806000600160a060020a031681526020016000815260200160008152602001600081526020016000815250905600a165627a7a723058208bfca6b637ee894d59a4a2e161ca0a02f9d50a42d56365ef0c2e0f0c2ca787590029
Contract_Creation_Code_ARM:



Contract Adress: 0x91010307773dbf725a34c4dab6834b9efe452600
Contract Name: BthhjToken
Contract_Source_Code: 
pragma solidity ^0.4.16;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
contract TokenERC20 {
    // Public variables of the token
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    // 18 decimals is the strongly suggested default, avoid changing it
    uint256 public totalSupply;
    // This creates an array with all balances
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    // This generates a public event on the blockchain that will notify clients
    event Transfer(address indexed from, address indexed to, uint256 value);
    // This notifies clients about the amount burnt
    event Burn(address indexed from, uint256 value);
    /**
     * Constrctor function
     *
     * Initializes contract with initial supply tokens to the creator of the contract
     */
    function TokenERC20(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
    /**
     * Internal transfer, only can be called by this contract
     */
    function _transfer(address _from, address _to, uint _value) internal {
        // Prevent transfer to 0x0 address. Use burn() instead
        require(_to != 0x0);
        // Check if the sender has enough
        require(balanceOf[_from] >= _value);
        // Check for overflows
        require(balanceOf[_to] + _value > balanceOf[_to]);
        // Save this for an assertion in the future
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        // Subtract from the sender
        balanceOf[_from] -= _value;
        // Add the same to the recipient
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        // Asserts are used to use static analysis to find bugs in your code. They should never fail
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    /**
     * Transfer tokens
     *
     * Send `_value` tokens to `_to` from your account
     *
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }
    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     // Check allowance
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    /**
     * Set allowance for other address
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    /**
     * Set allowance for other address and notify
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    /**
     * Destroy tokens
     *
     * Remove `_value` tokens from the system irreversibly
     *
     * @param _value the amount of money to burn
     */
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
        balanceOf[msg.sender] -= _value;            // Subtract from the sender
        totalSupply -= _value;                      // Updates totalSupply
        Burn(msg.sender, _value);
        return true;
    }
    /**
     * Destroy tokens from other account
     *
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
     *
     * @param _from the address of the sender
     * @param _value the amount of money to burn
     */
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
        require(_value <= allowance[_from][msg.sender]);    // Check allowance
        balanceOf[_from] -= _value;                         // Subtract from the targeted balance
        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
        totalSupply -= _value;                              // Update totalSupply
        Burn(_from, _value);
        return true;
    }
}
/******************************************/
/*       ADVANCED TOKEN STARTS HERE       */
/******************************************/
contract BthhjToken is TokenERC20 {
    /* Initializes contract with initial supply tokens to the creator of the contract */
    function BthhjToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60806040526002805460ff1916601217905534801561001d57600080fd5b506040516109cf3803806109cf83398101604090815281516020808401518385015160025460ff16600a0a84026003819055336000908152600485529586205590850180519395909491019285928592859261007b9285019061009b565b50805161008f90600190602084019061009b565b50505050505050610136565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100dc57805160ff1916838001178555610109565b82800160010185558215610109579182015b828111156101095782518255916020019190600101906100ee565b50610115929150610119565b5090565b61013391905b80821115610115576000815560010161011f565b90565b61088a806101456000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806342966c68146101fc57806370a082311461021457806379cc67901461023557806395d89b4114610259578063a9059cbb1461026e578063cae9ca5114610294578063dd62ed3e146102fd575b600080fd5b3480156100ca57600080fd5b506100d3610324565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a03600435166024356103b2565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103df565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103e5565b3480156101dd57600080fd5b506101e6610454565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061016c60043561045d565b34801561022057600080fd5b50610195600160a060020a03600435166104d5565b34801561024157600080fd5b5061016c600160a060020a03600435166024356104e7565b34801561026557600080fd5b506100d36105b8565b34801561027a57600080fd5b50610292600160a060020a0360043516602435610612565b005b3480156102a057600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261016c948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506106219650505050505050565b34801561030957600080fd5b50610195600160a060020a036004358116906024351661073a565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b505050505081565b336000908152600560209081526040808320600160a060020a039590951683529390529190912055600190565b60035481565b600160a060020a038316600090815260056020908152604080832033845290915281205482111561041557600080fd5b600160a060020a038416600090815260056020908152604080832033845290915290208054839003905561044a848484610757565b5060019392505050565b60025460ff1681565b3360009081526004602052604081205482111561047957600080fd5b3360008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600160a060020a03821660009081526004602052604081205482111561050c57600080fd5b600160a060020a038316600090815260056020908152604080832033845290915290205482111561053c57600080fd5b600160a060020a0383166000818152600460209081526040808320805487900390556005825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103aa5780601f1061037f576101008083540402835291602001916103aa565b61061d338383610757565b5050565b60008361062e81856103b2565b15610732576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156106c65781810151838201526020016106ae565b50505050905090810190601f1680156106f35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b50505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a038316151561076e57600080fd5b600160a060020a03841660009081526004602052604090205482111561079357600080fd5b600160a060020a038316600090815260046020526040902054828101116107b957600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a0380841660009081526004602052604080822054928716825290205401811461085857fe5b505050505600a165627a7a72305820f7b7ecd37947e9aa75a051ccad69794131d62de3596e67c92b353740018b47ff00290000000000000000000000000000000000000000000000000000000001312d00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005425448484a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005425448484a000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0xf342e74b452652b95f902f7d247ca9b4dd70a5a7
Contract Name: ElfiToken
Contract_Source_Code: 
pragma solidity ^0.4.24;
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
contract ElfiToken {
    mapping(address => uint256) public balances;
    mapping(address => mapping (address => uint256)) public allowed;
    using SafeMath for uint256;
    address public owner;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 private constant MAX_UINT256 = 2**256 -1 ;
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    bool lock = false;
    constructor(
        uint256 _initialAmount,
        string _tokenName,
        uint8 _decimalUnits,
        string _tokenSymbol
    ) public {
        owner = msg.sender;
        balances[msg.sender] = _initialAmount;
        totalSupply = _initialAmount;
        name = _tokenName;
        decimals = _decimalUnits;
        symbol = _tokenSymbol;
    }
	modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    modifier isLock {
        require(!lock);
        _;
    }
    function setLock(bool _lock) onlyOwner public{
        lock = _lock;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
    function transfer(
        address _to,
        uint256 _value
    ) public returns (bool) {
        require(balances[msg.sender] >= _value);
        require(msg.sender == _to || balances[_to] <= MAX_UINT256 - _value);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool) {
        uint256 allowance = allowed[_from][msg.sender];
        require(balances[_from] >= _value);
        require(_from == _to || balances[_to] <= MAX_UINT256 -_value);
        require(allowance >= _value);
        balances[_from] -= _value;
        balances[_to] += _value;
        if (allowance < MAX_UINT256) {
            allowed[_from][msg.sender] -= _value;
        }
        emit Transfer(_from, _to, _value);
        return true;
    }
    function balanceOf(
        address _owner
    ) public view returns (uint256) {
        return balances[_owner];
    }
    function approve(
        address _spender,
        uint256 _value
    ) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(
        address _owner,
        address _spender
    ) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_lock","type":"bool"}],"name":"setLock","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_initialAmount","type":"uint256"},{"name":"_tokenName","type":"string"},{"name":"_decimalUnits","type":"uint8"},{"name":"_tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526007805460ff1916905534801561001a57600080fd5b50604051610942380380610942833981016040908152815160208084015183850151606086015160028054600160a060020a0319163390811790915560009081528085529590952084905560068490559085018051939590949193910191610087916003918601906100b4565b506005805460ff191660ff841617905580516100aa9060049060208401906100b4565b505050505061014f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f557805160ff1916838001178555610122565b82800160010185558215610122579182015b82811115610122578251825591602001919060010190610107565b5061012e929150610132565b5090565b61014c91905b8082111561012e5760008155600101610138565b90565b6107e48061015e6000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd57806327e235e3146101e7578063313ce567146102085780635c65816514610233578063619d51941461025a57806370a08231146102765780638da5cb5b1461029757806395d89b41146102c8578063a9059cbb146102dd578063dd62ed3e14610301578063f2fde38b14610328575b600080fd5b3480156100e057600080fd5b506100e9610349565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a03600435166024356103d7565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab61043d565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610443565b3480156101f357600080fd5b506101ab600160a060020a036004351661058d565b34801561021457600080fd5b5061021d61059f565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b506101ab600160a060020a03600435811690602435166105a8565b34801561026657600080fd5b5061027460043515156105c5565b005b34801561028257600080fd5b506101ab600160a060020a03600435166105ef565b3480156102a357600080fd5b506102ac61060a565b60408051600160a060020a039092168252519081900360200190f35b3480156102d457600080fd5b506100e9610619565b3480156102e957600080fd5b50610182600160a060020a0360043516602435610674565b34801561030d57600080fd5b506101ab600160a060020a036004358116906024351661073b565b34801561033457600080fd5b50610274600160a060020a0360043516610766565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b505050505081565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60065481565b600160a060020a03831660008181526001602090815260408083203384528252808320549383529082905281205490919083111561048057600080fd5b83600160a060020a031685600160a060020a031614806104bd5750600160a060020a03841660009081526020819052604090205460001984900310155b15156104c857600080fd5b828110156104d557600080fd5b600160a060020a038086166000908152602081905260408082208054879003905591861681522080548401905560001981101561053757600160a060020a03851660009081526001602090815260408083203384529091529020805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3506001949350505050565b60006020819052908152604090205481565b60055460ff1681565b600160209081526000928352604080842090915290825290205481565b600254600160a060020a031633146105dc57600080fd5b6007805460ff1916911515919091179055565b600160a060020a031660009081526020819052604090205490565b600254600160a060020a031681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cf5780601f106103a4576101008083540402835291602001916103cf565b3360009081526020819052604081205482111561069057600080fd5b33600160a060020a03841614806106c45750600160a060020a03831660009081526020819052604090205460001983900310155b15156106cf57600080fd5b3360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600254600160a060020a0316331461077d57600080fd5b600160a060020a038116156107b5576002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b505600a165627a7a7230582087df5a83bbfe199647d0a51bb19f0271b4b7fdd92d79aecea7891ed6bd1074a100290000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a456c666920546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454c464900000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0x74758acfce059f503a7e6b0fc2c8737600f9f2c4
Contract Name: TokenTransferProxy
Contract_Source_Code: 
pragma solidity 0.4.25;
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 {
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
  function allowance(address _owner, address _spender)
    public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
  function approve(address _spender, uint256 _value)
    public returns (bool);
  function transferFrom(address _from, address _to, uint256 _value)
    public returns (bool);
  function decimals() public view returns (uint256);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
library ERC20SafeTransfer {
    function safeTransfer(address _tokenAddress, address _to, uint256 _value) internal returns (bool success) {
        require(_tokenAddress.call(bytes4(keccak256("transfer(address,uint256)")), _to, _value));
        return fetchReturnData();
    }
    function safeTransferFrom(address _tokenAddress, address _from, address _to, uint256 _value) internal returns (bool success) {
        require(_tokenAddress.call(bytes4(keccak256("transferFrom(address,address,uint256)")), _from, _to, _value));
        return fetchReturnData();
    }
    function safeApprove(address _tokenAddress, address _spender, uint256 _value) internal returns (bool success) {
        require(_tokenAddress.call(bytes4(keccak256("approve(address,uint256)")), _spender, _value));
        return fetchReturnData();
    }
    function fetchReturnData() internal returns (bool success){
        assembly {
            switch returndatasize()
            case 0 {
                success := 1
            }
            case 32 {
                returndatacopy(0, 0, 32)
                success := mload(0)
            }
            default {
                revert(0, 0)
            }
        }
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;
  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}
/*
  Copyright 2018 ZeroEx Intl.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
/// @title TokenTransferProxy - Transfers tokens on behalf of contracts that have been approved via decentralized governance.
/// @author Amir Bandeali - <
Contract_ABI:
[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"authorities","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"authorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAuthorizedAddresses","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"target","type":"address"},{"indexed":true,"name":"caller","type":"address"}],"name":"LogAuthorizedAddressAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"target","type":"address"},{"indexed":true,"name":"caller","type":"address"}],"name":"LogAuthorizedAddressRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:
608060405260008054600160a060020a0319163317905561094e806100256000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166315dacbea811461009d57806342f1181e146100ee578063494503d41461011e578063707129391461015f578063715018a61461018d5780638da5cb5b146101a2578063b9181611146101b7578063d39de6e9146101e5578063f2fde38b1461024a575b600080fd5b3480156100a957600080fd5b506100da73ffffffffffffffffffffffffffffffffffffffff60043581169060243581169060443516606435610278565b604080519115158252519081900360200190f35b3480156100fa57600080fd5b5061011c73ffffffffffffffffffffffffffffffffffffffff600435166102b8565b005b34801561012a57600080fd5b506101366004356103ba565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561016b57600080fd5b5061011c73ffffffffffffffffffffffffffffffffffffffff600435166103ef565b34801561019957600080fd5b5061011c6105c6565b3480156101ae57600080fd5b5061013661064c565b3480156101c357600080fd5b506100da73ffffffffffffffffffffffffffffffffffffffff60043516610668565b3480156101f157600080fd5b506101fa61067d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023657818101518382015260200161021e565b505050509050019250505060405180910390f35b34801561025657600080fd5b5061011c73ffffffffffffffffffffffffffffffffffffffff600435166106ed565b3360009081526001602052604081205460ff16151561029657600080fd5b6102a28585858561071d565b15156102ad57600080fd5b506001949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102dc57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902054819060ff161561031157600080fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805473ffffffffffffffffffffffffffffffffffffffff191684179055513392917f94bb87f4c15c4587ff559a7584006fa01ddf9299359be6b512b94527aa961aca91a35050565b60028054829081106103c857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461041457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054829060ff16151561044a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120805460ff1916905591505b60025482101561057e578273ffffffffffffffffffffffffffffffffffffffff166002838154811015156104aa57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610573576002805460001981019081106104e457fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216918490811061051757fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff9290921691909117905560028054600019019061056d90826108df565b5061057e565b60019091019061047a565b604051339073ffffffffffffffffffffffffffffffffffffffff8516907ff5b347a1e40749dd050f5f07fbdbeb7e3efa9756903044dd29401fd1d4bb4a1c90600090a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ea57600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60016020526000908152604090205460ff1681565b606060028054806020026020016040519081016040528092919081815260200182805480156106e257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116106b7575b505050505090505b90565b60005473ffffffffffffffffffffffffffffffffffffffff16331461071157600080fd5b61071a8161080c565b50565b604080517f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81527f74323536290000000000000000000000000000000000000000000000000000006020820152815190819003602501812063ffffffff7c010000000000000000000000000000000000000000000000000000000091829004908116909102825273ffffffffffffffffffffffffffffffffffffffff868116600484015285811660248401526044830185905292516000938816926064808201928692909190829003018183875af19250505015156107fb57600080fd5b6108036108b0565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116151561082e57600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60003d80156108c657602081146108cf57600080fd5b600191506108db565b60206000803e60005191505b5090565b81548183558181111561090357600083815260209020610903918101908301610908565b505050565b6106ea91905b808211156108db576000815560010161090e5600a165627a7a72305820f5bd2f2a71ccfe1c41a6ef6dfacfb888911b01ee2817c68a5a885443e2aafe810029
Contract_Creation_Code_ARM:



Contract Adress: 0xa94c4f27189c4760a5489cbab72acd1f9fa44379
Contract Name: JSPcoin
Contract_Source_Code: 
pragma solidity ^0.4.24;
// ----------------------------------------------------------------------------
// 'JSP' token contract
//
// Deployed to : 0x3Acd29e955c92f1aa37FcF9561d569674a3AD47E
// Symbol      : JSP
// Name        : JSPcoin
// Total supply: 100000000
// Decimals    : 18
//
// Enjoy.
//
// (c) by Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Safe maths
// ----------------------------------------------------------------------------
contract SafeMath {
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}
// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
// ----------------------------------------------------------------------------
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// Borrowed from MiniMeToken
// ----------------------------------------------------------------------------
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
    address public owner;
    address public newOwner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}
// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and assisted
// token transfers
// ----------------------------------------------------------------------------
contract JSPcoin is ERC20Interface, Owned, SafeMath {
    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor(JSPcoin) public {
        symbol = "JSP";
        name = "JSPcoin";
        decimals = 18;
        _totalSupply = 100000000000000000000000000;
        balances[0x3Acd29e955c92f1aa37FcF9561d569674a3AD47E] = _totalSupply;
        emit Transfer(address(0), 0x3Acd29e955c92f1aa37FcF9561d569674a3AD47E, _totalSupply);
    }
    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }
    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account
    // 
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the from account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeSub","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeDiv","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"},{"name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeMul","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferAnyERC20Token","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeAdd","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040523480156200001157600080fd5b506040516020806200196a83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f4a5350000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000c29291906200021c565b506040805190810160405280600781526020017f4a5350636f696e0000000000000000000000000000000000000000000000000081525060039080519060200190620001109291906200021c565b506012600460006101000a81548160ff021916908360ff1602179055506a52b7d2dcc80cd2e400000060058190555060055460066000733acd29e955c92f1aa37fcf9561d569674a3ad47e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550733acd29e955c92f1aa37fcf9561d569674a3ad47e73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a350620002cb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025f57805160ff191683800117855562000290565b8280016001018555821562000290579182015b828111156200028f57825182559160200191906001019062000272565b5b5090506200029f9190620002a3565b5090565b620002c891905b80821115620002c4576000816000905550600101620002aa565b5090565b90565b61168f80620002db6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd1461020c57806323b872dd14610237578063313ce567146102bc5780633eaaf86b146102ed57806370a082311461031857806379ba50971461036f5780638da5cb5b1461038657806395d89b41146103dd578063a293d1e81461046d578063a9059cbb146104b8578063b5931f7c1461051d578063cae9ca5114610568578063d05c78da14610613578063d4ee1d901461065e578063dc39d06d146106b5578063dd62ed3e1461071a578063e6cb901314610791578063f2fde38b146107dc575b600080fd5b34801561012357600080fd5b5061012c61081f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108bd565b604051808215151515815260200191505060405180910390f35b34801561021857600080fd5b506102216109af565b6040518082815260200191505060405180910390f35b34801561024357600080fd5b506102a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109fa565b604051808215151515815260200191505060405180910390f35b3480156102c857600080fd5b506102d1610c8a565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102f957600080fd5b50610302610c9d565b6040518082815260200191505060405180910390f35b34801561032457600080fd5b50610359600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ca3565b6040518082815260200191505060405180910390f35b34801561037b57600080fd5b50610384610cec565b005b34801561039257600080fd5b5061039b610e8b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e957600080fd5b506103f2610eb0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610432578082015181840152602081019050610417565b50505050905090810190601f16801561045f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047957600080fd5b506104a26004803603810190808035906020019092919080359060200190929190505050610f4e565b6040518082815260200191505060405180910390f35b3480156104c457600080fd5b50610503600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6a565b604051808215151515815260200191505060405180910390f35b34801561052957600080fd5b5061055260048036038101908080359060200190929190803590602001909291905050506110f3565b6040518082815260200191505060405180910390f35b34801561057457600080fd5b506105f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611117565b604051808215151515815260200191505060405180910390f35b34801561061f57600080fd5b506106486004803603810190808035906020019092919080359060200190929190505050611366565b6040518082815260200191505060405180910390f35b34801561066a57600080fd5b50610673611397565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106c157600080fd5b50610700600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113bd565b604051808215151515815260200191505060405180910390f35b34801561072657600080fd5b5061077b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611521565b6040518082815260200191505060405180910390f35b34801561079d57600080fd5b506107c660048036038101908080359060200190929190803590602001909291905050506115a8565b6040518082815260200191505060405180910390f35b3480156107e857600080fd5b5061081d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115c4565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108b55780601f1061088a576101008083540402835291602001916108b5565b820191906000526020600020905b81548152906001019060200180831161089857829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600660008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460055403905090565b6000610a45600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f4e565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0e600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f4e565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bd7600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836115a8565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600460009054906101000a900460ff1681565b60055481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f465780601f10610f1b57610100808354040283529160200191610f46565b820191906000526020600020905b815481529060010190602001808311610f2957829003601f168201915b505050505081565b6000828211151515610f5f57600080fd5b818303905092915050565b6000610fb5600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f4e565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611041600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836115a8565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808211151561110357600080fd5b818381151561110e57fe5b04905092915050565b600082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112f45780820151818401526020810190506112d9565b50505050905090810190601f1680156113215780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b50505050600190509392505050565b600081830290506000831480611386575081838281151561138357fe5b04145b151561139157600080fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141a57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156114de57600080fd5b505af11580156114f2573d6000803e3d6000fd5b505050506040513d602081101561150857600080fd5b8101908080519060200190929190505050905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081830190508281101515156115be57600080fd5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820917b6db34f48d5a15d20d445fc27ec9e6dc07b678c70172620efbd794ccd130d0029
Contract_Creation_Code_ARM:



Contract Adress: 0xb72816d00fd5afd8cc40423b6b078cdbef999416
Contract Name: Network51
Contract_Source_Code: 
/*! Net51.sol | (c) 2018 Develop by Network 51 LLC (proxchain.tech), author @proxchain | License: MIT */
pragma solidity 0.4.25;
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns(uint256) {
        if(a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns(uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns(uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    function add(uint256 a, uint256 b) internal pure returns(uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns(uint256) {
        require(b != 0);
        return a % b;
    }
}
contract Network51 {
    using SafeMath for uint;
    struct Investor {
        uint invested;
        uint payouts;
        uint first_invest;
        uint last_payout;
        address referrer;
    }
    uint constant public COMMISSION = 10;
    uint constant public DEVFEE = 1000;
    uint constant public WITHDRAW = 80;
    uint constant public REFBONUS = 5;
    uint constant public CASHBACK = 5;
    uint constant public MULTIPLICATION = 2;
    address public beneficiary = 0xd17a5265f8719ea5B01E084Aef3d4D58f452Ca18;
    mapping(address => Investor) public investors;
    event AddInvestor(address indexed holder);
    event Payout(address indexed holder, uint amount);
    event Deposit(address indexed holder, uint amount, address referrer);
    event RefBonus(address indexed from, address indexed to, uint amount);
    event CashBack(address indexed holder, uint amount);
    event Withdraw(address indexed holder, uint amount);
    function bonusSize() view public returns(uint) {
        uint b = address(this).balance;
        if(b >= 20500 ether) return 5;
        if(b >= 20400 ether) return 2;
        if(b >= 20300 ether) return 3;
        if(b >= 20200 ether) return 0;
        if(b >= 20100 ether) return 5;
        if(b >= 20000 ether) return 3;
        if(b >= 19900 ether) return 1;
        if(b >= 19800 ether) return 3;
        if(b >= 19700 ether) return 5;
        if(b >= 19600 ether) return 3;
        if(b >= 19500 ether) return 4;
        if(b >= 19400 ether) return 2;
        if(b >= 19300 ether) return 3;
        if(b >= 19200 ether) return 0;
        if(b >= 19100 ether) return 5;
        if(b >= 19000 ether) return 3;
        if(b >= 18900 ether) return 1;
        if(b >= 18800 ether) return 3;
        if(b >= 18700 ether) return 5;
        if(b >= 18600 ether) return 7;
        if(b >= 18500 ether) return 6;
        if(b >= 18400 ether) return 2;
        if(b >= 18300 ether) return 3;
        if(b >= 18200 ether) return 1;
        if(b >= 18100 ether) return 5;
        if(b >= 18000 ether) return 3;
        if(b >= 17900 ether) return 1;
        if(b >= 17800 ether) return 3;
        if(b >= 17700 ether) return 5;
        if(b >= 17600 ether) return 5;
        if(b >= 17500 ether) return 4;
        if(b >= 17400 ether) return 2;
        if(b >= 17300 ether) return 3;
        if(b >= 17200 ether) return 0;
        if(b >= 17100 ether) return 5;
        if(b >= 17000 ether) return 3;
        if(b >= 16900 ether) return 1;
        if(b >= 16800 ether) return 3;
        if(b >= 16700 ether) return 5;
        if(b >= 16600 ether) return 4;
        if(b >= 16500 ether) return 5;
        if(b >= 16400 ether) return 2;
        if(b >= 16300 ether) return 3;
        if(b >= 16200 ether) return 0;
        if(b >= 16100 ether) return 5;
        if(b >= 16000 ether) return 3;
        if(b >= 15900 ether) return 1;
        if(b >= 15800 ether) return 3;
        if(b >= 15700 ether) return 5;
        if(b >= 15600 ether) return 4;
        if(b >= 15500 ether) return 6;
        if(b >= 15400 ether) return 2;
        if(b >= 15300 ether) return 3;
        if(b >= 15200 ether) return 3;
        if(b >= 15100 ether) return 5;
        if(b >= 15000 ether) return 3;
        if(b >= 14900 ether) return 1;
        if(b >= 14800 ether) return 3;
        if(b >= 14700 ether) return 4;
        if(b >= 14600 ether) return 5;
        if(b >= 14500 ether) return 7;
        if(b >= 14400 ether) return 2;
        if(b >= 14300 ether) return 3;
        if(b >= 14200 ether) return 1;
        if(b >= 14100 ether) return 5;
        if(b >= 14000 ether) return 3;
        if(b >= 13900 ether) return 1;
        if(b >= 13800 ether) return 3;
        if(b >= 13700 ether) return 6;
        if(b >= 13600 ether) return 5;
        if(b >= 13500 ether) return 6;
        if(b >= 13400 ether) return 4;
        if(b >= 13300 ether) return 3;
        if(b >= 13200 ether) return 2;
        if(b >= 13100 ether) return 5;
        if(b >= 13000 ether) return 3;
        if(b >= 12900 ether) return 1;
        if(b >= 12800 ether) return 3;
        if(b >= 12700 ether) return 5;
        if(b >= 12600 ether) return 6;
        if(b >= 12500 ether) return 7;
        if(b >= 12400 ether) return 2;
        if(b >= 12300 ether) return 3;
        if(b >= 12200 ether) return 2;
        if(b >= 12100 ether) return 5;
        if(b >= 12000 ether) return 3;
        if(b >= 11900 ether) return 1;
        if(b >= 11800 ether) return 3;
        if(b >= 11700 ether) return 5;
        if(b >= 11600 ether) return 7;
        if(b >= 11500 ether) return 8;
        if(b >= 11400 ether) return 2;
        if(b >= 11300 ether) return 3;
        if(b >= 11200 ether) return 2;
        if(b >= 11100 ether) return 5;
        if(b >= 11000 ether) return 3;
        if(b >= 10900 ether) return 1;
        if(b >= 10800 ether) return 3;
        if(b >= 10700 ether) return 5;
        if(b >= 10600 ether) return 7;
        if(b >= 10500 ether) return 9;
        if(b >= 10400 ether) return 6;
        if(b >= 10300 ether) return 3;
        if(b >= 10200 ether) return 2;
        if(b >= 10100 ether) return 5;
        if(b >= 10000 ether) return 3;
        if(b >= 9900 ether) return 2;
        if(b >= 9800 ether) return 3;
        if(b >= 9700 ether) return 6;
        if(b >= 9600 ether) return 5;
        if(b >= 9500 ether) return 7;
        if(b >= 9400 ether) return 4;
        if(b >= 9300 ether) return 3;
        if(b >= 9200 ether) return 2;
        if(b >= 9100 ether) return 5;
        if(b >= 9000 ether) return 3;
        if(b >= 8900 ether) return 2;
        if(b >= 8800 ether) return 3;
        if(b >= 8700 ether) return 5;
        if(b >= 8600 ether) return 6;
        if(b >= 8500 ether) return 8;
        if(b >= 8400 ether) return 5;
        if(b >= 8300 ether) return 4;
        if(b >= 8200 ether) return 3;
        if(b >= 8100 ether) return 5;
        if(b >= 8000 ether) return 3;
        if(b >= 7900 ether) return 2;
        if(b >= 7800 ether) return 3;
        if(b >= 7700 ether) return 5;
        if(b >= 7600 ether) return 4;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 50000 ether) return 0;
        if(b >= 48000 ether) return 8;
        if(b >= 46000 ether) return 5;
        if(b >= 44000 ether) return 3;
        if(b >= 42000 ether) return 4;
        if(b >= 40000 ether) return 5;
        if(b >= 38000 ether) return 3;
        if(b >= 36000 ether) return 4;
        if(b >= 34000 ether) return 3;
        if(b >= 32000 ether) return 5;
        if(b >= 30000 ether) return 7;
        if(b >= 27000 ether) return 6;
        if(b >= 26000 ether) return 2;
        if(b >= 25000 ether) return 5;
        if(b >= 24000 ether) return 2;
        if(b >= 23000 ether) return 4;
        if(b >= 22000 ether) return 3;
        if(b >= 21000 ether) return 2;
        if(b >= 20000 ether) return 4;
        if(b >= 19000 ether) return 3;
        if(b >= 18000 ether) return 8;
        if(b >= 17500 ether) return 7;
        if(b >= 17000 ether) return 2;
        if(b >= 16500 ether) return 3;
        if(b >= 16000 ether) return 1;
        if(b >= 15500 ether) return 5;
        if(b >= 15000 ether) return 3;
        if(b >= 14500 ether) return 4;
        if(b >= 14000 ether) return 3;
        if(b >= 13500 ether) return 5;
        if(b >= 13000 ether) return 7;
        if(b >= 12500 ether) return 6;
        if(b >= 12250 ether) return 2;
        if(b >= 12000 ether) return 3;
        if(b >= 11750 ether) return 1;
        if(b >= 11500 ether) return 4;
        if(b >= 11250 ether) return 5;
        if(b >= 11000 ether) return 3;
        if(b >= 10750 ether) return 0;
        if(b >= 10500 ether) return 3;
        if(b >= 10250 ether) return 4;
        if(b >= 10000 ether) return 7;
        if(b >= 9950 ether) return 2;
        if(b >= 9900 ether) return 3;
        if(b >= 9850 ether) return 0;
        if(b >= 9800 ether) return 5;
        if(b >= 9750 ether) return 3;
        if(b >= 9450 ether) return 2;
        if(b >= 9400 ether) return 4;
        if(b >= 9100 ether) return 5;
        if(b >= 9050 ether) return 6;
        if(b >= 8750 ether) return 7;
        if(b >= 8700 ether) return 3;
        if(b >= 8500 ether) return 2;
        if(b >= 8450 ether) return 0;
        if(b >= 8250 ether) return 4;
        if(b >= 8200 ether) return 3;
        if(b >= 8000 ether) return 2;
        if(b >= 7950 ether) return 4;
        if(b >= 7750 ether) return 3;
        if(b >= 7700 ether) return 5;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 6000 ether) return 5;
        if(b >= 5970 ether) return 6;
        if(b >= 5940 ether) return 3;
        if(b >= 5910 ether) return 2;
        if(b >= 5880 ether) return 1;
        if(b >= 5850 ether) return 4;
        if(b >= 5820 ether) return 3;
        if(b >= 5790 ether) return 0;
        if(b >= 5760 ether) return 2;
        if(b >= 5730 ether) return 4;
        if(b >= 5700 ether) return 6;
        if(b >= 5650 ether) return 3;
        if(b >= 5600 ether) return 5;
        if(b >= 5550 ether) return 0;
        if(b >= 5500 ether) return 3;
        if(b >= 5450 ether) return 1;
        if(b >= 5400 ether) return 2;
        if(b >= 5350 ether) return 4;
        if(b >= 5300 ether) return 0;
        if(b >= 5250 ether) return 5;
        if(b >= 5200 ether) return 6;
        if(b >= 5180 ether) return 4;
        if(b >= 5160 ether) return 2;
        if(b >= 5140 ether) return 0;
        if(b >= 5120 ether) return 2;
        if(b >= 5100 ether) return 3;
        if(b >= 5080 ether) return 2;
        if(b >= 5060 ether) return 0;
        if(b >= 5040 ether) return 2;
        if(b >= 5020 ether) return 6;
        if(b >= 5000 ether) return 5;
        if(b >= 4950 ether) return 4;
        if(b >= 4900 ether) return 3;
        if(b >= 4850 ether) return 2;
        if(b >= 4800 ether) return 0;
        if(b >= 4750 ether) return 1;
        if(b >= 4700 ether) return 3;
        if(b >= 4650 ether) return 2;
        if(b >= 4600 ether) return 3;
        if(b >= 4550 ether) return 2;
        if(b >= 4500 ether) return 5;
        if(b >= 4300 ether) return 2;
        if(b >= 4100 ether) return 3;
        if(b >= 3900 ether) return 0;
        if(b >= 3700 ether) return 3;
        if(b >= 3500 ether) return 2;
        if(b >= 3300 ether) return 4;
        if(b >= 3100 ether) return 1;
        if(b >= 2900 ether) return 0;
        if(b >= 2700 ether) return 4;
        if(b >= 2500 ether) return 3;
        if(b >= 2400 ether) return 4;
        if(b >= 2300 ether) return 5;
        if(b >= 2200 ether) return 0;
        if(b >= 2100 ether) return 2;
        if(b >= 2000 ether) return 3;
        if(b >= 1900 ether) return 0;
        if(b >= 1800 ether) return 3;
        if(b >= 1700 ether) return 5;
        if(b >= 1600 ether) return 4;
        if(b >= 1500 ether) return 5;
        if(b >= 1450 ether) return 2;
        if(b >= 1400 ether) return 3;
        if(b >= 1350 ether) return 2;
        if(b >= 1300 ether) return 0;
        if(b >= 1250 ether) return 1;
        if(b >= 1200 ether) return 2;
        if(b >= 1150 ether) return 1;
        if(b >= 1100 ether) return 0;
        if(b >= 1050 ether) return 5;
        if(b >= 1000 ether) return 4;
        if(b >= 990 ether) return 1;
        if(b >= 980 ether) return 2;
        if(b >= 970 ether) return 0;
        if(b >= 960 ether) return 3;
        if(b >= 950 ether) return 1;
        if(b >= 940 ether) return 2;
        if(b >= 930 ether) return 1;
        if(b >= 920 ether) return 0;
        if(b >= 910 ether) return 2;
        if(b >= 900 ether) return 3;
        if(b >= 880 ether) return 2;
        if(b >= 860 ether) return 1;
        if(b >= 840 ether) return 0;
        if(b >= 820 ether) return 2;
        if(b >= 800 ether) return 3;
        if(b >= 780 ether) return 1;
        if(b >= 760 ether) return 0;
        if(b >= 740 ether) return 2;
        if(b >= 720 ether) return 3;
        if(b >= 700 ether) return 4;
        if(b >= 680 ether) return 1;
        if(b >= 660 ether) return 3;
        if(b >= 640 ether) return 2;
        if(b >= 620 ether) return 0;
        if(b >= 600 ether) return 3;
        if(b >= 580 ether) return 2;
        if(b >= 560 ether) return 1;
        if(b >= 540 ether) return 0;
        if(b >= 520 ether) return 2;
        if(b >= 500 ether) return 4;
        if(b >= 490 ether) return 1;
        if(b >= 480 ether) return 3;
        if(b >= 470 ether) return 0;
        if(b >= 460 ether) return 3;
        if(b >= 450 ether) return 1;
        if(b >= 440 ether) return 2;
        if(b >= 430 ether) return 1;
        if(b >= 420 ether) return 0;
        if(b >= 410 ether) return 2;
        if(b >= 400 ether) return 3;
        if(b >= 390 ether) return 2;
        if(b >= 380 ether) return 1;
        if(b >= 370 ether) return 0;
        if(b >= 360 ether) return 2;
        if(b >= 350 ether) return 3;
        if(b >= 340 ether) return 1;
        if(b >= 330 ether) return 0;
        if(b >= 320 ether) return 2;
        if(b >= 310 ether) return 1;
        if(b >= 300 ether) return 3;
        if(b >= 290 ether) return 1;
        if(b >= 280 ether) return 3;
        if(b >= 270 ether) return 2;
        if(b >= 260 ether) return 0;
        if(b >= 250 ether) return 1;
        if(b >= 240 ether) return 2;
        if(b >= 230 ether) return 1;
        if(b >= 220 ether) return 0;
        if(b >= 210 ether) return 1;
        if(b >= 200 ether) return 2;
        if(b >= 190 ether) return 1;
        if(b >= 180 ether) return 3;
        if(b >= 170 ether) return 0;
        if(b >= 160 ether) return 3;
        if(b >= 150 ether) return 1;
        if(b >= 140 ether) return 2;
        if(b >= 130 ether) return 1;
        if(b >= 120 ether) return 0;
        if(b >= 110 ether) return 2;
        if(b >= 100 ether) return 3;
        if(b >= 99 ether) return 2;
        if(b >= 98 ether) return 1;
        if(b >= 97 ether) return 0;
        if(b >= 96 ether) return 2;
        if(b >= 95 ether) return 3;
        if(b >= 94 ether) return 1;
        if(b >= 93 ether) return 0;
        if(b >= 92 ether) return 2;
        if(b >= 91 ether) return 3;
        if(b >= 90 ether) return 2;
        if(b >= 89 ether) return 1;
        if(b >= 88 ether) return 3;
        if(b >= 87 ether) return 2;
        if(b >= 86 ether) return 0;
        if(b >= 85 ether) return 1;
        if(b >= 84 ether) return 2;
        if(b >= 83 ether) return 1;
        if(b >= 82 ether) return 0;
        if(b >= 81 ether) return 1;
        if(b >= 80 ether) return 3;
        if(b >= 79 ether) return 1;
        if(b >= 78 ether) return 3;
        if(b >= 77 ether) return 2;
        if(b >= 76 ether) return 0;
        if(b >= 75 ether) return 1;
        if(b >= 74 ether) return 2;
        if(b >= 73 ether) return 1;
        if(b >= 72 ether) return 0;
        if(b >= 71 ether) return 1;
        if(b >= 70 ether) return 2;
        if(b >= 69 ether) return 1;
        if(b >= 68 ether) return 3;
        if(b >= 67 ether) return 0;
        if(b >= 66 ether) return 3;
        if(b >= 65 ether) return 1;
        if(b >= 64 ether) return 2;
        if(b >= 63 ether) return 1;
        if(b >= 62 ether) return 0;
        if(b >= 61 ether) return 2;
        if(b >= 60 ether) return 3;
        if(b >= 59 ether) return 1;
        if(b >= 58 ether) return 3;
        if(b >= 57 ether) return 2;
        if(b >= 56 ether) return 0;
        if(b >= 55 ether) return 1;
        if(b >= 54 ether) return 2;
        if(b >= 53 ether) return 1;
        if(b >= 52 ether) return 0;
        if(b >= 51 ether) return 2;
        if(b >= 50 ether) return 3;
        if(b >= 49 ether) return 2;
        if(b >= 48 ether) return 1;
        if(b >= 47 ether) return 0;
        if(b >= 46 ether) return 2;
        if(b >= 45 ether) return 3;
        if(b >= 44 ether) return 1;
        if(b >= 43 ether) return 0;
        if(b >= 42 ether) return 2;
        if(b >= 41 ether) return 1;
        if(b >= 40 ether) return 3;
        if(b >= 39 ether) return 1;
        if(b >= 38 ether) return 3;
        if(b >= 37 ether) return 2;
        if(b >= 36 ether) return 0;
        if(b >= 35 ether) return 1;
        if(b >= 34 ether) return 2;
        if(b >= 33 ether) return 1;
        if(b >= 32 ether) return 0;
        if(b >= 31 ether) return 1;
        if(b >= 30 ether) return 2;
        if(b >= 29 ether) return 1;
        if(b >= 28 ether) return 3;
        if(b >= 27 ether) return 0;
        if(b >= 26 ether) return 3;
        if(b >= 25 ether) return 1;
        if(b >= 24 ether) return 2;
        if(b >= 23 ether) return 1;
        if(b >= 22 ether) return 0;
        if(b >= 21 ether) return 2;
        if(b >= 20 ether) return 3;
        if(b >= 19 ether) return 2;
        if(b >= 18 ether) return 1;
        if(b >= 17 ether) return 0;
        if(b >= 16 ether) return 2;
        if(b >= 15 ether) return 3;
        if(b >= 14 ether) return 1;
        if(b >= 13 ether) return 0;
        if(b >= 12 ether) return 2;
        if(b >= 11 ether) return 1;
        if(b >= 10 ether) return 3;
        if(b >= 9 ether) return 1;
        if(b >= 8 ether) return 3;
        if(b >= 7 ether) return 2;
        if(b >= 6 ether) return 0;
        if(b >= 5 ether) return 1;
        if(b >= 4 ether) return 2;
        if(b >= 3 ether) return 1;
        if(b >= 2 ether) return 0;
        if(b >= 1 ether) return 2;
        return 1;
            }
    function payoutSize(address _to) view public returns(uint) {
        uint max = investors[_to].invested.mul(MULTIPLICATION);
        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;
        uint payout = investors[_to].invested.mul(bonusSize()).div(100).mul(block.timestamp.sub(investors[_to].last_payout)).div(1 days);
        return investors[_to].payouts.add(payout) > max ? max.sub(investors[_to].payouts) : payout;
    }
    function withdrawSize(address _to) view public returns(uint) {
        uint max = investors[_to].invested.div(100).mul(WITHDRAW);
        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;
        return max.sub(investors[_to].payouts);
    }
    function bytesToAddress(bytes bys) pure private returns(address addr) {
        assembly {
            addr := mload(add(bys, 20))
        }
    }
    function() payable external {
        if(investors[msg.sender].invested > 0) {
            uint payout = payoutSize(msg.sender);
            require(msg.value > 0 || payout > 0, "No payouts");
            if(payout > 0) {
                investors[msg.sender].last_payout = block.timestamp;
                investors[msg.sender].payouts = investors[msg.sender].payouts.add(payout);
                msg.sender.transfer(payout);
                emit Payout(msg.sender, payout);
            }
            if(investors[msg.sender].payouts >= investors[msg.sender].invested.mul(MULTIPLICATION)) {
                delete investors[msg.sender];
                emit Withdraw(msg.sender, 0);
            }
        }
        if(msg.value == 0.00000051 ether) {
            require(investors[msg.sender].invested > 0, "You have not invested anything yet");
            uint amount = withdrawSize(msg.sender);
            require(amount > 0, "You have nothing to withdraw");
            msg.sender.transfer(amount);
            beneficiary.transfer(msg.value.mul(DEVFEE).div(1));
            delete investors[msg.sender];
            emit Withdraw(msg.sender, amount);
        }
        else if(msg.value > 0) {
            require(msg.value >= 0.05 ether, "Minimum investment amount 0.05 ether");
            investors[msg.sender].last_payout = block.timestamp;
            investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);
            beneficiary.transfer(msg.value.mul(COMMISSION).div(100));
            if(investors[msg.sender].first_invest == 0) {
                investors[msg.sender].first_invest = block.timestamp;
                if(msg.data.length > 0) {
                    address ref = bytesToAddress(msg.data);
                    if(ref != msg.sender && investors[ref].invested > 0 && msg.value >= 1 ether) {
                        investors[msg.sender].referrer = ref;
                        uint ref_bonus = msg.value.mul(REFBONUS).div(100);
                        ref.transfer(ref_bonus);
                        emit RefBonus(msg.sender, ref, ref_bonus);
                        uint cashback_bonus = msg.value.mul(CASHBACK).div(100);
                        msg.sender.transfer(cashback_bonus);
                        emit CashBack(msg.sender, cashback_bonus);
                    }
                }
                emit AddInvestor(msg.sender);
            }
            emit Deposit(msg.sender, msg.value, investors[msg.sender].referrer);
        }
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"WITHDRAW","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"DEVFEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"bonusSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"REFBONUS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"beneficiary","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"COMMISSION","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_to","type":"address"}],"name":"withdrawSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CASHBACK","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"investors","outputs":[{"name":"invested","type":"uint256"},{"name":"payouts","type":"uint256"},{"name":"first_invest","type":"uint256"},{"name":"last_payout","type":"uint256"},{"name":"referrer","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MULTIPLICATION","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_to","type":"address"}],"name":"payoutSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"}],"name":"AddInvestor","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Payout","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"referrer","type":"address"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"RefBonus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"CashBack","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"}]
Contract_Creation_Code_16:
608060405260008054600160a060020a03191673d17a5265f8719ea5b01e084aef3d4d58f452ca1817905534801561003657600080fd5b506149fa806100466000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166316ba7197811461083f578063196744231461086657806319c5b8871461087b578063227c76781461089057806338af3eed146108a5578063562df3d5146108d65780635718b760146108eb5780636f78cb41146108905780636f7bc9be1461090c578063724e1b4214610961578063cd402c8e14610976575b3360009081526001602052604081205481908190819081908110156102a0576100d633610993565b945060003411806100e75750600085115b151561013d576040805160e560020a62461bcd02815260206004820152600a60248201527f4e6f207061796f75747300000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008511156101eb573360009081526001602081905260409091204260038201550154610170908663ffffffff610b0316565b336000818152600160208190526040808320909101939093559151909187156108fc02918891818181858888f193505050501580156101b3573d6000803e3d6000fd5b5060408051868152905133917f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a6919081900360200190a25b3360009081526001602052604090205461020c90600263ffffffff610b2016565b3360009081526001602081905260409091200154106102a05733600081815260016020818152604080842084815592830184905560028301849055600383018490556004909201805473ffffffffffffffffffffffffffffffffffffffff19169055815192835290517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649281900390910190a25b346476be5e6c0014156104a4573360009081526001602052604081205411610338576040805160e560020a62461bcd02815260206004820152602260248201527f596f752068617665206e6f7420696e76657374656420616e797468696e67207960448201527f6574000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61034133610b4e565b93506000841161039b576040805160e560020a62461bcd02815260206004820152601c60248201527f596f752068617665206e6f7468696e6720746f20776974686472617700000000604482015290519081900360640190fd5b604051339085156108fc029086906000818181858888f193505050501580156103c8573d6000803e3d6000fd5b50600054600160a060020a03166108fc6103fb60016103ef346103e863ffffffff610b2016565b9063ffffffff610c0a16565b6040518115909202916000818181858888f19350505050158015610423573d6000803e3d6000fd5b503360008181526001602081815260408084208481559283018490556002830184905560038301939093556004909101805473ffffffffffffffffffffffffffffffffffffffff19169055815187815291517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649281900390910190a2610838565b60003411156108385766b1a2bc2ec50000341015610531576040805160e560020a62461bcd028152602060048201526024808201527f4d696e696d756d20696e766573746d656e7420616d6f756e7420302e3035206560448201527f7468657200000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600090815260016020526040902042600382015554610557903463ffffffff610b0316565b3360009081526001602052604081209190915554600160a060020a03166108fc61058d60646103ef34600a63ffffffff610b2016565b6040518115909202916000818181858888f193505050501580156105b5573d6000803e3d6000fd5b503360009081526001602052604090206002015415156107dc57336000908152600160205260408120426002909101553611156107b0576106266000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c2d945050505050565b9250600160a060020a03831633148015906106575750600160a060020a038316600090815260016020526040812054115b801561066b5750670de0b6b3a76400003410155b156107b057336000908152600160205260409020600401805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556106b860646103ef346005610b20565b604051909250600160a060020a0384169083156108fc029084906000818181858888f193505050501580156106f1573d6000803e3d6000fd5b50604080518381529051600160a060020a0385169133917f328838ddfc48ad5ae5531b1ad95dfb22b42ff1866853e474375ffef2c63d8e509181900360200190a361074860646103ef34600563ffffffff610b2016565b604051909150339082156108fc029083906000818181858888f19350505050158015610778573d6000803e3d6000fd5b5060408051828152905133917f4615c4123931012254d1da78d05803534c985008f2421c8f2921db902fcc4955919081900360200190a25b60405133907f387d39bfed02fad21f9108b51f3ba7fc3880f84960908214bb7d9460e73116d590600090a25b33600081815260016020908152604091829020600401548251348152600160a060020a039091169181019190915281517fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f929181900390910190a25b5050505050005b34801561084b57600080fd5b50610854610c34565b60408051918252519081900360200190f35b34801561087257600080fd5b50610854610c39565b34801561088757600080fd5b50610854610c3f565b34801561089c57600080fd5b50610854614962565b3480156108b157600080fd5b506108ba614967565b60408051600160a060020a039092168252519081900360200190f35b3480156108e257600080fd5b50610854614976565b3480156108f757600080fd5b50610854600160a060020a0360043516610b4e565b34801561091857600080fd5b5061092d600160a060020a036004351661497b565b604080519586526020860194909452848401929092526060840152600160a060020a03166080830152519081900360a00190f35b34801561096d57600080fd5b506108546149b2565b34801561098257600080fd5b50610854600160a060020a03600435165b600160a060020a038116600090815260016020526040812054819081906109c190600263ffffffff610b2016565b600160a060020a0385166000908152600160205260409020549092501580610a055750600160a060020a038416600090815260016020819052604090912001548211155b15610a135760009250610afc565b600160a060020a038416600090815260016020526040902060030154610a8e9062015180906103ef90610a4d90429063ffffffff6149b716565b610a8260646103ef610a5d610c3f565b600160a060020a038c166000908152600160205260409020549063ffffffff610b2016565b9063ffffffff610b2016565b600160a060020a038516600090815260016020819052604090912001549091508290610ac0908363ffffffff610b0316565b11610acb5780610af9565b600160a060020a03841660009081526001602081905260409091200154610af990839063ffffffff6149b716565b92505b5050919050565b600082820183811015610b1557600080fd5b8091505b5092915050565b600080831515610b335760009150610b19565b50828202828482811515610b4357fe5b0414610b1557600080fd5b600160a060020a0381166000908152600160205260408120548190610b8190605090610a8290606463ffffffff610c0a16565b600160a060020a0384166000908152600160205260409020549091501580610bc55750600160a060020a038316600090815260016020819052604090912001548111155b15610bd35760009150610c04565b600160a060020a03831660009081526001602081905260409091200154610c0190829063ffffffff6149b716565b91505b50919050565b600080808311610c1957600080fd5b8284811515610c2457fe5b04949350505050565b6014015190565b605081565b6103e881565b600030316904574ea66a5853d000008110610c5d576005915061495e565b690451e2df0c2af0c000008110610c77576002915061495e565b69044c7717adfd8db000008110610c91576003915061495e565b6904470b504fd02aa000008110610cab576000915061495e565b6904419f88f1a2c79000008110610cc5576005915061495e565b69043c33c19375648000008110610cdf576003915061495e565b690436c7fa3548017000008110610cf9576001915061495e565b6904315c32d71a9e6000008110610d13576003915061495e565b69042bf06b78ed3b5000008110610d2d576005915061495e565b69042684a41abfd84000008110610d47576003915061495e565b69042118dcbc92753000008110610d61576004915061495e565b69041bad155e65122000008110610d7b576002915061495e565b690416414e0037af1000008110610d95576003915061495e565b690410d586a20a4c0000008110610daf576000915061495e565b69040b69bf43dce8f000008110610dc9576005915061495e565b690405fdf7e5af85e000008110610de3576003915061495e565b6904009230878222d000008110610dfd576001915061495e565b6903fb26692954bfc000008110610e17576003915061495e565b6903f5baa1cb275cb000008110610e31576005915061495e565b6903f04eda6cf9f9a000008110610e4b576007915061495e565b6903eae3130ecc969000008110610e65576006915061495e565b6903e5774bb09f338000008110610e7f576002915061495e565b6903e00b845271d07000008110610e99576003915061495e565b6903da9fbcf4446d6000008110610eb3576001915061495e565b6903d533f596170a5000008110610ecd576005915061495e565b6903cfc82e37e9a74000008110610ee7576003915061495e565b6903ca5c66d9bc443000008110610f01576001915061495e565b6903c4f09f7b8ee12000008110610f1b576003915061495e565b6903bf84d81d617e1000008110610f35576005915061495e565b6903ba1910bf341b0000008110610f4f576005915061495e565b6903b4ad496106b7f000008110610f69576004915061495e565b6903af418202d954e000008110610f83576002915061495e565b6903a9d5baa4abf1d000008110610f9d576003915061495e565b6903a469f3467e8ec000008110610fb7576000915061495e565b69039efe2be8512bb000008110610fd1576005915061495e565b69039992648a23c8a000008110610feb576003915061495e565b690394269d2bf6659000008110611005576001915061495e565b69038ebad5cdc902800000811061101f576003915061495e565b6903894f0e6f9b9f7000008110611039576005915061495e565b690383e347116e3c6000008110611053576004915061495e565b69037e777fb340d9500000811061106d576005915061495e565b6903790bb85513764000008110611087576002915061495e565b6903739ff0f6e61330000081106110a1576003915061495e565b69036e342998b8b020000081106110bb576000915061495e565b690368c8623a8b4d10000081106110d5576005915061495e565b6903635c9adc5dea00000081106110ef576003915061495e565b69035df0d37e3086f000008110611109576001915061495e565b690358850c200323e000008110611123576003915061495e565b6903531944c1d5c0d00000811061113d576005915061495e565b69034dad7d63a85dc000008110611157576004915061495e565b69034841b6057afab000008110611171576006915061495e565b690342d5eea74d97a00000811061118b576002915061495e565b69033d6a2749203490000081106111a5576003915061495e565b690337fe5feaf2d180000081106111bf576003915061495e565b69033292988cc56e70000081106111d9576005915061495e565b69032d26d12e980b60000081106111f3576003915061495e565b690327bb09d06aa8500000811061120d576001915061495e565b6903224f42723d454000008110611227576003915061495e565b69031ce37b140fe23000008110611241576004915061495e565b69031777b3b5e27f200000811061125b576005915061495e565b6903120bec57b51c1000008110611275576007915061495e565b69030ca024f987b9000000811061128f576002915061495e565b690307345d9b5a55f0000081106112a9576003915061495e565b690301c8963d2cf2e0000081106112c3576001915061495e565b6902fc5ccedeff8fd0000081106112dd576005915061495e565b6902f6f10780d22cc0000081106112f7576003915061495e565b6902f1854022a4c9b000008110611311576001915061495e565b6902ec1978c47766a00000811061132b576003915061495e565b6902e6adb1664a039000008110611345576006915061495e565b6902e141ea081ca0800000811061135f576005915061495e565b6902dbd622a9ef3d7000008110611379576006915061495e565b6902d66a5b4bc1da6000008110611393576004915061495e565b6902d0fe93ed947750000081106113ad576003915061495e565b6902cb92cc8f671440000081106113c7576002915061495e565b6902c627053139b130000081106113e1576005915061495e565b6902c0bb3dd30c4e20000081106113fb576003915061495e565b6902bb4f7674deeb1000008110611415576001915061495e565b6902b5e3af16b188000000811061142f576003915061495e565b6902b077e7b88424f000008110611449576005915061495e565b6902ab0c205a56c1e000008110611463576006915061495e565b6902a5a058fc295ed00000811061147d576007915061495e565b6902a034919dfbfbc000008110611497576002915061495e565b69029ac8ca3fce98b0000081106114b1576003915061495e565b6902955d02e1a135a0000081106114cb576002915061495e565b69028ff13b8373d290000081106114e5576005915061495e565b69028a857425466f80000081106114ff576003915061495e565b69028519acc7190c7000008110611519576001915061495e565b69027fade568eba96000008110611533576003915061495e565b69027a421e0abe46500000811061154d576005915061495e565b690274d656ac90e34000008110611567576007915061495e565b69026f6a8f4e63803000008110611581576008915061495e565b690269fec7f0361d200000811061159b576002915061495e565b69026493009208ba10000081106115b5576003915061495e565b69025f273933db5700000081106115cf576002915061495e565b690259bb71d5adf3f0000081106115e9576005915061495e565b6902544faa778090e000008110611603576003915061495e565b69024ee3e319532dd00000811061161d576001915061495e565b690249781bbb25cac000008110611637576003915061495e565b6902440c545cf867b000008110611651576005915061495e565b69023ea08cfecb04a00000811061166b576007915061495e565b69023934c5a09da19000008110611685576009915061495e565b690233c8fe42703e800000811061169f576006915061495e565b69022e5d36e442db70000081106116b9576003915061495e565b690228f16f86157860000081106116d3576002915061495e565b69022385a827e81550000081106116ed576005915061495e565b69021e19e0c9bab24000008110611707576003915061495e565b690218ae196b8d4f3000008110611721576002915061495e565b69021342520d5fec200000811061173b576003915061495e565b69020dd68aaf32891000008110611755576006915061495e565b6902086ac3510526000000811061176f576005915061495e565b690202fefbf2d7c2f000008110611789576007915061495e565b6901fd933494aa5fe0000081106117a3576004915061495e565b6901f8276d367cfcd0000081106117bd576003915061495e565b6901f2bba5d84f99c0000081106117d7576002915061495e565b6901ed4fde7a2236b0000081106117f1576005915061495e565b6901e7e4171bf4d3a00000811061180b576003915061495e565b6901e2784fbdc7709000008110611825576002915061495e565b6901dd0c885f9a0d800000811061183f576003915061495e565b6901d7a0c1016caa7000008110611859576005915061495e565b6901d234f9a33f476000008110611873576006915061495e565b6901ccc9324511e4500000811061188d576008915061495e565b6901c75d6ae6e48140000081106118a7576005915061495e565b6901c1f1a388b71e30000081106118c1576004915061495e565b6901bc85dc2a89bb20000081106118db576003915061495e565b6901b71a14cc5c5810000081106118f5576005915061495e565b6901b1ae4d6e2ef5000000811061190f576003915061495e565b6901ac4286100191f000008110611929576002915061495e565b6901a6d6beb1d42ee000008110611943576003915061495e565b6901a16af753a6cbd00000811061195d576005915061495e565b69019bff2ff57968c000008110611977576004915061495e565b6901969368974c05b000008110611991576007915061495e565b69019127a1391ea2a0000081106119ab576002915061495e565b69018bbbd9daf13f90000081106119c5576003915061495e565b69018650127cc3dc80000081106119df576000915061495e565b690180e44b1e967970000081106119f9576005915061495e565b69017b7883c069166000008110611a13576003915061495e565b6901760cbc623bb35000008110611a2d576001915061495e565b690170a0f5040e504000008110611a47576003915061495e565b69016b352da5e0ed3000008110611a61576005915061495e565b690165c96647b38a2000008110611a7b576007915061495e565b6901605d9ee986271000008110611a95576006915061495e565b69015da7bb3a6f758800008110611aaf576002915061495e565b69015af1d78b58c40000008110611ac9576001915061495e565b6901583bf3dc42127800008110611ae3576000915061495e565b69015586102d2b60f000008110611afd576004915061495e565b690152d02c7e14af6800008110611b17576003915061495e565b6901501a48cefdfde000008110611b31576002915061495e565b69014d64651fe74c5800008110611b4b576000915061495e565b69014aae8170d09ad000008110611b65576003915061495e565b690147f89dc1b9e94800008110611b7f576007915061495e565b6901969368974c05b000008110611b99576007915061495e565b69019127a1391ea2a000008110611bb3576002915061495e565b69018bbbd9daf13f9000008110611bcd576003915061495e565b69018650127cc3dc8000008110611be7576000915061495e565b690180e44b1e96797000008110611c01576005915061495e565b69017b7883c069166000008110611c1b576003915061495e565b6901760cbc623bb35000008110611c35576001915061495e565b690170a0f5040e504000008110611c4f576003915061495e565b69016b352da5e0ed3000008110611c69576005915061495e565b690165c96647b38a2000008110611c83576007915061495e565b6901605d9ee986271000008110611c9d576006915061495e565b69015da7bb3a6f758800008110611cb7576002915061495e565b69015af1d78b58c40000008110611cd1576001915061495e565b6901583bf3dc42127800008110611ceb576000915061495e565b69015586102d2b60f000008110611d05576004915061495e565b690152d02c7e14af6800008110611d1f576003915061495e565b6901501a48cefdfde000008110611d39576002915061495e565b69014d64651fe74c5800008110611d53576000915061495e565b69014aae8170d09ad000008110611d6d576003915061495e565b690147f89dc1b9e94800008110611d87576007915061495e565b6901969368974c05b000008110611da1576007915061495e565b69019127a1391ea2a000008110611dbb576002915061495e565b69018bbbd9daf13f9000008110611dd5576003915061495e565b69018650127cc3dc8000008110611def576000915061495e565b690180e44b1e96797000008110611e09576005915061495e565b69017b7883c069166000008110611e23576003915061495e565b6901760cbc623bb35000008110611e3d576001915061495e565b690170a0f5040e504000008110611e57576003915061495e565b69016b352da5e0ed3000008110611e71576005915061495e565b690165c96647b38a2000008110611e8b576007915061495e565b6901605d9ee986271000008110611ea5576006915061495e565b69015da7bb3a6f758800008110611ebf576002915061495e565b69015af1d78b58c40000008110611ed9576001915061495e565b6901583bf3dc42127800008110611ef3576000915061495e565b69015586102d2b60f000008110611f0d576004915061495e565b690152d02c7e14af6800008110611f27576003915061495e565b6901501a48cefdfde000008110611f41576002915061495e565b69014d64651fe74c5800008110611f5b576000915061495e565b69014aae8170d09ad000008110611f75576003915061495e565b690147f89dc1b9e94800008110611f8f576007915061495e565b6901969368974c05b000008110611fa9576007915061495e565b69019127a1391ea2a000008110611fc3576002915061495e565b69018bbbd9daf13f9000008110611fdd576003915061495e565b69018650127cc3dc8000008110611ff7576000915061495e565b690180e44b1e96797000008110612011576005915061495e565b69017b7883c06916600000811061202b576003915061495e565b6901760cbc623bb35000008110612045576001915061495e565b690170a0f5040e50400000811061205f576003915061495e565b69016b352da5e0ed3000008110612079576005915061495e565b690165c96647b38a2000008110612093576007915061495e565b6901605d9ee9862710000081106120ad576006915061495e565b69015da7bb3a6f7588000081106120c7576002915061495e565b69015af1d78b58c400000081106120e1576001915061495e565b6901583bf3dc421278000081106120fb576000915061495e565b69015586102d2b60f000008110612115576004915061495e565b690152d02c7e14af680000811061212f576003915061495e565b6901501a48cefdfde000008110612149576002915061495e565b69014d64651fe74c5800008110612163576000915061495e565b69014aae8170d09ad00000811061217d576003915061495e565b690147f89dc1b9e94800008110612197576007915061495e565b6901969368974c05b0000081106121b1576007915061495e565b69019127a1391ea2a0000081106121cb576002915061495e565b69018bbbd9daf13f90000081106121e5576003915061495e565b69018650127cc3dc80000081106121ff576000915061495e565b690180e44b1e96797000008110612219576005915061495e565b69017b7883c069166000008110612233576003915061495e565b6901760cbc623bb3500000811061224d576001915061495e565b690170a0f5040e504000008110612267576003915061495e565b69016b352da5e0ed3000008110612281576005915061495e565b690165c96647b38a200000811061229b576007915061495e565b6901605d9ee9862710000081106122b5576006915061495e565b69015da7bb3a6f7588000081106122cf576002915061495e565b69015af1d78b58c400000081106122e9576001915061495e565b6901583bf3dc42127800008110612303576000915061495e565b69015586102d2b60f00000811061231d576004915061495e565b690152d02c7e14af6800008110612337576003915061495e565b6901501a48cefdfde000008110612351576002915061495e565b69014d64651fe74c580000811061236b576000915061495e565b69014aae8170d09ad000008110612385576003915061495e565b690147f89dc1b9e9480000811061239f576007915061495e565b6901969368974c05b0000081106123b9576007915061495e565b69019127a1391ea2a0000081106123d3576002915061495e565b69018bbbd9daf13f90000081106123ed576003915061495e565b69018650127cc3dc8000008110612407576000915061495e565b690180e44b1e96797000008110612421576005915061495e565b69017b7883c06916600000811061243b576003915061495e565b6901760cbc623bb35000008110612455576001915061495e565b690170a0f5040e50400000811061246f576003915061495e565b69016b352da5e0ed3000008110612489576005915061495e565b690165c96647b38a20000081106124a3576007915061495e565b6901605d9ee9862710000081106124bd576006915061495e565b69015da7bb3a6f7588000081106124d7576002915061495e565b69015af1d78b58c400000081106124f1576001915061495e565b6901583bf3dc4212780000811061250b576000915061495e565b69015586102d2b60f000008110612525576004915061495e565b690152d02c7e14af680000811061253f576003915061495e565b6901501a48cefdfde000008110612559576002915061495e565b69014d64651fe74c5800008110612573576000915061495e565b69014aae8170d09ad00000811061258d576003915061495e565b690147f89dc1b9e948000081106125a7576007915061495e565b6901969368974c05b0000081106125c1576007915061495e565b69019127a1391ea2a0000081106125db576002915061495e565b69018bbbd9daf13f90000081106125f5576003915061495e565b69018650127cc3dc800000811061260f576000915061495e565b690180e44b1e96797000008110612629576005915061495e565b69017b7883c069166000008110612643576003915061495e565b6901760cbc623bb3500000811061265d576001915061495e565b690170a0f5040e504000008110612677576003915061495e565b69016b352da5e0ed3000008110612691576005915061495e565b690165c96647b38a20000081106126ab576007915061495e565b6901605d9ee9862710000081106126c5576006915061495e565b69015da7bb3a6f7588000081106126df576002915061495e565b69015af1d78b58c400000081106126f9576001915061495e565b6901583bf3dc42127800008110612713576000915061495e565b69015586102d2b60f00000811061272d576004915061495e565b690152d02c7e14af6800008110612747576003915061495e565b6901501a48cefdfde000008110612761576002915061495e565b69014d64651fe74c580000811061277b576000915061495e565b69014aae8170d09ad000008110612795576003915061495e565b690147f89dc1b9e948000081106127af576007915061495e565b6901969368974c05b0000081106127c9576007915061495e565b69019127a1391ea2a0000081106127e3576002915061495e565b69018bbbd9daf13f90000081106127fd576003915061495e565b69018650127cc3dc8000008110612817576000915061495e565b690180e44b1e96797000008110612831576005915061495e565b69017b7883c06916600000811061284b576003915061495e565b6901760cbc623bb35000008110612865576001915061495e565b690170a0f5040e50400000811061287f576003915061495e565b69016b352da5e0ed3000008110612899576005915061495e565b690165c96647b38a20000081106128b3576007915061495e565b6901605d9ee9862710000081106128cd576006915061495e565b69015da7bb3a6f7588000081106128e7576002915061495e565b69015af1d78b58c40000008110612901576001915061495e565b6901583bf3dc4212780000811061291b576000915061495e565b69015586102d2b60f000008110612935576004915061495e565b690152d02c7e14af680000811061294f576003915061495e565b6901501a48cefdfde000008110612969576002915061495e565b69014d64651fe74c5800008110612983576000915061495e565b69014aae8170d09ad00000811061299d576003915061495e565b690a968163f0a57b40000081106129b7576000915061495e565b690a2a15d09519be00000081106129d1576008915061495e565b6909bdaa3d398e00c0000081106129eb576005915061495e565b6909513ea9de02438000008110612a05576003915061495e565b6908e4d3168276864000008110612a1f576004915061495e565b690878678326eac90000008110612a39576005915061495e565b69080bfbefcb5f0bc000008110612a53576003915061495e565b69079f905c6fd34e8000008110612a6d576004915061495e565b69073324c91447914000008110612a87576003915061495e565b6906c6b935b8bbd40000008110612aa1576005915061495e565b69065a4da25d3016c000008110612abb576007915061495e565b6905b7ac4553de7ae000008110612ad5576006915061495e565b690581767ba6189c4000008110612aef576002915061495e565b69054b40b1f852bda000008110612b09576005915061495e565b6905150ae84a8cdf0000008110612b23576002915061495e565b6904ded51e9cc7006000008110612b3d576004915061495e565b6904a89f54ef0121c000008110612b57576003915061495e565b690472698b413b432000008110612b71576002915061495e565b69043c33c19375648000008110612b8b576004915061495e565b690405fdf7e5af85e000008110612ba5576003915061495e565b6903cfc82e37e9a74000008110612bbf576008915061495e565b6903b4ad496106b7f000008110612bd9576007915061495e565b69039992648a23c8a000008110612bf3576002915061495e565b69037e777fb340d95000008110612c0d576003915061495e565b6903635c9adc5dea0000008110612c27576001915061495e565b69034841b6057afab000008110612c41576005915061495e565b69032d26d12e980b6000008110612c5b576003915061495e565b6903120bec57b51c1000008110612c75576004915061495e565b6902f6f10780d22cc000008110612c8f576003915061495e565b6902dbd622a9ef3d7000008110612ca9576005915061495e565b6902c0bb3dd30c4e2000008110612cc3576007915061495e565b6902a5a058fc295ed000008110612cdd576006915061495e565b69029812e690b7e72800008110612cf7576002915061495e565b69028a857425466f8000008110612d11576003915061495e565b69027cf801b9d4f7d800008110612d2b576001915061495e565b69026f6a8f4e63803000008110612d45576004915061495e565b690261dd1ce2f2088800008110612d5f576005915061495e565b6902544faa778090e000008110612d79576003915061495e565b690246c2380c0f193800008110612d93576000915061495e565b69023934c5a09da19000008110612dad576003915061495e565b69022ba753352c29e800008110612dc7576004915061495e565b69021e19e0c9bab24000008110612de1576007915061495e565b69021b63fd1aa400b800008110612dfb576002915061495e565b690218ae196b8d4f3000008110612e15576003915061495e565b690215f835bc769da800008110612e2f576000915061495e565b69021342520d5fec2000008110612e49576005915061495e565b6902108c6e5e493a9800008110612e63576003915061495e565b690200491843c1116800008110612e7d576002915061495e565b6901fd933494aa5fe000008110612e97576004915061495e565b6901ed4fde7a2236b000008110612eb1576005915061495e565b6901ea99facb0b852800008110612ecb576006915061495e565b6901da56a4b0835bf800008110612ee5576007915061495e565b6901d7a0c1016caa7000008110612eff576003915061495e565b6901ccc9324511e45000008110612f19576002915061495e565b6901ca134e95fb32c800008110612f33576000915061495e565b6901bf3bbfd9a06ca800008110612f4d576004915061495e565b6901bc85dc2a89bb2000008110612f67576003915061495e565b6901b1ae4d6e2ef50000008110612f81576002915061495e565b6901aef869bf18437800008110612f9b576004915061495e565b6901a420db02bd7d5800008110612fb5576003915061495e565b6901a16af753a6cbd000008110612fcf576005915061495e565b6901969368974c05b000008110612fe9576007915061495e565b69019127a1391ea2a000008110613003576002915061495e565b69018bbbd9daf13f900000811061301d576003915061495e565b69018650127cc3dc8000008110613037576000915061495e565b690180e44b1e96797000008110613051576005915061495e565b69017b7883c06916600000811061306b576003915061495e565b6901760cbc623bb35000008110613085576001915061495e565b690170a0f5040e50400000811061309f576003915061495e565b69016b352da5e0ed30000081106130b9576005915061495e565b690165c96647b38a20000081106130d3576007915061495e565b6901605d9ee9862710000081106130ed576006915061495e565b69015da7bb3a6f758800008110613107576002915061495e565b69015af1d78b58c40000008110613121576001915061495e565b6901583bf3dc4212780000811061313b576000915061495e565b69015586102d2b60f000008110613155576004915061495e565b690152d02c7e14af680000811061316f576003915061495e565b6901501a48cefdfde000008110613189576002915061495e565b69014d64651fe74c58000081106131a3576000915061495e565b69014aae8170d09ad0000081106131bd576003915061495e565b690147f89dc1b9e948000081106131d7576007915061495e565b69014542ba12a337c0000081106131f1576005915061495e565b690143a264a9959a080000811061320b576006915061495e565b690142020f4087fc5000008110613225576003915061495e565b69014061b9d77a5e980000811061323f576002915061495e565b69013ec1646e6cc0e000008110613259576001915061495e565b69013d210f055f232800008110613273576004915061495e565b69013b80b99c5185700000811061328d576003915061495e565b690139e0643343e7b8000081106132a7576000915061495e565b690138400eca364a00000081106132c1576002915061495e565b6901369fb96128ac48000081106132db576004915061495e565b690134ff63f81b0e90000081106132f5576006915061495e565b690132498049045d080000811061330f576003915061495e565b69012f939c99edab8000008110613329576005915061495e565b69012cddb8ead6f9f800008110613343576000915061495e565b69012a27d53bc048700000811061335d576003915061495e565b69012771f18ca996e800008110613377576001915061495e565b690124bc0ddd92e56000008110613391576002915061495e565b690122062a2e7c33d8000081106133ab576004915061495e565b69011f50467f658250000081106133c5576000915061495e565b69011c9a62d04ed0c8000081106133df576005915061495e565b690119e47f21381f40000081106133f9576006915061495e565b690118cef0db2f0b7000008110613413576004915061495e565b690117b9629525f7a00000811061342d576002915061495e565b690116a3d44f1ce3d000008110613447576000915061495e565b6901158e460913d00000008110613461576002915061495e565b69011478b7c30abc300000811061347b576003915061495e565b69011363297d01a86000008110613495576002915061495e565b6901124d9b36f89490000081106134af576000915061495e565b690111380cf0ef80c0000081106134c9576002915061495e565b690110227eaae66cf0000081106134e3576006915061495e565b69010f0cf064dd5920000081106134fd576005915061495e565b69010c570cb5c6a79800008110613517576004915061495e565b690109a12906aff61000008110613531576003915061495e565b690106eb45579944880000811061354b576002915061495e565b6901043561a882930000008110613565576000915061495e565b6901017f7df96be1780000811061357f576001915061495e565b68fec99a4a552ff000008110613598576003915061495e565b68fc13b69b3e7e68000081106135b1576002915061495e565b68f95dd2ec27cce0000081106135ca576003915061495e565b68f6a7ef3d111b58000081106135e3576002915061495e565b68f3f20b8dfa69d0000081106135fc576005915061495e565b68e91a7cd19fa3b000008110613615576002915061495e565b68de42ee1544dd900000811061362e576003915061495e565b68d36b5f58ea177000008110613647576000915061495e565b68c893d09c8f515000008110613660576003915061495e565b68bdbc41e0348b3000008110613679576002915061495e565b68b2e4b323d9c51000008110613692576004915061495e565b68a80d24677efef0000081106136ab576001915061495e565b689d3595ab2438d0000081106136c4576000915061495e565b68925e06eec972b0000081106136dd576004915061495e565b68878678326eac90000081106136f6576003915061495e565b68821ab0d44149800000811061370f576004915061495e565b687caee97613e67000008110613728576005915061495e565b6877432217e6836000008110613741576000915061495e565b6871d75ab9b920500000811061375a576002915061495e565b686c6b935b8bbd4000008110613773576003915061495e565b6866ffcbfd5e5a300000811061378c576000915061495e565b686194049f30f720000081106137a5576003915061495e565b685c283d41039410000081106137be576005915061495e565b6856bc75e2d63100000081106137d7576004915061495e565b685150ae84a8cdf0000081106137f0576005915061495e565b684e9acad5921c6800008110613809576002915061495e565b684be4e7267b6ae000008110613822576003915061495e565b68492f037764b9580000811061383b576002915061495e565b6846791fc84e07d000008110613854576000915061495e565b6843c33c193756480000811061386d576001915061495e565b68410d586a20a4c000008110613886576002915061495e565b683e5774bb09f3380000811061389f576001915061495e565b683ba1910bf341b0000081106138b8576000915061495e565b6838ebad5cdc9028000081106138d1576005915061495e565b683635c9adc5dea0000081106138ea576004915061495e565b6835ab028ac154b800008110613903576001915061495e565b6835203b67bccad00000811061391c576002915061495e565b6834957444b840e800008110613935576000915061495e565b68340aad21b3b7000000811061394e576003915061495e565b68337fe5feaf2d1800008110613967576001915061495e565b6832f51edbaaa33000008110613980576002915061495e565b68326a57b8a6194800008110613999576001915061495e565b6831df9095a18f60000081106139b2576000915061495e565b683154c9729d0578000081106139cb576002915061495e565b6830ca024f987b90000081106139e4576003915061495e565b682fb474098f67c0000081106139fd576002915061495e565b682e9ee5c38653f000008110613a16576001915061495e565b682d89577d7d402000008110613a2f576000915061495e565b682c73c937742c5000008110613a48576002915061495e565b682b5e3af16b188000008110613a61576003915061495e565b682a48acab6204b000008110613a7a576001915061495e565b6829331e6558f0e000008110613a93576000915061495e565b68281d901f4fdd1000008110613aac576002915061495e565b68270801d946c94000008110613ac5576003915061495e565b6825f273933db57000008110613ade576004915061495e565b6824dce54d34a1a000008110613af7576001915061495e565b6823c757072b8dd000008110613b10576003915061495e565b6822b1c8c1227a0000008110613b29576002915061495e565b68219c3a7b19663000008110613b42576000915061495e565b682086ac3510526000008110613b5b576003915061495e565b681f711def073e9000008110613b74576002915061495e565b681e5b8fa8fe2ac000008110613b8d576001915061495e565b681d460162f516f000008110613ba6576000915061495e565b681c30731cec032000008110613bbf576002915061495e565b681b1ae4d6e2ef5000008110613bd8576004915061495e565b681a901db3de656800008110613bf1576001915061495e565b681a055690d9db8000008110613c0a576003915061495e565b68197a8f6dd5519800008110613c23576000915061495e565b6818efc84ad0c7b000008110613c3c576003915061495e565b6818650127cc3dc800008110613c55576001915061495e565b6817da3a04c7b3e000008110613c6e576002915061495e565b68174f72e1c329f800008110613c87576001915061495e565b6816c4abbebea01000008110613ca0576000915061495e565b681639e49bba162800008110613cb9576002915061495e565b6815af1d78b58c4000008110613cd2576003915061495e565b6815245655b1025800008110613ceb576002915061495e565b6814998f32ac787000008110613d04576001915061495e565b68140ec80fa7ee8800008110613d1d576000915061495e565b68138400eca364a000008110613d36576002915061495e565b6812f939c99edab800008110613d4f576003915061495e565b68126e72a69a50d000008110613d68576001915061495e565b6811e3ab8395c6e800008110613d81576000915061495e565b681158e460913d0000008110613d9a576002915061495e565b6810ce1d3d8cb31800008110613db3576001915061495e565b681043561a88293000008110613dcc576003915061495e565b680fb88ef7839f4800008110613de5576001915061495e565b680f2dc7d47f156000008110613dfe576003915061495e565b680ea300b17a8b7800008110613e17576002915061495e565b680e18398e76019000008110613e30576000915061495e565b680d8d726b7177a800008110613e49576001915061495e565b680d02ab486cedc000008110613e62576002915061495e565b680c77e4256863d800008110613e7b576001915061495e565b680bed1d0263d9f000008110613e94576000915061495e565b680b6255df5f500800008110613ead576001915061495e565b680ad78ebc5ac62000008110613ec6576002915061495e565b680a4cc799563c3800008110613edf576001915061495e565b6809c2007651b25000008110613ef8576003915061495e565b68093739534d286800008110613f11576000915061495e565b6808ac7230489e8000008110613f2a576003915061495e565b680821ab0d44149800008110613f43576001915061495e565b680796e3ea3f8ab000008110613f5c576002915061495e565b68070c1cc73b00c800008110613f75576001915061495e565b68068155a43676e000008110613f8e576000915061495e565b6805f68e8131ecf800008110613fa7576002915061495e565b68056bc75e2d631000008110613fc0576003915061495e565b68055de6a779bbac00008110613fd9576002915061495e565b68055005f0c6144800008110613ff2576001915061495e565b680542253a126ce40000811061400b576000915061495e565b68053444835ec58000008110614024576002915061495e565b68052663ccab1e1c0000811061403d576003915061495e565b6805188315f776b800008110614056576001915061495e565b68050aa25f43cf540000811061406f576000915061495e565b6804fcc1a89027f000008110614088576002915061495e565b6804eee0f1dc808c000081106140a1576003915061495e565b6804e1003b28d928000081106140ba576002915061495e565b6804d31f847531c4000081106140d3576001915061495e565b6804c53ecdc18a60000081106140ec576003915061495e565b6804b75e170de2fc00008110614105576002915061495e565b6804a97d605a3b980000811061411e576000915061495e565b68049b9ca9a6943400008110614137576001915061495e565b68048dbbf2f2ecd000008110614150576002915061495e565b68047fdb3c3f456c00008110614169576001915061495e565b680471fa858b9e0800008110614182576000915061495e565b68046419ced7f6a40000811061419b576001915061495e565b6804563918244f40000081106141b4576003915061495e565b680448586170a7dc000081106141cd576001915061495e565b68043a77aabd0078000081106141e6576003915061495e565b68042c96f4095914000081106141ff576002915061495e565b68041eb63d55b1b000008110614218576000915061495e565b680410d586a20a4c00008110614231576001915061495e565b680402f4cfee62e80000811061424a576002915061495e565b6803f514193abb8400008110614263576001915061495e565b6803e733628714200000811061427c576000915061495e565b6803d952abd36cbc00008110614295576001915061495e565b6803cb71f51fc558000081106142ae576002915061495e565b6803bd913e6c1df4000081106142c7576001915061495e565b6803afb087b87690000081106142e0576003915061495e565b6803a1cfd104cf2c000081106142f9576000915061495e565b680393ef1a5127c800008110614312576003915061495e565b6803860e639d80640000811061432b576001915061495e565b6803782dace9d90000008110614344576002915061495e565b68036a4cf636319c0000811061435d576001915061495e565b68035c6c3f828a3800008110614376576000915061495e565b68034e8b88cee2d40000811061438f576002915061495e565b680340aad21b3b70000081106143a8576003915061495e565b680332ca1b67940c000081106143c1576001915061495e565b680324e964b3eca8000081106143da576003915061495e565b68031708ae004544000081106143f3576002915061495e565b68030927f74c9de00000811061440c576000915061495e565b6802fb474098f67c00008110614425576001915061495e565b6802ed6689e54f180000811061443e576002915061495e565b6802df85d331a7b400008110614457576001915061495e565b6802d1a51c7e005000008110614470576000915061495e565b6802c3c465ca58ec00008110614489576002915061495e565b6802b5e3af16b188000081106144a2576003915061495e565b6802a802f8630a24000081106144bb576002915061495e565b68029a2241af62c0000081106144d4576001915061495e565b68028c418afbbb5c000081106144ed576000915061495e565b68027e60d44813f800008110614506576002915061495e565b680270801d946c940000811061451f576003915061495e565b6802629f66e0c53000008110614538576001915061495e565b680254beb02d1dcc00008110614551576000915061495e565b680246ddf97976680000811061456a576002915061495e565b680238fd42c5cf0400008110614583576001915061495e565b68022b1c8c1227a00000811061459c576003915061495e565b68021d3bd55e803c000081106145b5576001915061495e565b68020f5b1eaad8d8000081106145ce576003915061495e565b6802017a67f73174000081106145e7576002915061495e565b6801f399b1438a1000008110614600576000915061495e565b6801e5b8fa8fe2ac00008110614619576001915061495e565b6801d7d843dc3b4800008110614632576002915061495e565b6801c9f78d2893e40000811061464b576001915061495e565b6801bc16d674ec8000008110614664576000915061495e565b6801ae361fc1451c0000811061467d576001915061495e565b6801a055690d9db800008110614696576002915061495e565b68019274b259f654000081106146af576001915061495e565b68018493fba64ef0000081106146c8576003915061495e565b680176b344f2a78c000081106146e1576000915061495e565b680168d28e3f0028000081106146fa576003915061495e565b68015af1d78b58c400008110614713576001915061495e565b68014d1120d7b1600000811061472c576002915061495e565b68013f306a2409fc00008110614745576001915061495e565b6801314fb37062980000811061475e576000915061495e565b6801236efcbcbb3400008110614777576002915061495e565b6801158e460913d000008110614790576003915061495e565b680107ad8f556c6c000081106147a9576002915061495e565b67f9ccd8a1c508000081106147c1576001915061495e565b67ebec21ee1da4000081106147d9576000915061495e565b67de0b6b3a7640000081106147f1576002915061495e565b67d02ab486cedc00008110614809576003915061495e565b67c249fdd3277800008110614821576001915061495e565b67b469471f801400008110614839576000915061495e565b67a688906bd8b000008110614851576002915061495e565b6798a7d9b8314c00008110614869576001915061495e565b678ac7230489e800008110614881576003915061495e565b677ce66c50e28400008110614899576001915061495e565b676f05b59d3b20000081106148b1576003915061495e565b676124fee993bc000081106148c9576002915061495e565b6753444835ec58000081106148e1576000915061495e565b674563918244f4000081106148f9576001915061495e565b673782dace9d9000008110614911576002915061495e565b6729a2241af62c00008110614929576001915061495e565b671bc16d674ec800008110614941576000915061495e565b670de0b6b3a76400008110614959576002915061495e565b600191505b5090565b600581565b600054600160a060020a031681565b600a81565b60016020819052600091825260409091208054918101546002820154600383015460049093015491929091600160a060020a031685565b600281565b600080838311156149c757600080fd5b50509003905600a165627a7a7230582079922dcbfe36d8242c65de510c50d3cd40ecbed57c0c14cad108c8a2c262efc00029
Contract_Creation_Code_ARM:



Contract Adress: 0x59bf73063bb645f3df40d9b05a117be6344e1eda
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetFactory.sol
interface ISetFactory {
    /* ============ External Functions ============ */
    /**
     * Exchange components for Set tokens
     *
     * @param  _set          Address of the Set to issue
     * @param  _quantity     Number of tokens to issue
     */
    function issue(
        address _set,
        uint256 _quantity
    )
        external;
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (ISetFactory);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Balance of token for a specified address
    *
    * @param who  The address
    * @return uint256 Balance of address
    */
    function balanceOf(
        address who
    )
        external
        view
        returns (uint256);
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.factory().issue(set, fitMintAmount);
        set.transfer(msg.sender, set.balanceOf(this));
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610a6d806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b506100706109bb565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff6109d316565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff6109f016565b9063ffffffff610a1e16565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b8a600160a060020a031663c45a01556040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b5051604080517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018890529151919092169163867904b491604480830192600092919082900301818387803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b5050604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038f16935063a9059cbb9250339184916370a08231916024808201926020929091908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915251604480830192600092919082900301818387803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b5050506000303111159050610769576040513390303180156108fc02916000818181858888f19350505050158015610767573d6000803e3d6000fd5b505b600094505b88518510156109ae57888581518110151561078557fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b1580156107f357600080fd5b505af1158015610807573d6000803e3d6000fd5b505050506040513d602081101561081d57600080fd5b505111156109a357604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561089157600080fd5b505af11580156108a5573d6000803e3d6000fd5b505050506040513d60208110156108bb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d602081101561093457600080fd5b505115156109a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b60019094019361076e565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000828201838110156109e557600080fd5b8091505b5092915050565b600080831515610a0357600091506109e9565b50828202828482811515610a1357fe5b04146109e557600080fd5b600080808311610a2d57600080fd5b8284811515610a3857fe5b049493505050505600a165627a7a7230582072f07da822ac037337ccc7be06096c41ea628c695bf3d0498a9224dbb8c129490029
Contract_Creation_Code_ARM:



Contract Adress: 0x59bf73063bb645f3df40d9b05a117be6344e1eda
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetFactory.sol
interface ISetFactory {
    /* ============ External Functions ============ */
    /**
     * Exchange components for Set tokens
     *
     * @param  _set          Address of the Set to issue
     * @param  _quantity     Number of tokens to issue
     */
    function issue(
        address _set,
        uint256 _quantity
    )
        external;
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (ISetFactory);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Balance of token for a specified address
    *
    * @param who  The address
    * @return uint256 Balance of address
    */
    function balanceOf(
        address who
    )
        external
        view
        returns (uint256);
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.factory().issue(set, fitMintAmount);
        set.transfer(msg.sender, set.balanceOf(this));
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610a6d806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b506100706109bb565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff6109d316565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff6109f016565b9063ffffffff610a1e16565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b8a600160a060020a031663c45a01556040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b5051604080517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018890529151919092169163867904b491604480830192600092919082900301818387803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b5050604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038f16935063a9059cbb9250339184916370a08231916024808201926020929091908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915251604480830192600092919082900301818387803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b5050506000303111159050610769576040513390303180156108fc02916000818181858888f19350505050158015610767573d6000803e3d6000fd5b505b600094505b88518510156109ae57888581518110151561078557fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b1580156107f357600080fd5b505af1158015610807573d6000803e3d6000fd5b505050506040513d602081101561081d57600080fd5b505111156109a357604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561089157600080fd5b505af11580156108a5573d6000803e3d6000fd5b505050506040513d60208110156108bb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d602081101561093457600080fd5b505115156109a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b60019094019361076e565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000828201838110156109e557600080fd5b8091505b5092915050565b600080831515610a0357600091506109e9565b50828202828482811515610a1357fe5b04146109e557600080fd5b600080808311610a2d57600080fd5b8284811515610a3857fe5b049493505050505600a165627a7a7230582072f07da822ac037337ccc7be06096c41ea628c695bf3d0498a9224dbb8c129490029
Contract_Creation_Code_ARM:



Contract Adress: 0x0a7f20c58c3014e1dfb7f9d460d8bc2202f7bf1f
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (address);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.mint(msg.sender, fitMintAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610903806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b50610070610851565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff61086916565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff61088616565b9063ffffffff6108b416565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038d16916340c10f1991604480830192600092919082900301818387803b1580156105ad57600080fd5b505af11580156105c1573d6000803e3d6000fd5b50505060003031111590506105ff576040513390303180156108fc02916000818181858888f193505050501580156105fd573d6000803e3d6000fd5b505b600094505b885185101561084457888581518110151561061b57fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b505050506040513d60208110156106b357600080fd5b5051111561083957604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561072757600080fd5b505af115801561073b573d6000803e3d6000fd5b505050506040513d602081101561075157600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b505050506040513d60208110156107ca57600080fd5b5051151561083957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190940193610604565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008282018381101561087b57600080fd5b8091505b5092915050565b600080831515610899576000915061087f565b508282028284828115156108a957fe5b041461087b57600080fd5b6000808083116108c357600080fd5b82848115156108ce57fe5b049493505050505600a165627a7a72305820d341b91ee0ca9e493e91914ba74126a94615b536c8d5bf35054679fd8762e96a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xcb089b8ae76b5df461d40e957603f7a59aea9e0d
Contract Name: Arroundtoken
Contract_Source_Code: 
pragma solidity 0.5.0;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
 * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract ERC20 is IERC20 {
    using SafeMath for uint256;
    mapping (address => uint256) internal _balances;
    mapping (address => mapping (address => uint256)) private _allowed;
    uint256 internal _totalSupply;
    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }
    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * Beware that changing an allowance with this method brings the risk that someone may use both the old
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    /**
     * @dev Transfer tokens from one address to another
     * @param from address The address which you want to send tokens from
     * @param to address The address which you want to transfer to
     * @param value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param addedValue The amount of tokens to increase the allowance by.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
     * @dev Decrease the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To decrement
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param subtractedValue The amount of tokens to decrease the allowance by.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
    * @dev Transfer token for a specified addresses
    * @param from The address to transfer from.
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
    */
    constructor() public {
        owner = msg.sender;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
    _;
    }
}
contract Claimable is Ownable {
    address public pendingOwner;
    /**
     * @dev Modifier throws if called by any account other than the pendingOwner.
     */
    modifier onlyPendingOwner() {
        require(msg.sender == pendingOwner);
        _;
    }
    /**
     * @dev Allows the current owner to set the pendingOwner address.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) onlyOwner public {
        pendingOwner = newOwner;
    }
    /**
     * @dev Allows the pendingOwner address to finalize the transfer.
     */
    function claimOwnership() onlyPendingOwner public {
        emit OwnershipTransferred(owner, pendingOwner);
        owner = pendingOwner;
        pendingOwner = address(0);
    }
}
/**
 * @title Arroundtoken
 * @dev The Arroundtoken contract is ERC20-compatible token processing contract
 * with additional  features like multiTransfer and reclaimTokens
 *
 */
contract Arroundtoken is ERC20, Claimable {
    using SafeMath for uint256;
    uint64 public constant TDE_FINISH = 1542326400;//!!!!Check before deploy
    // 1542326400  GMT: 16 November 2018 г., 00:00:00
    // 1542326399  GMT: 15 November 2018 г., 23:59:59
    //////////////////////
    // State var       ///
    //////////////////////
    string  public name;
    string  public symbol;
    uint8   public decimals;
    address public accTDE;
    address public accFoundCDF;
    address public accFoundNDF1;
    address public accFoundNDF2;
    address public accFoundNDF3;
    address public accTeam;
    address public accBounty;
    // Implementation of frozen funds
    mapping(address => uint64) public frozenAccounts;
    //////////////
    // EVENTS    //
    ///////////////
    event NewFreeze(address _acc, uint64 _timestamp);
    event BatchDistrib(uint8 cnt, uint256 batchAmount);
    /**
     * @param _accTDE - main address for token distribution
     * @param _accFoundCDF  - address for CDF Found tokens (WP)
     * @param _accFoundNDF1 - address for NDF Found tokens (WP)
     * @param _accFoundNDF2 - address for NDF Found tokens (WP)
     * @param _accFoundNDF3 - address for NDF Found tokens (WP)
     * @param _accTeam - address for team tokens, will frozzen by one year
     * @param _accBounty - address for bounty tokens 
     * @param _initialSupply - subj
     */  
    constructor (
        address _accTDE, 
        address _accFoundCDF,
        address _accFoundNDF1,
        address _accFoundNDF2,
        address _accFoundNDF3,
        address _accTeam,
        address _accBounty, 
        uint256 _initialSupply
    )
    public 
    {
        require(_accTDE       != address(0));
        require(_accFoundCDF  != address(0));
        require(_accFoundNDF1 != address(0));
        require(_accFoundNDF2 != address(0));
        require(_accFoundNDF3 != address(0));
        require(_accTeam      != address(0));
        require(_accBounty    != address(0));
        require(_initialSupply > 0);
        name           = "Arround";
        symbol         = "ARR";
        decimals       = 18;
        accTDE         = _accTDE;
        accFoundCDF    = _accFoundCDF;
        accFoundNDF1   = _accFoundNDF1;
        accFoundNDF2   = _accFoundNDF2;
        accFoundNDF3   = _accFoundNDF3;
        accTeam        = _accTeam;
        accBounty      = _accBounty;
        _totalSupply   = _initialSupply * (10 ** uint256(decimals));// All ARR tokens in the world
       //Initial token distribution
        _balances[_accTDE]       = 1104000000 * (10 ** uint256(decimals)); // TDE,      36.8%=28.6+8.2 
        _balances[_accFoundCDF]  = 1251000000 * (10 ** uint256(decimals)); // CDF,      41.7%
        _balances[_accFoundNDF1] =  150000000 * (10 ** uint256(decimals)); // 0.50*NDF, 10.0%
        _balances[_accFoundNDF2] =  105000000 * (10 ** uint256(decimals)); // 0.35*NDF, 10.0%
        _balances[_accFoundNDF3] =   45000000 * (10 ** uint256(decimals)); // 0.15*NDF, 10.0%
        _balances[_accTeam]      =  300000000 * (10 ** uint256(decimals)); // team,     10.0%
        _balances[_accBounty]    =   45000000 * (10 ** uint256(decimals)); // Bounty,    1.5%
        require(  _totalSupply ==  3000000000 * (10 ** uint256(decimals)), "Total Supply exceeded!!!");
        emit Transfer(address(0), _accTDE,       1104000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundCDF,  1251000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF1,  150000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF2,  105000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF3,   45000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accTeam,       300000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accBounty,      45000000 * (10 ** uint256(decimals)));
        //initisl freeze
        frozenAccounts[_accTeam]      = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF2] = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF3] = TDE_FINISH + 63158400; //+(3600*24*365)*2 +3600*24(leap year 2020)
        emit NewFreeze(_accTeam,        TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF2,   TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF3,   TDE_FINISH + 63158400);
    }
    modifier onlyTokenKeeper() {
        require(
            msg.sender == accTDE || 
            msg.sender == accFoundCDF ||
            msg.sender == accFoundNDF1 ||
            msg.sender == accBounty
        );
        _;
    }
    function() external { } 
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transfer(address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.transfer(_to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[_from] < now);
        return super.transferFrom(_from, _to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function approve(address _spender, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.approve(_spender, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function increaseAllowance(address _spender, uint _addedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.increaseAllowance(_spender, _addedValue);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function decreaseAllowance(address _spender, uint _subtractedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.decreaseAllowance(_spender, _subtractedValue);
    }
    /**
     * @dev Batch transfer function. Allow to save up 50% of gas
     */
    function multiTransfer(address[] calldata  _investors, uint256[] calldata   _value )  
        external 
        onlyTokenKeeper 
        returns (uint256 _batchAmount)
    {
        require(_investors.length <= 255); //audit recommendation
        require(_value.length == _investors.length);
        uint8      cnt = uint8(_investors.length);
        uint256 amount = 0;
        for (uint i=0; i<cnt; i++){
            amount = amount.add(_value[i]);
            require(_investors[i] != address(0));
            _balances[_investors[i]] = _balances[_investors[i]].add(_value[i]);
            emit Transfer(msg.sender, _investors[i], _value[i]);
        }
        require(amount <= _balances[msg.sender]);
        _balances[msg.sender] = _balances[msg.sender].sub(amount);
        emit BatchDistrib(cnt, amount);
        return amount;
    }
    /**
     * @dev Owner can claim any tokens that transfered to this contract address
     */
    function reclaimToken(ERC20 token) external onlyOwner {
        require(address(token) != address(0));
        uint256 balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
    }
}
  //***************************************************************
  // Based on best practice of https://github.com/Open Zeppelin/zeppelin-solidity
  // Adapted and amended by IBERGroup; 
  // Code released under the MIT License(see git root).
  ////**************************************************************
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"reclaimToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_investors","type":"address[]"},{"name":"_value","type":"uint256[]"}],"name":"multiTransfer","outputs":[{"name":"_batchAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF3","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TDE_FINISH","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF1","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundCDF","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTDE","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccounts","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF2","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accBounty","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_accTDE","type":"address"},{"name":"_accFoundCDF","type":"address"},{"name":"_accFoundNDF1","type":"address"},{"name":"_accFoundNDF2","type":"address"},{"name":"_accFoundNDF3","type":"address"},{"name":"_accTeam","type":"address"},{"name":"_accBounty","type":"address"},{"name":"_initialSupply","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_acc","type":"address"},{"indexed":false,"name":"_timestamp","type":"uint64"}],"name":"NewFreeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"cnt","type":"uint8"},{"indexed":false,"name":"batchAmount","type":"uint256"}],"name":"BatchDistrib","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0x44B173CbdFC9946963D871c3f8b680d6A7085e2c
Contract Name: lottery
Contract_Source_Code: 
pragma solidity 0.4.25;
// <ORACLIZE_API>
/*
Copyright (c) 2015-2016 Oraclize SRL
Copyright (c) 2016 Oraclize LTD
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary
pragma solidity >=0.4.18;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version
contract OraclizeI {
    address public cbAddress;
    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);
    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);
    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);
    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);
    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);
    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);
    function getPrice(string _datasource) public returns (uint _dsprice);
    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);
    function setProofType(byte _proofType) external;
    function setCustomGasPrice(uint _gasPrice) external;
    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);
}
contract OraclizeAddrResolverI {
    function getAddress() public returns (address _addr);
}
/*
Begin solidity-cborutils
https://github.com/smartcontractkit/solidity-cborutils
MIT License
Copyright (c) 2018 SmartContract ChainLink, Ltd.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
library Buffer {
    struct buffer {
        bytes buf;
        uint capacity;
    }
    function init(buffer memory buf, uint _capacity) internal pure {
        uint capacity = _capacity;
        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);
        // Allocate space for the buffer data
        buf.capacity = capacity;
        assembly {
            let ptr := mload(0x40)
            mstore(buf, ptr)
            mstore(ptr, 0)
            mstore(0x40, add(ptr, capacity))
        }
    }
    function resize(buffer memory buf, uint capacity) private pure {
        bytes memory oldbuf = buf.buf;
        init(buf, capacity);
        append(buf, oldbuf);
    }
    function max(uint a, uint b) private pure returns(uint) {
        if(a > b) {
            return a;
        }
        return b;
    }
    /**
     * @dev Appends a byte array to the end of the buffer. Resizes if doing so
     *      would exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {
        if(data.length + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, data.length) * 2);
        }
        uint dest;
        uint src;
        uint len = data.length;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Start address = buffer address + buffer length + sizeof(buffer length)
            dest := add(add(bufptr, buflen), 32)
            // Update buffer length
            mstore(bufptr, add(buflen, mload(data)))
            src := add(data, 32)
        }
        // Copy word-length chunks while possible
        for(; len >= 32; len -= 32) {
            assembly {
                mstore(dest, mload(src))
            }
            dest += 32;
            src += 32;
        }
        // Copy remaining bytes
        uint mask = 256 ** (32 - len) - 1;
        assembly {
            let srcpart := and(mload(src), not(mask))
            let destpart := and(mload(dest), mask)
            mstore(dest, or(destpart, srcpart))
        }
        return buf;
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, uint8 data) internal pure {
        if(buf.buf.length + 1 > buf.capacity) {
            resize(buf, buf.capacity * 2);
        }
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length)
            let dest := add(add(bufptr, buflen), 32)
            mstore8(dest, data)
            // Update buffer length
            mstore(bufptr, add(buflen, 1))
        }
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {
        if(len + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, len) * 2);
        }
        uint mask = 256 ** len - 1;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length) + len
            let dest := add(add(bufptr, buflen), len)
            mstore(dest, or(and(mload(dest), not(mask)), data))
            // Update buffer length
            mstore(bufptr, add(buflen, len))
        }
        return buf;
    }
}
library CBOR {
    using Buffer for Buffer.buffer;
    uint8 private constant MAJOR_TYPE_INT = 0;
    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
    uint8 private constant MAJOR_TYPE_BYTES = 2;
    uint8 private constant MAJOR_TYPE_STRING = 3;
    uint8 private constant MAJOR_TYPE_ARRAY = 4;
    uint8 private constant MAJOR_TYPE_MAP = 5;
    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {
        if(value <= 23) {
            buf.append(uint8((major << 5) | value));
        } else if(value <= 0xFF) {
            buf.append(uint8((major << 5) | 24));
            buf.appendInt(value, 1);
        } else if(value <= 0xFFFF) {
            buf.append(uint8((major << 5) | 25));
            buf.appendInt(value, 2);
        } else if(value <= 0xFFFFFFFF) {
            buf.append(uint8((major << 5) | 26));
            buf.appendInt(value, 4);
        } else if(value <= 0xFFFFFFFFFFFFFFFF) {
            buf.append(uint8((major << 5) | 27));
            buf.appendInt(value, 8);
        }
    }
    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {
        buf.append(uint8((major << 5) | 31));
    }
    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {
        encodeType(buf, MAJOR_TYPE_INT, value);
    }
    function encodeInt(Buffer.buffer memory buf, int value) internal pure {
        if(value >= 0) {
            encodeType(buf, MAJOR_TYPE_INT, uint(value));
        } else {
            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));
        }
    }
    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {
        encodeType(buf, MAJOR_TYPE_BYTES, value.length);
        buf.append(value);
    }
    function encodeString(Buffer.buffer memory buf, string value) internal pure {
        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);
        buf.append(bytes(value));
    }
    function startArray(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);
    }
    function startMap(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);
    }
    function endSequence(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);
    }
}
/*
End solidity-cborutils
 */
contract usingOraclize {
    uint constant day = 60*60*24;
    uint constant week = 60*60*24*7;
    uint constant month = 60*60*24*30;
    byte constant proofType_NONE = 0x00;
    byte constant proofType_TLSNotary = 0x10;
    byte constant proofType_Ledger = 0x30;
    byte constant proofType_Android = 0x40;
    byte constant proofType_Native = 0xF0;
    byte constant proofStorage_IPFS = 0x01;
    uint8 constant networkID_auto = 0;
    uint8 constant networkID_mainnet = 1;
    uint8 constant networkID_testnet = 2;
    uint8 constant networkID_morden = 2;
    uint8 constant networkID_consensys = 161;
    OraclizeAddrResolverI OAR;
    OraclizeI oraclize;
    modifier oraclizeAPI {
        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))
            oraclize_setNetwork(networkID_auto);
        if(address(oraclize) != OAR.getAddress())
            oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    modifier coupon(string code){
        oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    function oraclize_setNetwork(uint8 networkID) internal returns(bool){
      return oraclize_setNetwork();
      networkID; // silence the warning and remain backwards compatible
    }
    function oraclize_setNetwork() internal returns(bool){
        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet
            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
            oraclize_setNetworkName("eth_mainnet");
            return true;
        }
        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet
            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
            oraclize_setNetworkName("eth_ropsten3");
            return true;
        }
        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet
            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
            oraclize_setNetworkName("eth_kovan");
            return true;
        }
        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet
            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
            oraclize_setNetworkName("eth_rinkeby");
            return true;
        }
        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge
            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
            return true;
        }
        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide
            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
            return true;
        }
        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity
            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
            return true;
        }
        return false;
    }
    function __callback(bytes32 myid, string result) public {
        __callback(myid, result, new bytes(0));
    }
    function __callback(bytes32 myid, string result, bytes proof) public {
      return;
      myid; result; proof; // Silence compiler warnings
    }
    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource);
    }
    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource, gaslimit);
    }
    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(0, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(timestamp, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(0, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_cbAddress() oraclizeAPI internal returns (address){
        return oraclize.cbAddress();
    }
    function oraclize_setProof(byte proofP) oraclizeAPI internal {
        return oraclize.setProofType(proofP);
    }
    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {
        return oraclize.setCustomGasPrice(gasPrice);
    }
    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){
        return oraclize.randomDS_getSessionPubKeyHash();
    }
    function getCodeSize(address _addr) constant internal returns(uint _size) {
        assembly {
            _size := extcodesize(_addr)
        }
    }
    function parseAddr(string _a) internal pure returns (address){
        bytes memory tmp = bytes(_a);
        uint160 iaddr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i=2; i<2+2*20; i+=2){
            iaddr *= 256;
            b1 = uint160(tmp[i]);
            b2 = uint160(tmp[i+1]);
            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;
            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;
            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;
            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;
            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;
            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;
            iaddr += (b1*16+b2);
        }
        return address(iaddr);
    }
    function strCompare(string _a, string _b) internal pure returns (int) {
        bytes memory a = bytes(_a);
        bytes memory b = bytes(_b);
        uint minLength = a.length;
        if (b.length < minLength) minLength = b.length;
        for (uint i = 0; i < minLength; i ++)
            if (a[i] < b[i])
                return -1;
            else if (a[i] > b[i])
                return 1;
        if (a.length < b.length)
            return -1;
        else if (a.length > b.length)
            return 1;
        else
            return 0;
    }
    function indexOf(string _haystack, string _needle) internal pure returns (int) {
        bytes memory h = bytes(_haystack);
        bytes memory n = bytes(_needle);
        if(h.length < 1 || n.length < 1 || (n.length > h.length))
            return -1;
        else if(h.length > (2**128 -1))
            return -1;
        else
        {
            uint subindex = 0;
            for (uint i = 0; i < h.length; i ++)
            {
                if (h[i] == n[0])
                {
                    subindex = 1;
                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])
                    {
                        subindex++;
                    }
                    if(subindex == n.length)
                        return int(i);
                }
            }
            return -1;
        }
    }
    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _be = bytes(_e);
        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
        bytes memory babcde = bytes(abcde);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];
        return string(babcde);
    }
    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {
        return strConcat(_a, _b, _c, _d, "");
    }
    function strConcat(string _a, string _b, string _c) internal pure returns (string) {
        return strConcat(_a, _b, _c, "", "");
    }
    function strConcat(string _a, string _b) internal pure returns (string) {
        return strConcat(_a, _b, "", "", "");
    }
    // parseInt
    function parseInt(string _a) internal pure returns (uint) {
        return parseInt(_a, 0);
    }
    // parseInt(parseFloat*10^_b)
    function parseInt(string _a, uint _b) internal pure returns (uint) {
        bytes memory bresult = bytes(_a);
        uint mint = 0;
        bool decimals = false;
        for (uint i=0; i<bresult.length; i++){
            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){
                if (decimals){
                   if (_b == 0) break;
                    else _b--;
                }
                mint *= 10;
                mint += uint(bresult[i]) - 48;
            } else if (bresult[i] == 46) decimals = true;
        }
        if (_b > 0) mint *= 10**_b;
        return mint;
    }
    function uint2str(uint i) internal pure returns (string){
        if (i == 0) return "0";
        uint j = i;
        uint len;
        while (j != 0){
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (i != 0){
            bstr[k--] = byte(48 + i % 10);
            i /= 10;
        }
        return string(bstr);
    }
    using CBOR for Buffer.buffer;
    function stra2cbor(string[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeString(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    function ba2cbor(bytes[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeBytes(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    string oraclize_network_name;
    function oraclize_setNetworkName(string _network_name) internal {
        oraclize_network_name = _network_name;
    }
    function oraclize_getNetworkName() internal view returns (string) {
        return oraclize_network_name;
    }
    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){
        require((_nbytes > 0) && (_nbytes <= 32));
        // Convert from seconds to ledger timer ticks
        _delay *= 10;
        bytes memory nbytes = new bytes(1);
        nbytes[0] = byte(_nbytes);
        bytes memory unonce = new bytes(32);
        bytes memory sessionKeyHash = new bytes(32);
        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
        assembly {
            mstore(unonce, 0x20)
            // the following variables can be relaxed
            // check relaxed random contract under ethereum-examples repo
            // for an idea on how to override and replace comit hash vars
            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))
            mstore(sessionKeyHash, 0x20)
            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)
        }
        bytes memory delay = new bytes(32);
        assembly {
            mstore(add(delay, 0x20), _delay)
        }
        bytes memory delay_bytes8 = new bytes(8);
        copyBytes(delay, 24, 8, delay_bytes8, 0);
        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];
        bytes32 queryId = oraclize_query("random", args, _customGasLimit);
        bytes memory delay_bytes8_left = new bytes(8);
        assembly {
            let x := mload(add(delay_bytes8, 0x20))
            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))
        }
        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));
        return queryId;
    }
    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {
        oraclize_randomDS_args[queryId] = commitment;
    }
    mapping(bytes32=>bytes32) oraclize_randomDS_args;
    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;
    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){
        bool sigok;
        address signer;
        bytes32 sigr;
        bytes32 sigs;
        bytes memory sigr_ = new bytes(32);
        uint offset = 4+(uint(dersig[3]) - 0x20);
        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);
        bytes memory sigs_ = new bytes(32);
        offset += 32 + 2;
        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);
        assembly {
            sigr := mload(add(sigr_, 32))
            sigs := mload(add(sigs_, 32))
        }
        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);
        if (address(keccak256(pubkey)) == signer) return true;
        else {
            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);
            return (address(keccak256(pubkey)) == signer);
        }
    }
    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {
        bool sigok;
        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)
        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);
        copyBytes(proof, sig2offset, sig2.length, sig2, 0);
        bytes memory appkey1_pubkey = new bytes(64);
        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);
        bytes memory tosign2 = new bytes(1+65+32);
        tosign2[0] = byte(1); //role
        copyBytes(proof, sig2offset-65, 65, tosign2, 1);
        bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);
        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);
        if (sigok == false) return false;
        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)
        bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
        bytes memory tosign3 = new bytes(1+65);
        tosign3[0] = 0xFE;
        copyBytes(proof, 3, 65, tosign3, 1);
        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);
        copyBytes(proof, 3+65, sig3.length, sig3, 0);
        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);
        return sigok;
    }
    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        require((_proof[0] == "L") && (_proof[1] == "P") && (_proof[2] == 1));
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        require(proofVerified);
        _;
    }
    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        if ((_proof[0] != "L")||(_proof[1] != "P")||(_proof[2] != 1)) return 1;
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        if (proofVerified == false) return 2;
        return 0;
    }
    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){
        bool match_ = true;
        require(prefix.length == n_random_bytes);
        for (uint256 i=0; i< n_random_bytes; i++) {
            if (content[i] != prefix[i]) match_ = false;
        }
        return match_;
    }
    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){
        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)
        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;
        bytes memory keyhash = new bytes(32);
        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);
        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;
        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);
        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);
        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)
        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;
        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.
        // This is to verify that the computed args match with the ones specified in the query.
        bytes memory commitmentSlice1 = new bytes(8+1+32);
        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);
        bytes memory sessionPubkey = new bytes(64);
        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;
        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);
        bytes32 sessionPubkeyHash = sha256(sessionPubkey);
        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match
            delete oraclize_randomDS_args[queryId];
        } else return false;
        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)
        bytes memory tosign1 = new bytes(32+8+1+32);
        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);
        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;
        // verify if sessionPubkeyHash was verified already, if not.. let's do it!
        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){
            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);
        }
        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {
        uint minLength = length + toOffset;
        // Buffer too small
        require(to.length >= minLength); // Should be a better way?
        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables
        uint i = 32 + fromOffset;
        uint j = 32 + toOffset;
        while (i < (32 + fromOffset + length)) {
            assembly {
                let tmp := mload(add(from, i))
                mstore(add(to, j), tmp)
            }
            i += 32;
            j += 32;
        }
        return to;
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    // Duplicate Solidity's ecrecover, but catching the CALL return value
    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {
        // We do our own memory management here. Solidity uses memory offset
        // 0x40 to store the current end of memory. We write past it (as
        // writes are memory extensions), but don't update the offset so
        // Solidity will reuse it. The memory used here is only needed for
        // this context.
        // FIXME: inline assembly can't access return values
        bool ret;
        address addr;
        assembly {
            let size := mload(0x40)
            mstore(size, hash)
            mstore(add(size, 32), v)
            mstore(add(size, 64), r)
            mstore(add(size, 96), s)
            // NOTE: we can reuse the request memory because we deal with
            //       the return code
            ret := call(3000, 1, 0, size, 128, size, 32)
            addr := mload(size)
        }
        return (ret, addr);
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {
        bytes32 r;
        bytes32 s;
        uint8 v;
        if (sig.length != 65)
          return (false, 0);
        // The signature format is a compact form of:
        //   {bytes32 r}{bytes32 s}{uint8 v}
        // Compact means, uint8 is not padded to 32 bytes.
        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            // Here we are loading the last 32 bytes. We exploit the fact that
            // 'mload' will pad with zeroes if we overread.
            // There is no 'mload8' to do this, but that would be nicer.
            v := byte(0, mload(add(sig, 96)))
            // Alternative solution:
            // 'byte' is not working due to the Solidity parser, so lets
            // use the second best option, 'and'
            // v := and(mload(add(sig, 65)), 255)
        }
        // albeit non-transactional signatures are not specified by the YP, one would expect it
        // to match the YP range of [27, 28]
        //
        // geth uses [0, 1] and some clients have followed. This might change, see:
        //  https://github.com/ethereum/go-ethereum/issues/2053
        if (v < 27)
          v += 27;
        if (v != 27 && v != 28)
            return (false, 0);
        return safer_ecrecover(hash, v, r, s);
    }
    function safeMemoryCleaner() internal pure {
        assembly {
            let fmem := mload(0x40)
            codecopy(fmem, codesize, sub(msize, fmem))
        }
    }
}
// </ORACLIZE_API>
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
contract SafeMath {
/**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
  */
  constructor() public {
    owner = msg.sender;
  }
  /**
    * @dev Throws if called by any account other than the owner.
  */
  modifier onlyOwner() {
    require(msg.sender == owner, "sender is not owner");
    _;
  }
  /**
    * @dev Allows the current owner to transfer control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
  */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0), "newOwner addres is zero");
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
contract lottery is Ownable, usingOraclize, SafeMath {
  /*
    * checks only Drawer address is calling
  */
  modifier onlyDrawer() {
    require(msg.sender == drawerAddress || msg.sender == owner, "sender is not drawerAddress");
    _;
  }
  /*
    * checks address is zero or not.
  */
  modifier isAddressZero {
    require(msg.sender != address(0), "new address is zero");
    _;
  }
  struct Game {
    uint endTime;
    uint ticketPrice;
    uint accumJackpotAmounts;
    bytes winningNumbers;
    bytes32 queryId;
    Ticket[] tickets;
    string hashString;
    mapping (byte => bool) winNumMapping;
    mapping (address => uint) playerTicketCount;
    mapping (uint => uint) winPlayersCount;
    mapping (uint => bool) winners;
  }
  struct Ticket {
    uint256 time;
    address player;
    bytes   numbers;
  }
  address public adminAddress;
  address public drawerAddress;
  address public feeAddress;
  bool public gameStatus;
  uint public adminFee;
  uint public gameNumber;
  uint public numbersStart;
  uint public numbersCount;
  uint public numbersCountMax;
  uint public ticketPrice;
  uint public prizeStart;
  uint public prizeNumCount;
  uint[] public winPercent;
  uint public orclizeGasPrice;
  mapping (uint => Game) public games;
  // For Players Event
  event LogBuyTicket(uint _time, address _player, bytes _numbers, uint _count, uint _ticketTotalCount);
  // For Owner Event
  event LogEndGameBegin(bool _success);
  event LogEndGameSuccess(bool _success);
  event LogEndGameFail(bool _success);
  event LogStartNewGame(bool _start, uint _gameNumber, bytes _winNumbers);
  constructor() public payable {
    // sets the Ledger authenticity proof in the constructor
    oraclize_setProof(proofType_Ledger);
    // Lottery numbers range ( numbersStart <= gameNumbers <= numbersCountMax)
    numbersStart = 1;
    numbersCount = 5;
    numbersCountMax = 25;
    ticketPrice = .01 ether;
    winPercent = [0, 0, 0, 20, 20, 60];
    prizeStart = 3;   //winPercent Index start
    prizeNumCount = 3;
    // operator`s fee 10%
    adminAddress = msg.sender;
    drawerAddress = 0xd36C57086c9fC2d06C3009207F0d4D818CAc4F63;
    feeAddress = 0x798F4A40dc6C45a812f1549402E3D9E5BA5fc9a5;
    adminFee = 10;
    gameStatus = true;
    games[gameNumber].ticketPrice = ticketPrice;
    // oraclize paramaters
    orclizeGasPrice = 400000;
  }
  /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/
  function setAdminAddress(address _admin) public onlyOwner isAddressZero {
    adminAddress = _admin;
  }
  function setDrawerAddress(address _drawer) public onlyOwner isAddressZero {
    drawerAddress = _drawer;
  }
  function setFeeAddress(address _feeAddr) public onlyOwner isAddressZero {
    feeAddress = _feeAddr;
  }
  function setAdminFee(uint _fee) public onlyOwner isAddressZero {
    require(_fee >= 0, "Fee is under 0");
    adminFee = _fee;
  }
  function setTicketPrice(uint _price) public onlyOwner isAddressZero {
    require(_price >= 0, "Price is under 0");
    ticketPrice = _price;
  }
  function kill() public onlyOwner isAddressZero {
    selfdestruct(owner);
  }
  function startGame(uint _carryOverJackpot, uint[] _totalWinCount) external onlyDrawer {
    // Set game win players count.
    for(uint i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < _totalWinCount[i]) {
        games[gameNumber].winPlayersCount[i] = _totalWinCount[i];
      }
    }
    // Start New Game.
    gameNumber++;
    games[gameNumber].ticketPrice = ticketPrice;
    games[gameNumber].accumJackpotAmounts = _carryOverJackpot;
    gameStatus = true;
    emit LogStartNewGame(gameStatus, gameNumber-1, games[gameNumber-1].winningNumbers);
  }
  function endGame() external onlyDrawer {
    gameStatus = false;
    uint numberOfBytes = 28; // number of random bytes we want the datasource to return
    uint delay = 0; // number of seconds to wait before the execution takes place
    uint callbackGas = orclizeGasPrice; // amount of gas we want Oraclize to set for the callback function
    // this function internally generates the correct oraclize_query and returns its queryId
    games[gameNumber].queryId = oraclize_newRandomDSQuery(delay, numberOfBytes, callbackGas);
    emit LogEndGameBegin(true);
  }
  function buyTicket(bytes _ticketNumber, uint _ticketCount) external payable {
    require(gameStatus, "game is processing sth");
    require(_ticketCount > 0, "ticket count should be not under 0");
    require(msg.value == mul(ticketPrice, _ticketCount), "ticket price is not equal");
    require(_ticketNumber.length == mul(numbersCount, _ticketCount), "ticket number`s length is not match");
    bytes memory pickNumbers = new bytes(numbersCount);
    for(uint i = 0; i < _ticketCount; i++) {
      for(uint j = 0; j < numbersCount; j++) {
        pickNumbers[j] = _ticketNumber[j + (numbersCount * i)];
        require(checkPickNumbers(pickNumbers[j]), "player`s pick number is wrong");
      }
      require(checkDuplicates(pickNumbers), "Lottery Numbers are duplicated");
      games[gameNumber].tickets.push(Ticket(block.timestamp, msg.sender, pickNumbers));
      games[gameNumber].playerTicketCount[msg.sender]++;
    }
    emit LogBuyTicket(block.timestamp, msg.sender, _ticketNumber, _ticketCount, games[gameNumber].tickets.length);
  }
  function getGameHistory(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint accumJackpot,
      uint ticketCount,
      uint adminFee,
      uint[] winningPercent,
      uint[] winPlayersCount,
      uint[] winNumbers
  ) {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    winNumbers = new uint[](numbersCount);
    winningPercent = new uint[](numbersCount + 1);
    winPlayersCount = new uint[](numbersCount + 1);
    uint numbersIndex;
    // save endtime and jackpot.
    endTime = games[_gameNumber].endTime;
    ticketCount = tickets.length;
    winningPercent = winPercent;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    adminFee = adminFee;
    // save game win numbers.
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        winNumbers[numbersIndex++] = i;
      }
    }
    // save game winners
    for(i = prizeStart; i < numbersCount + 1; i++) {
      winPlayersCount[i] = games[_gameNumber].winPlayersCount[i];
    }
  }
  function getPlayerAllTickets(address _player, uint _start, uint _end) external view 
    returns (
      uint[] winNumbers,
      uint[] myTickets
    )
  {
    require(_player != address(0),"address should be not 0");
    winNumbers = new uint[]((_end - _start) * numbersCount);
    uint winNumbersIndex;
    uint playerTicketIndex;
    uint playerTicketCount;
    // get all game win numbers.
    for(uint i = _start; i < _end; i++) {
      playerTicketCount += games[i].playerTicketCount[_player];
      for(uint j = 1; j < numbersCountMax + 1; j++) {
        if(games[i].winNumMapping[byte(j)]) {
          winNumbers[winNumbersIndex++] = j;
        }
      }
    }
    // get all player tickets.
    // numbersCount + 1 for gameNumber
    myTickets = new uint[](playerTicketCount * (numbersCount + 1));
    for(i = _start; i < _end; i++) {
      for(j = 0; j < games[i].tickets.length; j++) {
        if(games[i].tickets[j].player == _player) {
          // set Game Number
          myTickets[playerTicketIndex++] = i;
          // set Player Numbers
          for(uint k = 0; k < numbersCount; k++) {
            myTickets[playerTicketIndex++] = uint(games[i].tickets[j].numbers[k]);
          }
        }
      }
    }
  }
  function getPlayerTickets(address _player, uint _gameNumber) external view 
    returns (
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(_player != address(0),"address should be not 0");
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    numbers = new uint[](games[_gameNumber].playerTicketCount[_player] * numbersCount);
    time = new uint[](games[_gameNumber].playerTicketCount[_player]);
    uint timeIndex;
    uint numbersIndex;
    for(uint i = 0; i < tickets.length; i++) {
      if(tickets[i].player == _player) {
        time[timeIndex++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameWinners(uint _gameNumber) 
    external 
    view 
    returns (
      address[] player,
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    uint length;
    for(uint i = prizeStart; i < numbersCount + 1; i++){
      length += games[_gameNumber].winPlayersCount[i];
    }
    Ticket[] memory tickets = games[_gameNumber].tickets;
    player = new address[](length);
    time = new uint[](length);
    numbers = new uint[](length * numbersCount);
    uint index;
    uint numbersIndex;
    for(i = 0; i < tickets.length; i++) {
      if(games[_gameNumber].winners[i]) {
        player[index] = tickets[i].player;
        time[index++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameDetails(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint ticketPrice,
      uint ticketCount,
      uint accumJackpot,
      uint[] gameReward,
      uint[] numbers
    ) 
  {
    require(_gameNumber >= 0, "Game Number should be over 0");
    numbers = new uint[](numbersCount);
    gameReward = new uint[](numbersCount + 1);
    uint index;
    endTime = games[_gameNumber].endTime;
    ticketPrice = games[_gameNumber].ticketPrice;
    ticketCount = games[_gameNumber].tickets.length;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    gameReward = winPercent;
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        numbers[index++] = i;
      }
    }
  }
  function __callback(bytes32 _queryId, string _result, bytes _proof) public
  {
    require(msg.sender == oraclize_cbAddress(), "Should be eqaul to request");
    if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) == 0) {
      if(games[gameNumber].queryId == _queryId) {
        games[gameNumber].endTime = block.timestamp;
        uint jackpot = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice);// + games[gameNumber].accumJackpotAmounts;
        // send ethereum for operation cost.
        if(jackpot > 0) {
          feeAddress.transfer((jackpot * adminFee) / 100);
        }
        games[gameNumber].hashString = _result;
        games[gameNumber].winningNumbers = generateRandom(games[gameNumber].hashString, numbersCount, numbersCountMax);
        for (uint i = 0; i < games[gameNumber].winningNumbers.length; i++) {
          games[gameNumber].winNumMapping[games[gameNumber].winningNumbers[i]] = true;
        }
        emit LogEndGameSuccess(true);
      }
    }
    else {
      emit LogEndGameFail(false);
    }
  }
  function getGameDrawInfos() external view 
    returns (
      uint carryOverJackpot,
      uint totalTicketCount,
      uint totalWinPlayersCount,
      uint[] totalWinCount,
      uint[] playersAmounts
    ) 
  {
    uint jackpotAmounts = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice) + games[gameNumber].accumJackpotAmounts;
    jackpotAmounts -= ((games[gameNumber].tickets.length * games[gameNumber].ticketPrice) * adminFee) / 100;
    totalWinCount = new uint[](numbersCount + 1);
    playersAmounts = new uint[](numbersCount + 1);
    uint winNumberCount;
    uint sendedJackpotAmounts;
    // 1. pick win players.
    for(uint i = 0; i < games[gameNumber].tickets.length; i++) {
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if( games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])] ) {
          winNumberCount++;
        }
      }
      // 2. Win players counting.
      if(prizeStart <= winNumberCount) {
        totalWinCount[winNumberCount]++;
        totalWinPlayersCount++;
      }
      winNumberCount = 0;
    }
    // 3. calculate winners prizes.
    for(i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < totalWinCount[i]) {
        playersAmounts[i] = (jackpotAmounts * winPercent[i] / 100) / totalWinCount[i];
        sendedJackpotAmounts += (jackpotAmounts * winPercent[i] / 100);
      }
    }
    // 4. Set to carry over jackpot amounts.
    carryOverJackpot = jackpotAmounts - sendedJackpotAmounts;
    // 5. Set Total Ticket Count.
    totalTicketCount = games[gameNumber].tickets.length;
  }
  function getWinners(uint _start, uint _end) external view 
    returns (
      uint[] index,
      uint[] winCount
    ) 
  {
    uint ticketIndex;
    uint winNumberCount;
    index = new uint[](getWinnersCount(_start, _end));
    winCount = new uint[](getWinnersCount(_start, _end));
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // set winners
      if(prizeStart <= winNumberCount) {
        index[ticketIndex] = i;
        winCount[ticketIndex++] = winNumberCount;
      }
      winNumberCount = 0;
    }
  }
  function () public payable {
  }
  function sendRewardToPlayers(uint[] _winnerIndex, uint[] _winReward) external onlyDrawer {
    require(_winnerIndex.length > 0, "winner index is empty");
    require(_winReward.length > 0, "win numbers count is empty");
    for(uint i = 0; i < _winnerIndex.length; i++) {
      games[gameNumber].winners[_winnerIndex[i]] = true;
      games[gameNumber].tickets[_winnerIndex[i]].player.transfer(_winReward[i]);
    }
  }
  function generateRandom(string _stringHash, uint numbersCount, uint numbersCountMax) 
    internal
    pure 
    returns (
      bytes
    ) 
  {
    bytes32 random = keccak256(_stringHash);
    bytes memory allNumbers = new bytes(numbersCountMax);
    bytes memory winNumbers = new bytes(numbersCount);
    for (uint i = 0; i < numbersCountMax; i++) {
      allNumbers[i] = byte(i + 1);
    }
    for (i = 0; i < numbersCount; i++) {
      uint n = numbersCountMax - i;
      uint r = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % n;
      winNumbers[i] = allNumbers[r];
      allNumbers[r] = allNumbers[n - 1];
    }
    return winNumbers;
  }
  function getWinnersCount(uint _start, uint _end) internal view returns (uint ret) 
  {
    uint winNumberCount;
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // increase winner players count
      if(prizeStart <= winNumberCount) {
        ret++;
      }
      winNumberCount = 0;
    }
  }
  function checkPickNumbers(byte _number) internal returns (bool) {
    if(numbersStart <= uint(_number) && uint(_number) <= numbersCountMax) {
      return true;
    } else {
      return false;
    }
  }
  function checkDuplicates(bytes _array) internal pure returns (bool) {
    for (uint i = 0; i < _array.length - 1; i++) {
      for (uint j = i + 1; j < _array.length; j++) {
        if (_array[i] == _array[j]) return false;
      }
    }
    return true;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"games","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"accumJackpotAmounts","type":"uint256"},{"name":"winningNumbers","type":"bytes"},{"name":"queryId","type":"bytes32"},{"name":"hashString","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ticketPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"}],"name":"setTicketPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameDetails","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"gameReward","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameWinners","outputs":[{"name":"player","type":"address[]"},{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"myid","type":"bytes32"},{"name":"result","type":"string"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getWinners","outputs":[{"name":"index","type":"uint256[]"},{"name":"winCount","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_admin","type":"address"}],"name":"setAdminAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"drawerAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_winnerIndex","type":"uint256[]"},{"name":"_winReward","type":"uint256[]"}],"name":"sendRewardToPlayers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_queryId","type":"bytes32"},{"name":"_result","type":"string"},{"name":"_proof","type":"bytes"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feeAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"winPercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_ticketNumber","type":"bytes"},{"name":"_ticketCount","type":"uint256"}],"name":"buyTicket","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getGameDrawInfos","outputs":[{"name":"carryOverJackpot","type":"uint256"},{"name":"totalTicketCount","type":"uint256"},{"name":"totalWinPlayersCount","type":"uint256"},{"name":"totalWinCount","type":"uint256[]"},{"name":"playersAmounts","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"endGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"gameStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"numbersStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"orclizeGasPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_feeAddr","type":"address"}],"name":"setFeeAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_fee","type":"uint256"}],"name":"setAdminFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getPlayerAllTickets","outputs":[{"name":"winNumbers","type":"uint256[]"},{"name":"myTickets","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_gameNumber","type":"uint256"}],"name":"getPlayerTickets","outputs":[{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameHistory","outputs":[{"name":"endTime","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"adminFee","type":"uint256"},{"name":"winningPercent","type":"uint256[]"},{"name":"winPlayersCount","type":"uint256[]"},{"name":"winNumbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_drawer","type":"address"}],"name":"setDrawerAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_carryOverJackpot","type":"uint256"},{"name":"_totalWinCount","type":"uint256[]"}],"name":"startGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"gameNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeNumCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCountMax","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_time","type":"uint256"},{"indexed":false,"name":"_player","type":"address"},{"indexed":false,"name":"_numbers","type":"bytes"},{"indexed":false,"name":"_count","type":"uint256"},{"indexed":false,"name":"_ticketTotalCount","type":"uint256"}],"name":"LogBuyTicket","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameBegin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameFail","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_start","type":"bool"},{"indexed":false,"name":"_gameNumber","type":"uint256"},{"indexed":false,"name":"_winNumbers","type":"bytes"}],"name":"LogStartNewGame","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0xa85ded59ef1824154615bf2a88d136d1356839ac
Contract Name: Lottery
Contract_Source_Code: 
pragma solidity ^0.4.24;
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}
contract Lottery {
    using SafeMath for uint256;
    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%
    uint256[] public DAILY_INTEREST = [111, 133, 222, 333, 444];        // 1.11%, 2.22%, 3.33%, 4.44%
    uint256 public MARKETING_AND_TEAM_FEE = 1000;                       // 10%
    uint256 public referralPercents = 1000;                             // 10%
    uint256 constant public MAX_DIVIDEND_RATE = 25000;                  // 250%
    uint256 constant public MINIMUM_DEPOSIT = 100 finney;               // 0.1 eth
    uint256 public wave = 0;
    struct Deposit {
        uint256 amount;
        uint256 interest;
        uint256 withdrawedRate;
    }
    struct User {
        address referrer;
        uint256 referralAmount;
        uint256 firstTime;
        uint256 lastPayment;
        Deposit[] deposits;
        uint256 referBonus;
    }
    address public marketingAndTeam = 0xFaea7fa229C29526698657e7Ab7063E20581A50c; // need to change
    address public owner = 0x4e3e605b9f7b333e413E1CD9E577f2eba447f876;
    mapping(uint256 => mapping(address => User)) public users;
    event InvestorAdded(address indexed investor);
    event ReferrerAdded(address indexed investor, address indexed referrer);
    event DepositAdded(address indexed investor, uint256 indexed depositsCount, uint256 amount);
    event UserDividendPayed(address indexed investor, uint256 dividend);
    event DepositDividendPayed(address indexed investor, uint256 indexed index, uint256 deposit, uint256 totalPayed, uint256 dividend);
    event FeePayed(address indexed investor, uint256 amount);
    event BalanceChanged(uint256 balance);
    event NewWave();
    function() public payable {
        if(msg.value == 0) {
            // Dividends
            withdrawDividends();
            return;
        }
        // Deposit
        doInvest();
    }
    function withdrawDividends() internal {
        uint256 dividendsSum = getDividends(msg.sender);
        require(dividendsSum > 0);
        if (address(this).balance <= dividendsSum) {
            wave = wave.add(1);
            dividendsSum = address(this).balance;
            emit NewWave();
        }
        msg.sender.transfer(dividendsSum);
        emit UserDividendPayed(msg.sender, dividendsSum);
        emit BalanceChanged(address(this).balance);
    }
    function getDividends(address wallet) internal returns(uint256 sum) {
        User storage user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawRate = dividendRate(msg.sender, i);
            user.deposits[i].withdrawedRate = user.deposits[i].withdrawedRate.add(withdrawRate);
            sum = sum.add(user.deposits[i].amount.mul(withdrawRate).div(ONE_HUNDRED_PERCENTS));
            emit DepositDividendPayed(
                msg.sender,
                i,
                user.deposits[i].amount,
                user.deposits[i].amount.mul(user.deposits[i].withdrawedRate.div(ONE_HUNDRED_PERCENTS)),
                user.deposits[i].amount.mul(withdrawRate.div(ONE_HUNDRED_PERCENTS))
            );
        }
        user.lastPayment = now;
        sum = sum.add(user.referBonus);
        user.referBonus = 0;
    }
    function dividendRate(address wallet, uint256 index) internal view returns(uint256 rate) {
        User memory user = users[wave][wallet];
        uint256 duration = now.sub(user.lastPayment);
        rate = user.deposits[index].interest.mul(duration).div(1 days);
        uint256 leftRate = MAX_DIVIDEND_RATE.sub(user.deposits[index].withdrawedRate);
        rate = min(rate, leftRate);
    }
    function doInvest() internal {
        uint256 investment = msg.value;
        require (investment >= MINIMUM_DEPOSIT);
        User storage user = users[wave][msg.sender];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(msg.sender);
        }
        // Add referral if possible
        if (user.referrer == address(0) && msg.data.length == 20 && user.firstTime == now) {
            address newReferrer = _bytesToAddress(msg.data);
            if (newReferrer != address(0) && newReferrer != msg.sender && users[wave][newReferrer].firstTime > 0) {
                user.referrer = newReferrer;
                emit ReferrerAdded(msg.sender, newReferrer);
            }
        }
        // Referrers fees
        if (user.referrer != address(0)) {
            uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
            users[wave][user.referrer].referralAmount = users[wave][user.referrer].referralAmount.add(investment);
            users[wave][user.referrer].referBonus = users[wave][user.referrer].referBonus.add(refAmount);
        }
        // Reinvest
        investment = investment.add(getDividends(msg.sender));
        // Create deposit
        user.deposits.push(Deposit({
            amount: investment,
            interest: getUserInterest(msg.sender),
            withdrawedRate: 0
        }));
        emit DepositAdded(msg.sender, user.deposits.length, investment);
        // Marketing and Team fee
        uint256 marketingAndTeamFee = msg.value.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
        marketingAndTeam.transfer(marketingAndTeamFee);
        emit FeePayed(msg.sender, marketingAndTeamFee);
        emit BalanceChanged(address(this).balance);
    }
    function getUserInterest(address wallet) public view returns (uint256) {
        User memory user = users[wave][wallet];
        if (user.referralAmount < 1 ether) {
            if(user.referrer == address(0)) return DAILY_INTEREST[0];
            return DAILY_INTEREST[1];
        } else if (user.referralAmount < 10 ether) {
            return DAILY_INTEREST[2];
        } else if (user.referralAmount < 20 ether) {
            return DAILY_INTEREST[3];
        } else {
            return DAILY_INTEREST[4];
        }
    }
    function _bytesToAddress(bytes data) private pure returns(address addr) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            addr := mload(add(data, 20)) 
        }
    }
    function min(uint256 a, uint256 b) internal pure returns(uint256) {
        if(a < b) return a;
        return b;
    }
    function dividendsSumForUser(address wallet) external view returns(uint256 dividendsSum) {
        User memory user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawAmount = user.deposits[i].amount.mul(dividendRate(wallet, i)).div(ONE_HUNDRED_PERCENTS);
            dividendsSum = dividendsSum.add(withdrawAmount);
        }
        dividendsSum = dividendsSum.add(user.referBonus);
        dividendsSum = min(dividendsSum, address(this).balance);
    }
    function changeInterest(uint256[] interestList) external {
        require(address(msg.sender) == owner);
        DAILY_INTEREST = interestList;
    }
    function changeTeamFee(uint256 feeRate) external {
        require(address(msg.sender) == owner);
        MARKETING_AND_TEAM_FEE = feeRate;
    }
    function virtualInvest(address from, uint256 amount) public {
        require(address(msg.sender) == owner);
        User storage user = users[wave][from];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(from);
        }
        // Reinvest
        amount = amount.add(getDividends(from));
        user.deposits.push(Deposit({
            amount: amount,
            interest: getUserInterest(from),
            withdrawedRate: 0
        }));
        emit DepositAdded(from, user.deposits.length, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"feeRate","type":"uint256"}],"name":"changeTeamFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"marketingAndTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"DAILY_INTEREST","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"wave","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"amount","type":"uint256"}],"name":"virtualInvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"ONE_HUNDRED_PERCENTS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MARKETING_AND_TEAM_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"address"}],"name":"users","outputs":[{"name":"referrer","type":"address"},{"name":"referralAmount","type":"uint256"},{"name":"firstTime","type":"uint256"},{"name":"lastPayment","type":"uint256"},{"name":"referBonus","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"getUserInterest","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MAX_DIVIDEND_RATE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"referralPercents","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"interestList","type":"uint256[]"}],"name":"changeInterest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"dividendsSumForUser","outputs":[{"name":"dividendsSum","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MINIMUM_DEPOSIT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"}],"name":"InvestorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"referrer","type":"address"}],"name":"ReferrerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"depositsCount","type":"uint256"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"DepositAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"UserDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"index","type":"uint256"},{"indexed":false,"name":"deposit","type":"uint256"},{"indexed":false,"name":"totalPayed","type":"uint256"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"DepositDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"FeePayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"balance","type":"uint256"}],"name":"BalanceChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"NewWave","type":"event"}]
Contract_Creation_Code_16:
608060405260a060405190810160405280606f61ffff168152602001608561ffff16815260200160de61ffff16815260200161014d61ffff1681526020016101bc61ffff1681525060009060056200005992919062000129565b506103e86001556103e8600255600060035573faea7fa229c29526698657e7ab7063e20581a50c600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550734e3e605b9f7b333e413e1cd9e577f2eba447f876600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200012257600080fd5b50620001a9565b8280548282559060005260206000209081019282156200016e579160200282015b828111156200016d578251829061ffff169055916020019190600101906200014a565b5b5090506200017d919062000181565b5090565b620001a691905b80821115620001a257600081600090555060010162000188565b5090565b90565b611d1580620001b96000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063072419f4146100fc5780630947140f1461012957806331ddcc57146101805780636fe15b44146101c15780637247a50d146101ec57806375272043146102395780638da5cb5b14610264578063a1215b3e146102bb578063b9d02df4146102e6578063bf8853c61461038f578063d0056f89146103e6578063e623f34714610411578063ea727ba21461043c578063ebe4c0d114610477578063f19451d8146104ce575b60003414156100f1576100ec6104f9565b6100fa565b6100f961067e565b5b005b34801561010857600080fd5b5061012760048036038101908080359060200190929190505050610e32565b005b34801561013557600080fd5b5061013e610e98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018c57600080fd5b506101ab60048036038101908080359060200190929190505050610ebe565b6040518082815260200191505060405180910390f35b3480156101cd57600080fd5b506101d6610ee1565b6040518082815260200191505060405180910390f35b3480156101f857600080fd5b50610237600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ee7565b005b34801561024557600080fd5b5061024e6110e9565b6040518082815260200191505060405180910390f35b34801561027057600080fd5b506102796110ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c757600080fd5b506102d0611115565b6040518082815260200191505060405180910390f35b3480156102f257600080fd5b5061033160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111b565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561039b57600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117e565b6040518082815260200191505060405180910390f35b3480156103f257600080fd5b506103fb611405565b6040518082815260200191505060405180910390f35b34801561041d57600080fd5b5061042661140b565b6040518082815260200191505060405180910390f35b34801561044857600080fd5b50610475600480360381019080803590602001908201803590602001919091929391929390505050611411565b005b34801561048357600080fd5b506104b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611483565b6040518082815260200191505060405180910390f35b3480156104da57600080fd5b506104e36116b5565b6040518082815260200191505060405180910390f35b6000610504336116c1565b905060008111151561051557600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311115156105985761054b600160035461196790919063ffffffff16565b6003819055503073ffffffffffffffffffffffffffffffffffffffff163190507f2fc830d94028b298fd4b7dbe301cdf47799bd13849d7ca4b6f47f199560adc0d60405160405180910390a15b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105de573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f5e93d015f6a0a56fff61b5083f27af603f38199c6135fdc2bccf87274d40696c826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a150565b600080600080600034945067016345785d8a000085101515156106a057600080fd5b60066000600354815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600084600201541415610757574284600201819055504284600301819055503373ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156107bb575060146000369050145b80156107ca5750428460020154145b1561097b5761080b6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611983565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561087657503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156108d75750600060066000600354815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154115b1561097a57828460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fec49a3c8c4ae06c18160fe86119c381c9d213ac3e052ff35b594da8687b193c760405160405180910390a35b5b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c13576109fe6127106109f06002548861199190919063ffffffff16565b6119c990919063ffffffff16565b9150610a8c8560066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610b958260066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055505b610c2e610c1f336116c1565b8661196790919063ffffffff16565b945083600401606060405190810160405280878152602001610c4f3361117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505083600401805490503373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808876040518082815260200191505060405180910390a3610d24612710610d166001543461199190919063ffffffff16565b6119c990919063ffffffff16565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d8e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2899dc8c12def1caa9accb64257cf2fd9f960f21bb27a560a757eae3c2ec43c1826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a15050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8e57600080fd5b8060018190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481101515610ecd57fe5b906000526020600020016000915090505481565b60035481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4557600080fd5b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600201541415610ffc574281600201819055504281600301819055508273ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b611017611008846116c1565b8361196790919063ffffffff16565b9150806004016060604051908101604052808481526020016110388661117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505080600401805490508373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808846040518082815260200191505060405180910390a3505050565b61271081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060050154905085565b6000611188611c2a565b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156112d057838290600052602060002090600302016060604051908101604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061127f565b5050505081526020016005820154815250509050670de0b6b3a76400008160200151101561137457600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156113525760008081548110151561134057fe5b906000526020600020015491506113ff565b6000600181548110151561136257fe5b906000526020600020015491506113ff565b678ac7230489e80000816020015110156113aa576000600281548110151561139857fe5b906000526020600020015491506113ff565b6801158e460913d00000816020015110156113e157600060038154811015156113cf57fe5b906000526020600020015491506113ff565b600060048154811015156113f157fe5b906000526020600020015491505b50919050565b6161a881565b60025481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146d57600080fd5b81816000919061147e929190611c77565b505050565b600061148d611c2a565b60008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156115d8578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611587565b5050505081526020016005820154815250509250600091505b8260800151518210156116715761164d61271061163f61161188866119df565b86608001518681518110151561162357fe5b906020019060200201516000015161199190919063ffffffff16565b6119c990919063ffffffff16565b9050611662818561196790919063ffffffff16565b935081806001019250506115f1565b6116888360a001518561196790919063ffffffff16565b93506116ab843073ffffffffffffffffffffffffffffffffffffffff1631611bf5565b9350505050919050565b67016345785d8a000081565b60008060008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091505b82600401805490508210156119335761173933836119df565b905061177081846004018481548110151561175057fe5b90600052602060002090600302016002015461196790919063ffffffff16565b836004018381548110151561178157fe5b9060005260206000209060030201600201819055506117f16117e26127106117d48487600401878154811015156117b457fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119c990919063ffffffff16565b8561196790919063ffffffff16565b9350813373ffffffffffffffffffffffffffffffffffffffff167ffaa4a63f8135e85684de273912ecf6efae3d807cffdf88015c5aa4112801919d856004018581548110151561183d57fe5b9060005260206000209060030201600001546118ba611889612710896004018981548110151561186957fe5b9060005260206000209060030201600201546119c990919063ffffffff16565b886004018881548110151561189a57fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119036118d2612710886119c990919063ffffffff16565b89600401898154811015156118e357fe5b90600052602060002090600302016000015461199190919063ffffffff16565b60405180848152602001838152602001828152602001935050505060405180910390a38180600101925050611720565b42836003018190555061195383600501548561196790919063ffffffff16565b935060008360050181905550505050919050565b6000818301905082811015151561197a57fe5b80905092915050565b600060148201519050919050565b6000808314156119a457600090506119c3565b81830290508183828115156119b557fe5b041415156119bf57fe5b8090505b92915050565b600081838115156119d657fe5b04905092915050565b60006119e9611c2a565b60008060066000600354815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611b34578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611ae3565b5050505081526020016005820154815250509250611b5f836060015142611c1190919063ffffffff16565b9150611ba862015180611b9a84866080015189815181101515611b7e57fe5b906020019060200201516020015161199190919063ffffffff16565b6119c990919063ffffffff16565b9350611bde836080015186815181101515611bbf57fe5b90602001906020020151604001516161a8611c1190919063ffffffff16565b9050611bea8482611bf5565b935050505092915050565b600081831015611c0757829050611c0b565b8190505b92915050565b6000828211151515611c1f57fe5b818303905092915050565b60c060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215611cb3579160200282015b82811115611cb2578235825591602001919060010190611c97565b5b509050611cc09190611cc4565b5090565b611ce691905b80821115611ce2576000816000905550600101611cca565b5090565b905600a165627a7a72305820f7010d9778e88ad863a848d2c836dfddfa7da5967844f1d95debca0d6cde105b0029
Contract_Creation_Code_ARM:



Contract Adress: 0x5c479108c6ea493b39c4e52bcd6e827e792dd293
Contract Name: Doneth
Contract_Source_Code: 
pragma solidity ^0.4.15;
/**
 * @title Doneth (Doneth)
 * @dev Doneth is a contract that allows shared access to funds
 * in the form of Ether and ERC20 tokens. It is especially relevant
 * to donation based projects. The admins of the contract determine 
 * who is a member, and each member gets a number of shares. The 
 * number of shares each member has determines how much Ether/ERC20 
 * the member can withdraw from the contract.
 */
/*
 * Ownable
 *
 * Base contract with an owner.
 * Provides onlyOwner modifier, which prevents function from running
 * if it is called by anyone other than the owner.
 */
contract Ownable {
    address public owner;
    function Ownable() {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}
contract Doneth is Ownable {
    using SafeMath for uint256;  
    // Name of the contract
    string public name;
    // Sum of all shares allocated to members
    uint256 public totalShares;
    // Sum of all withdrawals done by members
    uint256 public totalWithdrawn;
    // Block number of when the contract was created
    uint256 public genesisBlockNumber;
    // Number of decimal places for floating point division
    uint256 constant public PRECISION = 18;
    // Variables for shared expense allocation
    uint256 public sharedExpense;
    uint256 public sharedExpenseWithdrawn;
    // Used to keep track of members
    mapping(address => Member) public members;
    address[] public memberKeys;
    struct Member {
        bool exists;
        bool admin;
        uint256 shares;
        uint256 withdrawn;
        string memberName;
        mapping(address => uint256) tokensWithdrawn;
    }
    // Used to keep track of ERC20 tokens used and how much withdrawn
    mapping(address => Token) public tokens;
    address[] public tokenKeys;
    struct Token {
        bool exists;
        uint256 totalWithdrawn;
    }
    function Doneth(string _contractName, string _founderName) {
        if (bytes(_contractName).length > 21) revert();
        if (bytes(_founderName).length > 21) revert();
        name = _contractName;
        genesisBlockNumber = block.number;
        addMember(msg.sender, 1, true, _founderName);
    }
    event Deposit(address from, uint value);
    event Withdraw(address from, uint value, uint256 newTotalWithdrawn);
    event TokenWithdraw(address from, uint value, address token, uint amount);
    event AddShare(address who, uint256 addedShares, uint256 newTotalShares);
    event RemoveShare(address who, uint256 removedShares, uint256 newTotalShares);
    event ChangePrivilege(address who, bool oldValue, bool newValue);
    event ChangeContractName(string oldValue, string newValue);
    event ChangeMemberName(address who, string oldValue, string newValue);
    event ChangeSharedExpense(uint256 contractBalance, uint256 oldValue, uint256 newValue);
    event WithdrawSharedExpense(address from, address to, uint value, uint256 newSharedExpenseWithdrawn);
    // Fallback function accepts Ether from donators
    function () public payable {
        Deposit(msg.sender, msg.value);
    }
    modifier onlyAdmin() { 
        if (msg.sender != owner && !members[msg.sender].admin) revert();   
        _;
    }
    modifier onlyExisting(address who) { 
        if (!members[who].exists) revert(); 
        _;
    }
    // Series of getter functions for contract data
    function getMemberCount() public constant returns(uint) {
        return memberKeys.length;
    }
    function getMemberAtKey(uint key) public constant returns(address) {
        return memberKeys[key];
    }
    function getBalance() public constant returns(uint256 balance) {
        return this.balance;
    }
    function getContractInfo() public constant returns(string, address, uint256, uint256, uint256) {
        return (string(name), owner, genesisBlockNumber, totalShares, totalWithdrawn);
    }
    function returnMember(address _address) public constant onlyExisting(_address) returns(bool admin, uint256 shares, uint256 withdrawn, string memberName) {
      Member memory m = members[_address];
      return (m.admin, m.shares, m.withdrawn, m.memberName);
    }
    function checkERC20Balance(address token) public constant returns(uint256) {
        uint256 balance = ERC20(token).balanceOf(address(this));
        if (!tokens[token].exists && balance > 0) {
            tokens[token].exists = true;
        }
        return balance;
    }
    // Function to add members to the contract 
    function addMember(address who, uint256 shares, bool admin, string memberName) public onlyAdmin() {
        // Don't allow the same member to be added twice
        if (members[who].exists) revert();
        if (bytes(memberName).length > 21) revert();
        Member memory newMember;
        newMember.exists = true;
        newMember.admin = admin;
        newMember.memberName = memberName;
        members[who] = newMember;
        memberKeys.push(who);
        addShare(who, shares);
    }
    function updateMember(address who, uint256 shares, bool isAdmin, string name) public onlyAdmin() {
        if (sha3(members[who].memberName) != sha3(name)) changeMemberName(who, name);
        if (members[who].admin != isAdmin) changeAdminPrivilege(who, isAdmin);
        if (members[who].shares != shares) allocateShares(who, shares);
    }
    // Only owner, admin or member can change member's name
    function changeMemberName(address who, string newName) public onlyExisting(who) {
        if (msg.sender != who && msg.sender != owner && !members[msg.sender].admin) revert();
        if (bytes(newName).length > 21) revert();
        ChangeMemberName(who, members[who].memberName, newName);
        members[who].memberName = newName;
    }
    function changeAdminPrivilege(address who, bool newValue) public onlyAdmin() {
        ChangePrivilege(who, members[who].admin, newValue);
        members[who].admin = newValue; 
    }
    // Only admins and owners can change the contract name
    function changeContractName(string newName) public onlyAdmin() {
        if (bytes(newName).length > 21) revert();
        ChangeContractName(name, newName);
        name = newName;
    }
    // Shared expense allocation allows admins to withdraw an amount to be used for shared
    // expenses. Shared expense allocation subtracts from the total balance of the contract. 
    // Only owner can change this amount.
    function changeSharedExpenseAllocation(uint256 newAllocation) public onlyOwner() {
        if (newAllocation < sharedExpenseWithdrawn) revert();
        if (newAllocation.sub(sharedExpenseWithdrawn) > this.balance) revert();
        ChangeSharedExpense(this.balance, sharedExpense, newAllocation);
        sharedExpense = newAllocation;
    }
    // Set share amount explicitly by calculating difference then adding or removing accordingly
    function allocateShares(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        uint256 currentShares = members[who].shares;
        if (amount == currentShares) revert();
        if (amount > currentShares) {
            addShare(who, amount.sub(currentShares));
        } else {
            removeShare(who, currentShares.sub(amount));
        }
    }
    // Increment the number of shares for a member
    function addShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        totalShares = totalShares.add(amount);
        members[who].shares = members[who].shares.add(amount);
        AddShare(who, amount, members[who].shares);
    }
    // Decrement the number of shares for a member
    function removeShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        totalShares = totalShares.sub(amount);
        members[who].shares = members[who].shares.sub(amount);
        RemoveShare(who, amount, members[who].shares);
    }
    // Function for a member to withdraw Ether from the contract proportional
    // to the amount of shares they have. Calculates the totalWithdrawableAmount
    // in Ether based on the member's share and the Ether balance of the contract,
    // then subtracts the amount of Ether that the member has already previously
    // withdrawn.
    function withdraw(uint256 amount) public onlyExisting(msg.sender) {
        uint256 newTotal = calculateTotalWithdrawableAmount(msg.sender);
        if (amount > newTotal.sub(members[msg.sender].withdrawn)) revert();
        members[msg.sender].withdrawn = members[msg.sender].withdrawn.add(amount);
        totalWithdrawn = totalWithdrawn.add(amount);
        msg.sender.transfer(amount);
        Withdraw(msg.sender, amount, totalWithdrawn);
    }
    // Withdrawal function for ERC20 tokens
    function withdrawToken(uint256 amount, address token) public onlyExisting(msg.sender) {
        uint256 newTotal = calculateTotalWithdrawableTokenAmount(msg.sender, token);
        if (amount > newTotal.sub(members[msg.sender].tokensWithdrawn[token])) revert();
        members[msg.sender].tokensWithdrawn[token] = members[msg.sender].tokensWithdrawn[token].add(amount);
        tokens[token].totalWithdrawn = tokens[token].totalWithdrawn.add(amount);
        ERC20(token).transfer(msg.sender, amount);
        TokenWithdraw(msg.sender, amount, token, tokens[token].totalWithdrawn);
    }
    // Withdraw from shared expense allocation. Total withdrawable is calculated as 
    // sharedExpense minus sharedExpenseWithdrawn. Only Admin can withdraw from shared expense.
    function withdrawSharedExpense(uint256 amount, address to) public onlyAdmin() {
        if (amount > calculateTotalExpenseWithdrawableAmount()) revert();
        sharedExpenseWithdrawn = sharedExpenseWithdrawn.add(amount);
        to.transfer(amount);
        WithdrawSharedExpense(msg.sender, to, amount, sharedExpenseWithdrawn);
    }
    // Converts from shares to Eth.
    // Ex: 2 shares, 4 total shares, 40 Eth balance
    // 40 Eth / 4 total shares = 10 eth per share * 2 shares = 20 Eth to cash out
    function calculateTotalWithdrawableAmount(address who) public constant onlyExisting(who) returns (uint256) {
        // Total balance to calculate share from = 
        // contract balance + totalWithdrawn - sharedExpense + sharedExpenseWithdrawn
        uint256 balanceSum = this.balance.add(totalWithdrawn);
        balanceSum = balanceSum.sub(sharedExpense);
        balanceSum = balanceSum.add(sharedExpenseWithdrawn);
        // Need to use parts-per notation to compute percentages for lack of floating point division
        uint256 ethPerSharePPN = balanceSum.percent(totalShares, PRECISION); 
        uint256 ethPPN = ethPerSharePPN.mul(members[who].shares);
        uint256 ethVal = ethPPN.div(10**PRECISION); 
        return ethVal;
    }
    function calculateTotalWithdrawableTokenAmount(address who, address token) public constant returns(uint256) {
        uint256 balanceSum = checkERC20Balance(token).add(tokens[token].totalWithdrawn);
        // Need to use parts-per notation to compute percentages for lack of floating point division
        uint256 tokPerSharePPN = balanceSum.percent(totalShares, PRECISION); 
        uint256 tokPPN = tokPerSharePPN.mul(members[who].shares);
        uint256 tokVal = tokPPN.div(10**PRECISION); 
        return tokVal;
    }
    function calculateTotalExpenseWithdrawableAmount() public constant returns(uint256) {
        return sharedExpense.sub(sharedExpenseWithdrawn);
    }
    // Used for testing
    function delegatePercent(uint256 a, uint256 b, uint256 c) public constant returns (uint256) {
        return a.percent(b, c);
    }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal constant returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    function sub(uint256 a, uint256 b) internal constant returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
    // Using from SO: https://stackoverflow.com/questions/42738640/division-in-ethereum-solidity/42739843#42739843
    // Adapted to use SafeMath and uint256.
    function percent(uint256 numerator, uint256 denominator, uint256 precision) internal constant returns(uint256 quotient) {
        // caution, check safe-to-multiply here
        uint256 _numerator = mul(numerator, 10 ** (precision+1));
        // with rounding of last digit
        uint256 _quotient = (div(_numerator, denominator) + 5) / 10;
        return (_quotient);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"genesisBlockNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"members","outputs":[{"name":"exists","type":"bool"},{"name":"admin","type":"bool"},{"name":"shares","type":"uint256"},{"name":"withdrawn","type":"uint256"},{"name":"memberName","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"newName","type":"string"}],"name":"changeMemberName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newAllocation","type":"uint256"}],"name":"changeSharedExpenseAllocation","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"},{"name":"to","type":"address"}],"name":"withdrawSharedExpense","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"},{"name":"token","type":"address"}],"name":"calculateTotalWithdrawableTokenAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"tokenKeys","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"calculateTotalWithdrawableAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalShares","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"calculateTotalExpenseWithdrawableAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalWithdrawn","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"addShare","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"shares","type":"uint256"},{"name":"admin","type":"bool"},{"name":"memberName","type":"string"}],"name":"addMember","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sharedExpenseWithdrawn","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getContractInfo","outputs":[{"name":"","type":"string"},{"name":"","type":"address"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"delegatePercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"newValue","type":"bool"}],"name":"changeAdminPrivilege","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"returnMember","outputs":[{"name":"admin","type":"bool"},{"name":"shares","type":"uint256"},{"name":"withdrawn","type":"uint256"},{"name":"memberName","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"allocateShares","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getMemberCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"token","type":"address"}],"name":"checkERC20Balance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sharedExpense","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"PRECISION","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newName","type":"string"}],"name":"changeContractName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"key","type":"uint256"}],"name":"getMemberAtKey","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"},{"name":"token","type":"address"}],"name":"withdrawToken","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"removeShare","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"tokens","outputs":[{"name":"exists","type":"bool"},{"name":"totalWithdrawn","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"memberKeys","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"shares","type":"uint256"},{"name":"isAdmin","type":"bool"},{"name":"name","type":"string"}],"name":"updateMember","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_contractName","type":"string"},{"name":"_founderName","type":"string"}],"payable":false,"type":"constructor"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"newTotalWithdrawn","type":"uint256"}],"name":"Withdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"token","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"TokenWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"addedShares","type":"uint256"},{"indexed":false,"name":"newTotalShares","type":"uint256"}],"name":"AddShare","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"removedShares","type":"uint256"},{"indexed":false,"name":"newTotalShares","type":"uint256"}],"name":"RemoveShare","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"oldValue","type":"bool"},{"indexed":false,"name":"newValue","type":"bool"}],"name":"ChangePrivilege","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"oldValue","type":"string"},{"indexed":false,"name":"newValue","type":"string"}],"name":"ChangeContractName","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"oldValue","type":"string"},{"indexed":false,"name":"newValue","type":"string"}],"name":"ChangeMemberName","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"contractBalance","type":"uint256"},{"indexed":false,"name":"oldValue","type":"uint256"},{"indexed":false,"name":"newValue","type":"uint256"}],"name":"ChangeSharedExpense","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"newSharedExpenseWithdrawn","type":"uint256"}],"name":"WithdrawSharedExpense","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0x52d0ade3dcfe93213edbe59e518a1fb9e2fd9c3f
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function trade(
        address src,
        uint srcAmount,
        address dest,
        address destAddress,
        uint maxDestAmount,
        uint minConversionRate,
        address walletId
    )
        public
        payable
        returns(uint);
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    function buy(
        ISetToken set,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
        payable
    {
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 fitAmount = uint(-1);
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.allowance(this, set) == 0) {
                require(token.approve(set, uint256(-1)), "Approve failed");
            }
            uint256 amount = token.balanceOf(this).div(units[i]);
            if (amount < fitAmount) {
                fitAmount = amount;
            }
        }
        set.mint(msg.sender, fitAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    function sell(
        ISetToken set,
        uint256 amount,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
    {
        set.burn(msg.sender, amount);
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function change(bytes callDatas, uint[] starts) public payable { // starts should include 0 and callDatas.length
        for (uint i = 0; i < starts.length - 1; i++) {
            require(address(this).externalCall(0, callDatas, starts[i], starts[i + 1] - starts[i]));
        }
    }
    function sendEthValue(address target, bytes data, uint256 value) external {
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function sendEthProportion(address target, bytes data, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        if (fromToken.allowance(this, target) != 0) {
             fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function approveTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        if (fromToken.allowance(this, target) != 0) {
            fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function transferTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            require(target.call(data));
        }
    }
    function transferTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            // solium-disable-next-line security/no-low-level-calls
            require(target.call(data));
        }
    }
    function transferTokenProportionToOrigin(IERC20 token, uint256 mul, uint256 div) external {
        uint256 amount = token.balanceOf(this).mul(mul).div(div);
        // solium-disable-next-line security/no-tx-origin
        require(token.transfer(tx.origin, amount));
    }
    // Kyber Network
    function kyberSendEthProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        kyber.trade.value(value)(
            fromToken,
            value,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenAmount(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 amount) external {
        if (fromToken.allowance(this, kyber) == 0) {
            fromToken.approve(kyber, uint256(-1));
        }
        kyber.trade(
            fromToken,
            amount,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        this.kyberApproveTokenAmount(kyber, fromToken, toToken, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportionToOrigin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"approveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"sendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"amount","type":"uint256"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberSendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberApproveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"approveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"value","type":"uint256"}],"name":"sendEthValue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"change","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"kyberApproveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50611c87806100206000396000f3006080604052600436106100ab5763ffffffff60e060020a6000350416631396a25481146100ba5780633143b224146100e15780633669f27b14610174578063846f1185146101aa57806386a45c15146101dd5780638721fbe91461027f5780639a509aff146102b2578063bed31bc7146102e8578063d04c6c181461031b578063d2e9236b14610354578063d91bd1b014610384578063dc0ba228146103bd578063dc3193f914610442575b323314156100b857600080fd5b005b3480156100c657600080fd5b506100b8600160a060020a0360043516602435604435610472565b60408051602060046024803582810135601f81018590048502860185019096528585526100b8958335600160a060020a0316953695604494919390910191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105c49650505050505050565b34801561018057600080fd5b506100b8600160a060020a0360048035821691602480359081019201359060443516606435610cb9565b3480156101b657600080fd5b506100b860048035600160a060020a03169060248035908101910135604435606435610ea4565b3480156101e957600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100b8948235600160a060020a0316946024803595369594606494920191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610f019650505050505050565b34801561028b57600080fd5b506100b8600160a060020a03600435811690602435811690604435166064356084356112b3565b3480156102be57600080fd5b506100b8600160a060020a03600480358216916024803590810192013590604435166064356113b0565b3480156102f457600080fd5b506100b8600160a060020a036004358116906024358116906044351660643560843561148b565b34801561032757600080fd5b506100b8600160a060020a036004803582169160248035908101920135906044351660643560843561158b565b34801561036057600080fd5b506100b860048035600160a060020a031690602480359081019101356044356117d7565b34801561039057600080fd5b506100b8600160a060020a0360048035821691602480359081019201359060443516606435608435611813565b6040805160206004803580820135601f81018490048402850184019095528484526100b8943694929360249392840191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506119559650505050505050565b34801561044e57600080fd5b506100b8600160a060020a03600435811690602435811690604435166064356119df565b600061051b8261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b50519063ffffffff611bdb16565b9063ffffffff611c1416565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152326004820152602481018390529051919250600160a060020a0386169163a9059cbb916044808201926020929091908290030181600087803b15801561058757600080fd5b505af115801561059b573d6000803e3d6000fd5b505050506040513d60208110156105b157600080fd5b505115156105be57600080fd5b50505050565b6060806000806000806105d78888611955565b88600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561065257600080fd5b81019080805164010000000081111561066a57600080fd5b8201602081018481111561067d57600080fd5b815185602082028301116401000000008211171561069a57600080fd5b5050929190505050955088600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561071f57600080fd5b81019080805164010000000081111561073757600080fd5b8201602081018481111561074a57600080fd5b815185602082028301116401000000008211171561076757600080fd5b50909850600019975060009650505050505b85518310156109dc57858381518110151561079057fe5b60209081029091018101516040805160e160020a636eb1769f028152306004820152600160a060020a038d8116602483015291519295509085169263dd62ed3e926044808401938290030181600087803b1580156107ed57600080fd5b505af1158015610801573d6000803e3d6000fd5b505050506040513d602081101561081757600080fd5b5051151561092557604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152600019602483015291519184169163095ea7b3916044808201926020929091908290030181600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d60208110156108b657600080fd5b5051151561092557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f417070726f7665206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b6109c3858481518110151561093657fe5b60209081029091018101516040805160e060020a6370a0823102815230600482015290519192600160a060020a038716926370a082319260248082019392918290030181600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b505050506040513d60208110156109b557600080fd5b50519063ffffffff611c1416565b9050838110156109d1578093505b600190920191610779565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038b16916340c10f1991604480830192600092919082900301818387803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b5050506000303111159050610a95576040513390303180156108fc02916000818181858888f19350505050158015610a93573d6000803e3d6000fd5b505b600092505b8551831015610cae578583815181101515610ab157fe5b60209081029091018101516040805160e060020a6370a082310281523060048201529051919450600092600160a060020a038616926370a0823192602480820193929182900301818787803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b50511115610ca3576040805160e060020a6370a082310281523060048201529051600160a060020a0384169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050506040513d6020811015610bbb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610c0a57600080fd5b505af1158015610c1e573d6000803e3d6000fd5b505050506040513d6020811015610c3457600080fd5b50511515610ca357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190920191610a9a565b505050505050505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03878116602483015291519184169163dd62ed3e916044808201926020929091908290030181600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d6020811015610d3857600080fd5b505115610dd05781600160a060020a031663095ea7b38660006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050506040513d6020811015610dcd57600080fd5b50505b81600160a060020a031663095ea7b386836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b505050506040513d6020811015610e5d57600080fd5b5050604051600160a060020a0386169085908590808383808284378201915050925050506000604051808303816000865af19150501515610e9d57600080fd5b5050505050565b6000610ebb8261050f30318663ffffffff611bdb16565b905085600160a060020a03168186866040518083838082843782019150509250505060006040518083038185875af1925050501515610ef957600080fd5b505050505050565b606060008086600160a060020a0316639dc29fac33886040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015610f6957600080fd5b505af1158015610f7d573d6000803e3d6000fd5b50505050610f8b8585611955565b86600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610fc957600080fd5b505af1158015610fdd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561100657600080fd5b81019080805164010000000081111561101e57600080fd5b8201602081018481111561103157600080fd5b815185602082028301116401000000008211171561104e57600080fd5b50909650505060003031111591506110919050576040513390303180156108fc02916000818181858888f1935050505015801561108f573d6000803e3d6000fd5b505b600091505b82518210156112aa5782828151811015156110ad57fe5b60209081029091018101516040805160e060020a6370a082310281523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505050506040513d602081101561112f57600080fd5b5051111561129f576040805160e060020a6370a082310281523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561118d57600080fd5b505af11580156111a1573d6000803e3d6000fd5b505050506040513d60208110156111b757600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561120657600080fd5b505af115801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b5051151561129f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190910190611096565b50505050505050565b60006112ca8261050f30318663ffffffff611bdb16565b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820184905287811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c483015291519293509088169163cb3c28c791849160e480830192602092919082900301818588803b15801561137b57600080fd5b505af115801561138f573d6000803e3d6000fd5b50505050506040513d60208110156113a657600080fd5b5050505050505050565b81600160a060020a031663a9059cbb86836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d602081101561143d57600080fd5b5051151561144a57600080fd5b8215610e9d5784600160a060020a03168484604051808383808284378201915050925050506000604051808303816000865af19150501515610e9d57600080fd5b60006114f08261050f8588600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b604080517fdc3193f9000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152888116602483015287166044820152606481018390529051919250309163dc3193f99160848082019260009290919082900301818387803b15801561156b57600080fd5b505af115801561157f573d6000803e3d6000fd5b50505050505050505050565b60006115f08261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b6040805160e160020a636eb1769f028152306004820152600160a060020a038a8116602483015291519293509086169163dd62ed3e916044808201926020929091908290030181600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b505050506040513d602081101561167257600080fd5b50511561170a5783600160a060020a031663095ea7b38860006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b505050506040513d602081101561170757600080fd5b50505b83600160a060020a031663095ea7b388836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561176d57600080fd5b505af1158015611781573d6000803e3d6000fd5b505050506040513d602081101561179757600080fd5b5050604051600160a060020a0388169087908790808383808284378201915050925050506000604051808303816000865af191505015156112aa57600080fd5b83600160a060020a03168184846040518083838082843782019150509250505060006040518083038185875af19250505015156105be57600080fd5b60006118788261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b905083600160a060020a031663a9059cbb88836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b505050506040513d602081101561190757600080fd5b5051151561191457600080fd5b84156112aa5786600160a060020a03168686604051808383808284378201915050925050506000604051808303816000865af191505015156112aa57600080fd5b60005b60018251038110156119da576119c7600084848481518110151561197857fe5b90602001906020020151858581518110151561199057fe5b9060200190602002015186866001018151811015156119ab57fe5b602090810290910101513094939291900363ffffffff611c3716565b15156119d257600080fd5b600101611958565b505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03868116602483015291519185169163dd62ed3e916044808201926020929091908290030181600087803b158015611a3457600080fd5b505af1158015611a48573d6000803e3d6000fd5b505050506040513d6020811015611a5e57600080fd5b50511515611b0057604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152600019602483015291519185169163095ea7b3916044808201926020929091908290030181600087803b158015611ad357600080fd5b505af1158015611ae7573d6000803e3d6000fd5b505050506040513d6020811015611afd57600080fd5b50505b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820184905284811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905292519087169263cb3c28c79260e480820193602093909283900390910190829087803b158015611bb157600080fd5b505af1158015611bc5573d6000803e3d6000fd5b505050506040513d6020811015610ef957600080fd5b600080831515611bee5760009150611c0d565b50828202828482811515611bfe57fe5b0414611c0957600080fd5b8091505b5092915050565b600080808311611c2357600080fd5b8284811515611c2e57fe5b04949350505050565b600060405160208501600082858784018a8c6187965a03f1989750505050505050505600a165627a7a72305820dc80b9fa54b1ab4d4df2701cfae7cd7531c4972bb288c49f90da23411a0ca8b50029
Contract_Creation_Code_ARM:



Contract Adress: 0xcbbfc2ce0c227fb40295954caf01b7345edb1248
Contract Name: CryptojoyTokenSeller
Contract_Source_Code: 
pragma solidity ^0.4.24;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b,"");
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0,""); // Solidity only automatically asserts when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a,"");
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a,"");
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0,"");
        return a % b;
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address private _owner;
    event OwnershipRenounced(address indexed previousOwner);
    event OwnershipTransferred(
      address indexed previousOwner,
      address indexed newOwner
    );
    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    constructor() public {
        _owner = msg.sender;
    }
    /**
     * @return the address of the owner.
     */
    function owner() public view returns(address) {
        return _owner;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(),"owner required");
        _;
    }
    /**
     * @return true if `msg.sender` is the owner of the contract.
     */
    function isOwner() public view returns(bool) {
        return msg.sender == _owner;
    }
    /**
     * @dev Allows the current owner to relinquish control of the contract.
     * @notice Renouncing to ownership will leave the contract without an owner.
     * It will not be possible to call the functions with the `onlyOwner`
     * modifier anymore.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipRenounced(_owner);
        _owner = address(0);
    }
    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }
    /**
     * @dev Transfers control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0),"");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
contract EIP20Interface {
    /* This is a slight change to the ERC20 base standard.
    function totalSupply() constant returns (uint256 supply);
    is replaced with:
    uint256 public totalSupply;
    This automatically creates a getter function for the totalSupply.
    This is moved to the base contract since public getter functions are not
    currently recognised as an implementation of the matching abstract
    function by the compiler.
    */
    /// total amount of tokens
    uint256 public totalSupply;
    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) public view returns (uint256 balance);
    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint256 _value) public returns (bool success);
    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of tokens to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint256 _value) public returns (bool success);
    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
    // solhint-disable-next-line no-simple-event-func-name  
    event Transfer(address indexed _from, address indexed _to, uint256 _value); 
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
contract CryptojoyTokenSeller is Ownable {
    using SafeMath for uint;
    uint8 public constant decimals = 18;
    uint public miningSupply; // minable part
    uint constant MAGNITUDE = 10**6;
    uint constant LOG1DOT5 = 405465; // log(1.5) under MAGNITUDE
    uint constant THREE_SECOND= 15 * MAGNITUDE / 10; // 1.5 under MAGNITUDE
    uint public a; // paremeter a of the price fuction price = a*log(t)+b, 18 decimals
    uint public b; // paremeter b of the price fuction price = a*log(t)+b, 18 decimals
    uint public c; // paremeter exchange rate of eth 
    uint public blockInterval; // number of blocks where the token price is fixed
    uint public startBlockNumber; // The starting block that the token can be mint.
    address public platform;
    uint public lowerBoundaryETH; // Refuse incoming ETH lower than this value
    uint public upperBoundaryETH; // Refuse incoming ETH higher than this value
    uint public supplyPerInterval; // miningSupply / MINING_INTERVAL
    uint public miningInterval;
    uint public tokenMint = 0;
    EIP20Interface public token;
    /// @dev sets boundaries for incoming tx
    /// @dev from FoMo3Dlong
    modifier isWithinLimits(uint _eth) {
        require(_eth >= lowerBoundaryETH, "pocket lint: not a valid currency");
        require(_eth <= upperBoundaryETH, "no vitalik, no");
        _;
    }
    /// @dev Initialize the token mint parameters
    /// @dev Can only be excuted once.
    constructor(
        address tokenAddress, 
        uint _miningInterval,
        uint _supplyPerInterval,
        uint _a, 
        uint _b, 
        uint _c,
        uint _blockInterval, 
        uint _startBlockNumber,
        address _platform,
        uint _lowerBoundaryETH,
        uint _upperBoundaryETH) 
        public {
        require(_lowerBoundaryETH < _upperBoundaryETH, "Lower boundary is larger than upper boundary!");
        token = EIP20Interface(tokenAddress);
        a = _a;
        b = _b;
        c = _c;
        blockInterval = _blockInterval;
        startBlockNumber = _startBlockNumber;
        platform = _platform;
        lowerBoundaryETH = _lowerBoundaryETH;
        upperBoundaryETH = _upperBoundaryETH;
        miningInterval = _miningInterval;
        supplyPerInterval = _supplyPerInterval;
    }
    function changeWithdraw(address _platform) public onlyOwner {
        platform = _platform;
    }
    function changeRate(uint _c) public onlyOwner {
        c = _c;
    }
    function withdraw(address _to) public onlyOwner returns (bool success) {
        uint remainBalance = token.balanceOf(address(this));
        return token.transfer(_to, remainBalance);
    }
    /// @dev Mint token based on the current token price.
    /// @dev The token number is limited during each interval.
    function buy() public isWithinLimits(msg.value) payable {
        uint currentStage = getCurrentStage(); // from 1 to MINING_INTERVAL
        require(tokenMint < currentStage.mul(supplyPerInterval), "No token avaiable");
        uint currentPrice = calculatePrice(currentStage); // 18 decimal
        uint amountToBuy = msg.value.mul(10**uint(decimals)).div(currentPrice);
        if(tokenMint.add(amountToBuy) > currentStage.mul(supplyPerInterval)) {
            amountToBuy = currentStage.mul(supplyPerInterval).sub(tokenMint);
            token.transfer(msg.sender, amountToBuy);
            tokenMint = tokenMint.add(amountToBuy);
            uint refund = msg.value.sub(amountToBuy.mul(currentPrice).div(10**uint(decimals)));
            msg.sender.transfer(refund);          
            platform.transfer(msg.value.sub(refund)); 
        } else {
            token.transfer(msg.sender, amountToBuy);
            tokenMint = tokenMint.add(amountToBuy);
            platform.transfer(msg.value);
        }
    }
    function() public payable {
        buy();
    }
    /// @dev Shows the remaining token of the current token mint phase
    function tokenRemain() public view returns (uint) {
        uint currentStage = getCurrentStage();
        return currentStage * supplyPerInterval - tokenMint;
    }
    /// @dev Get the current token mint phase between 1 and MINING_INTERVAL
    function getCurrentStage() public view returns (uint) {
        require(block.number >= startBlockNumber, "Not started yet");
        uint currentStage = (block.number.sub(startBlockNumber)).div(blockInterval) + 1;
        if (currentStage <= miningInterval) {
            return currentStage;
        } else {
            return miningInterval;
        }
    }
    /// @dev Return the price of one token during the nth stage
    /// @param stage Current stage from 1 to 365
    /// @return Price per token
    function calculatePrice(uint stage) public view returns (uint) {
        return a.mul(log(stage.mul(MAGNITUDE))).div(MAGNITUDE).add(b).div(c);
    }
    /// @dev Return the e based logarithm of x demonstrated by Vitalik
    /// @param input The actual input (>=1) times MAGNITUDE
    /// @return result The actual output times MAGNITUDE
    function log(uint input) internal pure returns (uint) {
        uint x = input;
        require(x >= MAGNITUDE, "");
        if (x == MAGNITUDE) {
            return 0;
        }
        uint result = 0;
        while (x >= THREE_SECOND) {
            result += LOG1DOT5;
            x = x * 2 / 3;
        }
        x = x - MAGNITUDE;
        uint y = x;
        uint i = 1;
        while (i < 10) {
            result = result + (y / i);
            i += 1;
            y = y * x / MAGNITUDE;
            result = result - (y / i);
            i += 1;
            y = y * x / MAGNITUDE;
        }
        return result;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lowerBoundaryETH","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"supplyPerInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenRemain","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"startBlockNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"platform","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"withdraw","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"upperBoundaryETH","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"miningInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_c","type":"uint256"}],"name":"changeRate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"miningSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"stage","type":"uint256"}],"name":"calculatePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenMint","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"c","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"blockInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_platform","type":"address"}],"name":"changeWithdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getCurrentStage","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"tokenAddress","type":"address"},{"name":"_miningInterval","type":"uint256"},{"name":"_supplyPerInterval","type":"uint256"},{"name":"_a","type":"uint256"},{"name":"_b","type":"uint256"},{"name":"_c","type":"uint256"},{"name":"_blockInterval","type":"uint256"},{"name":"_startBlockNumber","type":"uint256"},{"name":"_platform","type":"address"},{"name":"_lowerBoundaryETH","type":"uint256"},{"name":"_upperBoundaryETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:
60806040526000600c5534801561001557600080fd5b506040516101608061113c83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101008901516101208a0151610140909a015160008054600160a060020a031916331790559799969795969495939492939192909180821061011657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4c6f77657220626f756e64617279206973206c6172676572207468616e20757060448201527f70657220626f756e646172792100000000000000000000000000000000000000606482015290519081900360840190fd5b600d8054600160a060020a039c8d16600160a060020a0319918216179091556002989098556003969096556004949094556005929092556006556007805491909716931692909217909455600855600992909255600b55600a55610fbd8061017f6000396000f3006080604052600436106101485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f811461015257806314de72cc146101795780632e89b83b1461018e578063313ce567146101a357806342c7551e146101ce578063498a4c2d146101e35780634bde38c8146101f85780634df7e3d01461022957806351cff8d91461023e578063691cc16714610273578063715018a61461028857806372d0306f1461029d57806374e7493b146102b25780638da5cb5b146102ca5780638f32d59b146102df578063a4cc1953146102f4578063a6f2ae3a14610148578063ae10426514610309578063af25c07714610321578063c3da42b814610336578063c4c22e981461034b578063dcf6d0d214610360578063eedbe31d14610381578063f2fde38b14610396578063fc0c546a146103b7575b6101506103cc565b005b34801561015e57600080fd5b506101676107fd565b60408051918252519081900360200190f35b34801561018557600080fd5b50610167610803565b34801561019a57600080fd5b50610167610809565b3480156101af57600080fd5b506101b861080f565b6040805160ff9092168252519081900360200190f35b3480156101da57600080fd5b50610167610814565b3480156101ef57600080fd5b50610167610831565b34801561020457600080fd5b5061020d610837565b60408051600160a060020a039092168252519081900360200190f35b34801561023557600080fd5b50610167610846565b34801561024a57600080fd5b5061025f600160a060020a036004351661084c565b604080519115158252519081900360200190f35b34801561027f57600080fd5b506101676109d1565b34801561029457600080fd5b506101506109d7565b3480156102a957600080fd5b50610167610a78565b3480156102be57600080fd5b50610150600435610a7e565b3480156102d657600080fd5b5061020d610acf565b3480156102eb57600080fd5b5061025f610ade565b34801561030057600080fd5b50610167610aef565b34801561031557600080fd5b50610167600435610af5565b34801561032d57600080fd5b50610167610b4c565b34801561034257600080fd5b50610167610b52565b34801561035757600080fd5b50610167610b58565b34801561036c57600080fd5b50610150600160a060020a0360043516610b5e565b34801561038d57600080fd5b50610167610bd9565b3480156103a257600080fd5b50610150600160a060020a0360043516610c75565b3480156103c357600080fd5b5061020d610ccd565b600080600080346008548110151515610455576040805160e560020a62461bcd02815260206004820152602160248201527f706f636b6574206c696e743a206e6f7420612076616c69642063757272656e6360448201527f7900000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6009548111156104af576040805160e560020a62461bcd02815260206004820152600e60248201527f6e6f20766974616c696b2c206e6f000000000000000000000000000000000000604482015290519081900360640190fd5b6104b7610bd9565b94506104ce600a5486610cdc90919063ffffffff16565b600c5410610526576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f20746f6b656e206176616961626c65000000000000000000000000000000604482015290519081900360640190fd5b61052f85610af5565b93506105598461054d34670de0b6b3a764000063ffffffff610cdc16565b9063ffffffff610d3a16565b9250610570600a5486610cdc90919063ffffffff16565b600c54610583908563ffffffff610d8216565b111561070c576105b0600c546105a4600a5488610cdc90919063ffffffff16565b9063ffffffff610db916565b600d54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051929550600160a060020a039091169163a9059cbb916044808201926020929091908290030181600087803b15801561062057600080fd5b505af1158015610634573d6000803e3d6000fd5b505050506040513d602081101561064a57600080fd5b5050600c5461065f908463ffffffff610d8216565b600c5561068e610681670de0b6b3a764000061054d868863ffffffff610cdc16565b349063ffffffff610db916565b604051909250339083156108fc029084906000818181858888f193505050501580156106be573d6000803e3d6000fd5b50600754600160a060020a03166108fc6106de348563ffffffff610db916565b6040518115909202916000818181858888f19350505050158015610706573d6000803e3d6000fd5b506107f6565b600d54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506040513d60208110156107a357600080fd5b5050600c546107b8908463ffffffff610d8216565b600c55600754604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156107f4573d6000803e3d6000fd5b505b5050505050565b60025481565b60085481565b600a5481565b601281565b60008061081f610bd9565b9050600c54600a5482020391505b5090565b60065481565b600754600160a060020a031681565b60035481565b600080610857610ade565b151561089b576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b600d54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561090157600080fd5b505af1158015610915573d6000803e3d6000fd5b505050506040513d602081101561092b57600080fd5b5051600d54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561099e57600080fd5b505af11580156109b2573d6000803e3d6000fd5b505050506040513d60208110156109c857600080fd5b50519392505050565b60095481565b6109df610ade565b1515610a23576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600b5481565b610a86610ade565b1515610aca576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b600455565b600054600160a060020a031690565b600054600160a060020a0316331490565b60015481565b6000610b4660045461054d600354610b3a620f424061054d610b2b610b26620f42408b610cdc90919063ffffffff16565b610df5565b6002549063ffffffff610cdc16565b9063ffffffff610d8216565b92915050565b600c5481565b60045481565b60055481565b610b66610ade565b1515610baa576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806006544310151515610c38576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f742073746172746564207965740000000000000000000000000000000000604482015290519081900360640190fd5b610c5360055461054d60065443610db990919063ffffffff16565b6001019050600b5481111515610c6b5780915061082d565b600b54915061082d565b610c7d610ade565b1515610cc1576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020610f72833981519152604482015290519081900360640190fd5b610cca81610ecf565b50565b600d54600160a060020a031681565b600080831515610cef5760009150610d33565b50828202828482811515610cff57fe5b0414610d2f576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b8091505b5092915050565b600080808311610d6e576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b8284811515610d7957fe5b04949350505050565b600082820183811015610d2f576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b60008083831115610dee576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b5050900390565b600081818080620f4240841015610e30576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b620f4240841415610e445760009450610ec6565b600092505b6216e3608410610e6a5762062fd99290920191600360028502049350610e49565b5050620f423f19909101908160015b600a811015610ec2578082811515610e8d57fe5b049290920191600101620f42408285020491508082811515610eab57fe5b0490920391600101620f4240828502049150610e79565b8294505b50505050919050565b600160a060020a0381161515610f09576040805160e560020a62461bcd028152602060048201526000602482015290519081900360640190fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556006f776e6572207265717569726564000000000000000000000000000000000000a165627a7a72305820a053af2d14a945e79e0e68ab523e9b2f627128809521730d5d2773db94a9d5a800290000000000000000000000000717669dc3454013868ccf8c6fbc0eaec63a4ba5000000000000000000000000000000000000000000000000000000000000016d0000000000000000000000000000000000000000000910a361d6cccd77abd5ea000000000000000000000000000000000000000000000000013fbe85edc90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc000000000000000000000000000000000000000000000000000000000000181a0000000000000000000000000000000000000000000000000000000000675e7300000000000000000000000034cda2517a97e14ead9361f37aa991b1285269e30000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000056bc75e2d63100000
Contract_Creation_Code_ARM:



Contract Adress: 0x6e06db853b69f2d9cedbfaf8ae79e724622de6ae
Contract Name: SokolCrowdsale
Contract_Source_Code: 
pragma solidity ^0.4.24;
contract owned {
    address public owner;
    address public newOwner;
    constructor() public payable {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(owner == msg.sender);
        _;
    }
    function changeOwner(address _owner) onlyOwner public {
        newOwner = _owner;
    }
    function confirmOwner() public {
        require(newOwner == msg.sender);
        owner = newOwner;
    }
}
contract Crowdsale is owned {
    uint256 public totalSupply;
    string public priceOneTokenSokol = "1 token SOKOL = 0.01 ETH";
    mapping (address => uint256) public balanceOf;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    constructor() public payable owned() {
        totalSupply = 11000000;
        balanceOf[this] = 10000000;
        balanceOf[owner] = totalSupply - balanceOf[this];
        emit Transfer(this, owner, balanceOf[owner]);
    }
    function () public payable {
        require(balanceOf[this] > 0);
        uint amountOfTokensForOneEther = 100;
        uint256 tokens = amountOfTokensForOneEther * msg.value / 1000000000000000000;
        if (tokens > balanceOf[this]) {
            tokens = balanceOf[this];
            uint256 valueWei = tokens * 1000000000000000000 / amountOfTokensForOneEther;
            msg.sender.transfer(msg.value - valueWei);
        }
        require(tokens > 0);
        balanceOf[msg.sender] += tokens;
        balanceOf[this] -= tokens;
        emit Transfer(this, msg.sender, tokens);
    }
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[this] >= _value);
        balanceOf[this] -= _value;
        totalSupply -= _value;
        emit Burn(this, _value);
        return true;
    }
}
contract Token is Crowdsale {
    string  public name        = "Sokolov Coin";
    string  public symbol      = "SOKOL";
    uint8   public decimals    = 0;
    constructor() public payable Crowdsale() {}
    function transfer(address _to, uint256 _value) public {
	require(_to != address(0));
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }
}
contract SokolCrowdsale is Token {
    constructor() public payable Token() {}
    function withdraw() public onlyOwner {
        owner.transfer(address(this).balance);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"priceOneTokenSokol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"confirmOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60c0604052601860808190527f3120746f6b656e20534f4b4f4c203d20302e303120455448000000000000000060a090815261003e9160039190610167565b5060408051808201909152600c8082527f536f6b6f6c6f7620436f696e0000000000000000000000000000000000000000602090920191825261008391600591610167565b506040805180820190915260058082527f534f4b4f4c00000000000000000000000000000000000000000000000000000060209092019182526100c891600691610167565b506007805460ff1916905560008054600160a060020a0319163317815562a7d8c060029081553080835260046020908152604080852062989680905592548454600160a060020a0390811686528486206298967f1990920190915584541680855293839020548351908152925191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610202565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101a857805160ff19168380011785556101d5565b828001600101855582156101d5579182015b828111156101d55782518255916020019190600101906101ba565b506101e19291506101e5565b5090565b6101ff91905b808211156101e157600081556001016101eb565b90565b6107aa806102116000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101d557806318160ddd1461025f578063313ce567146102865780633ccfd60b146102b157806342966c68146102c857806370a08231146102f45780638da5cb5b14610315578063906c4ead1461034657806395d89b411461035b578063a6f9dae114610370578063a9059cbb14610391578063bd9b6d86146103b5578063d4ee1d90146103ca575b306000908152600460205260408120548190819081106100e357600080fd5b3060009081526004602052604090205460649350670de0b6b3a764000034850204925082111561016a5730600090815260046020526040902054915082670de0b6b3a7640000830281151561013457fe5b604051919004915033903483900380156108fc02916000818181858888f19350505050158015610168573d6000803e3d6000fd5b505b6000821161017757600080fd5b336000818152600460209081526040808320805487019055308084529281902080548790039055805186815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3505050005b3480156101e157600080fd5b506101ea6103df565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022457818101518382015260200161020c565b50505050905090810190601f1680156102515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026b57600080fd5b5061027461046d565b60408051918252519081900360200190f35b34801561029257600080fd5b5061029b610473565b6040805160ff9092168252519081900360200190f35b3480156102bd57600080fd5b506102c661047c565b005b3480156102d457600080fd5b506102e06004356104d1565b604080519115158252519081900360200190f35b34801561030057600080fd5b50610274600160a060020a0360043516610549565b34801561032157600080fd5b5061032a61055b565b60408051600160a060020a039092168252519081900360200190f35b34801561035257600080fd5b506101ea61056a565b34801561036757600080fd5b506101ea6105c5565b34801561037c57600080fd5b506102c6600160a060020a0360043516610620565b34801561039d57600080fd5b506102c6600160a060020a0360043516602435610666565b3480156103c157600080fd5b506102c6610727565b3480156103d657600080fd5b5061032a61076f565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104655780601f1061043a57610100808354040283529160200191610465565b820191906000526020600020905b81548152906001019060200180831161044857829003601f168201915b505050505081565b60025481565b60075460ff1681565b600054600160a060020a0316331461049357600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f193505050501580156104ce573d6000803e3d6000fd5b50565b306000908152600460205260408120548211156104ed57600080fd5b3060008181526004602090815260409182902080548690039055600280548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104655780601f1061043a57610100808354040283529160200191610465565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104655780601f1061043a57610100808354040283529160200191610465565b600054600160a060020a0316331461063757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216151561067b57600080fd5b3360009081526004602052604090205481111561069757600080fd5b600160a060020a03821660009081526004602052604090205481810110156106be57600080fd5b33600081815260046020908152604080832080548690039055600160a060020a03861680845292819020805486019055805185815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b600154600160a060020a0316331461073e57600080fd5b6001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600154600160a060020a0316815600a165627a7a7230582062a404a29c09eddb48dfcc410777b1e39c64eb3d05e933945875bb8ece4782e30029
Contract_Creation_Code_ARM:



Contract Adress: 0xc8f1afa19f100db8dd2bdc96e49a03d4555433ea
Contract Name: SsenToken
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol
/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure.
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
  using SafeMath for uint256;
  function safeTransfer(
    IERC20 token,
    address to,
    uint256 value
  )
    internal
  {
    require(token.transfer(to, value));
  }
  function safeTransferFrom(
    IERC20 token,
    address from,
    address to,
    uint256 value
  )
    internal
  {
    require(token.transferFrom(from, to, value));
  }
  function safeApprove(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    // safeApprove should only be called when setting an initial allowance, 
    // or when resetting it to zero. To increase and decrease it, use 
    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
    require((value == 0) || (token.allowance(msg.sender, spender) == 0));
    require(token.approve(spender, value));
  }
  function safeIncreaseAllowance(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    uint256 newAllowance = token.allowance(address(this), spender).add(value);
    require(token.approve(spender, newAllowance));
  }
  function safeDecreaseAllowance(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    uint256 newAllowance = token.allowance(address(this), spender).sub(value);
    require(token.approve(spender, newAllowance));
  }
}
// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol
/**
 * @title Helps contracts guard against reentrancy attacks.
 * @author Remco Bloemen <
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"value","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isPauser","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renouncePauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addPauser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"PauserRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040523480156200001157600080fd5b506040805190810160405280600a81526020017f5353454e20546f6b656e000000000000000000000000000000000000000000008152506040805190810160405280600481526020017f5353454e0000000000000000000000000000000000000000000000000000000081525060126200009a3362000165640100000000026401000000009004565b8260049080519060200190620000b292919062000529565b508160059080519060200190620000cb92919062000529565b5080600660006101000a81548160ff021916908360ff1602179055505050506200010433620001cf640100000000026401000000009004565b6000600860006101000a81548160ff0219169083151502179055506200015f336200013d62000239640100000000026401000000009004565b60ff16600a0a6402540be4000262000250640100000000026401000000009004565b620005d8565b62000189816003620003af6401000000000262001edb179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620001f3816007620003af6401000000000262001edb179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000600660009054906101000a900460ff16905090565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200027757600080fd5b6200029c81600254620004726401000000000262001e0b179091906401000000009004565b60028190555062000303816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620004726401000000000262001e0b179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620003ec57600080fd5b62000407828262000494640100000000026401000000009004565b1515156200041457600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008082840190508381101515156200048a57600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620004d257600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200056c57805160ff19168380011785556200059d565b828001600101855582156200059d579182015b828111156200059c5782518255916020019190600101906200057f565b5b509050620005ac9190620005b0565b5090565b620005d591905b80821115620005d1576000816000905550600101620005b7565b5090565b90565b611fb780620005e86000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610143578063095ea7b3146101d357806318160ddd1461023857806323b872dd146102635780632ff2e9dc146102e8578063313ce5671461031357806339509351146103445780633f4ba83a146103a957806340c10f19146103c057806342966c681461042557806346fbf68e146104525780635c975abb146104ad5780636ef8d66d146104dc57806370a08231146104f357806379cc67901461054a57806382dc1ec4146105975780638456cb59146105da57806395d89b41146105f1578063983b2d561461068157806398650275146106c4578063a457c2d7146106db578063a9059cbb14610740578063aa271e1a146107a5578063dd62ed3e14610800575b600080fd5b34801561014f57600080fd5b50610158610877565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b5061021e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610919565b604051808215151515815260200191505060405180910390f35b34801561024457600080fd5b5061024d610949565b6040518082815260200191505060405180910390f35b34801561026f57600080fd5b506102ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610953565b604051808215151515815260200191505060405180910390f35b3480156102f457600080fd5b506102fd610985565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b5061032861099d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561035057600080fd5b5061038f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109b4565b604051808215151515815260200191505060405180910390f35b3480156103b557600080fd5b506103be6109e4565b005b3480156103cc57600080fd5b5061040b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a93565b604051808215151515815260200191505060405180910390f35b34801561043157600080fd5b5061045060048036038101908080359060200190929190505050610abd565b005b34801561045e57600080fd5b50610493600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aca565b604051808215151515815260200191505060405180910390f35b3480156104b957600080fd5b506104c2610ae7565b604051808215151515815260200191505060405180910390f35b3480156104e857600080fd5b506104f1610afe565b005b3480156104ff57600080fd5b50610534600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b09565b6040518082815260200191505060405180910390f35b34801561055657600080fd5b50610595600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b51565b005b3480156105a357600080fd5b506105d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b5f565b005b3480156105e657600080fd5b506105ef610b7f565b005b3480156105fd57600080fd5b50610606610c2f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561064657808201518184015260208101905061062b565b50505050905090810190601f1680156106735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561068d57600080fd5b506106c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd1565b005b3480156106d057600080fd5b506106d9610cf1565b005b3480156106e757600080fd5b50610726600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cfc565b604051808215151515815260200191505060405180910390f35b34801561074c57600080fd5b5061078b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d2c565b604051808215151515815260200191505060405180910390f35b3480156107b157600080fd5b506107e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d5c565b604051808215151515815260200191505060405180910390f35b34801561080c57600080fd5b50610861600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d79565b6040518082815260200191505060405180910390f35b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561090f5780601f106108e45761010080835404028352916020019161090f565b820191906000526020600020905b8154815290600101906020018083116108f257829003601f168201915b5050505050905090565b6000600860009054906101000a900460ff1615151561093757600080fd5b6109418383610e00565b905092915050565b6000600254905090565b6000600860009054906101000a900460ff1615151561097157600080fd5b61097c848484610f2d565b90509392505050565b61098d61099d565b60ff16600a0a6402540be4000281565b6000600660009054906101000a900460ff16905090565b6000600860009054906101000a900460ff161515156109d257600080fd5b6109dc83836110df565b905092915050565b6109ed33610aca565b15156109f857600080fd5b600860009054906101000a900460ff161515610a1357600080fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610a9e33610d5c565b1515610aa957600080fd5b610ab38383611316565b6001905092915050565b610ac73382611454565b50565b6000610ae08260076115df90919063ffffffff16565b9050919050565b6000600860009054906101000a900460ff16905090565b610b0733611673565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b5b82826116cd565b5050565b610b6833610aca565b1515610b7357600080fd5b610b7c81611875565b50565b610b8833610aca565b1515610b9357600080fd5b600860009054906101000a900460ff16151515610baf57600080fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b5050505050905090565b610cda33610d5c565b1515610ce557600080fd5b610cee816118cf565b50565b610cfa33611929565b565b6000600860009054906101000a900460ff16151515610d1a57600080fd5b610d248383611983565b905092915050565b6000600860009054906101000a900460ff16151515610d4a57600080fd5b610d548383611bba565b905092915050565b6000610d728260036115df90919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e3d57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610fba57600080fd5b61104982600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110d4848484611bf2565b600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561111c57600080fd5b6111ab82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561133c57600080fd5b61135181600254611e0b90919063ffffffff16565b6002819055506113a8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561147a57600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156114c757600080fd5b6114dc81600254611bd190919063ffffffff16565b600281905550611533816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561161c57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611687816007611e2c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561175857600080fd5b6117e781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118718282611454565b5050565b611889816007611edb90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6118e3816003611edb90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61193d816003611e2c90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156119c057600080fd5b611a4f82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000611bc7338484611bf2565b6001905092915050565b600080838311151515611be357600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611c3f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611c7b57600080fd5b611ccc816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d5f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e0b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000808284019050838110151515611e2257600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e6857600080fd5b611e7282826115df565b1515611e7d57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f1757600080fd5b611f2182826115df565b151515611f2d57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a72305820e4604d4ab0ac8f1a66eb0d7f26f3db64767846e860b89d92215781bc6278800a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xdef35a17ff599454fbec97276b3d5df354256079
Contract Name: Qvantum
Contract_Source_Code: 
pragma solidity ^0.4.25;
/*
 [Rules]
 [✓] 10% Deposit fee
            33% => referrer (or contract owner, if none)
            10% => contract owner
            57% => dividends
 [✓] 4% Withdraw fee
            25% => contract owner
            75% => dividends
 [✓] 1% Token transfer
            100% => dividends
*/
contract Qvantum {
    modifier onlyBagholders {
        require(myTokens() > 0);
        _;
    }
    modifier onlyStronghands {
        require(myDividends(true) > 0);
        _;
    }
    event onTokenPurchase(
        address indexed customerAddress,
        uint256 incomingEthereum,
        uint256 tokensMinted,
        address indexed referredBy,
        uint timestamp,
        uint256 price
    );
    event onTokenSell(
        address indexed customerAddress,
        uint256 tokensBurned,
        uint256 ethereumEarned,
        uint timestamp,
        uint256 price
    );
    event onReinvestment(
        address indexed customerAddress,
        uint256 ethereumReinvested,
        uint256 tokensMinted
    );
    event onWithdraw(
        address indexed customerAddress,
        uint256 ethereumWithdrawn
    );
    event Transfer(
        address indexed from,
        address indexed to,
        uint256 tokens
    );
    string public name = "Qvantum";
    string public symbol = "QVM";
    address constant internal boss = 0xCa91e6dCB24B88E934F9C056A7E48849069Fa16A;
    uint8 constant public decimals = 18;
    uint8 constant internal entryFee_ = 10;
    uint8 constant internal transferFee_ = 1;
    uint8 constant internal exitFee_ = 4;
    uint8 constant internal refferalFee_ = 33;
    uint8 constant internal ownerFee1 = 10;
    uint8 constant internal ownerFee2 = 25;
    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;
    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;
    uint256 constant internal magnitude = 2 ** 64;
    uint256 public stakingRequirement = 50e18;
    mapping(address => uint256) internal tokenBalanceLedger_;
    mapping(address => uint256) internal referralBalance_;
    mapping(address => int256) internal payoutsTo_;
    uint256 internal tokenSupply_;
    uint256 internal profitPerShare_;
    function buy(address _referredBy) public payable returns (uint256) {
        return purchaseTokens(msg.value, _referredBy);
    }
    function() payable public {
        purchaseTokens(msg.value, 0x0);
    }
    function reinvest() onlyStronghands public {
        uint256 _dividends = myDividends(false);
        address _customerAddress = msg.sender;
        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);
        _dividends += referralBalance_[_customerAddress];
        referralBalance_[_customerAddress] = 0;
        uint256 _tokens = purchaseTokens(_dividends, 0x0);
        emit onReinvestment(_customerAddress, _dividends, _tokens);
    }
    function exit() public {
        address _customerAddress = msg.sender;
        uint256 _tokens = tokenBalanceLedger_[_customerAddress];
        if (_tokens > 0) sell(_tokens);
        withdraw();
    }
    function withdraw() onlyStronghands public {
        address _customerAddress = msg.sender;
        uint256 _dividends = myDividends(false);
        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);
        _dividends += referralBalance_[_customerAddress];
        referralBalance_[_customerAddress] = 0;
        _customerAddress.send(_dividends);
        emit onWithdraw(_customerAddress, _dividends);
    }
    function sell(uint256 _amountOfTokens) onlyBagholders public {
        address _customerAddress = msg.sender;
        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);
        uint256 _tokens = _amountOfTokens;
        uint256 _ethereum = tokensToEthereum_(_tokens);
        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);
        uint256 forBoss = SafeMath.div(SafeMath.mul(_dividends, ownerFee2), 100);
        _dividends = SafeMath.sub(_dividends, forBoss);
        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);
        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);
        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));
        payoutsTo_[_customerAddress] -= _updatedPayouts;
        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);
        if (tokenSupply_ > 0) {
            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
        }
        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());
    }
    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {
        address _customerAddress = msg.sender;
        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);
        if (myDividends(true) > 0) {
            withdraw();
        }
        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);
        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);
        uint256 _dividends = tokensToEthereum_(_tokenFee);
        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);
        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);
        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);
        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);
        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);
        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
        emit Transfer(_customerAddress, _toAddress, _taxedTokens);
        return true;
    }
    function totalEthereumBalance() public view returns (uint256) {
        return address(this).balance;
    }
    function totalSupply() public view returns (uint256) {
        return tokenSupply_;
    }
    function myTokens() public view returns (uint256) {
        address _customerAddress = msg.sender;
        return balanceOf(_customerAddress);
    }
    function myDividends(bool _includeReferralBonus) public view returns (uint256) {
        address _customerAddress = msg.sender;
        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;
    }
    function balanceOf(address _customerAddress) public view returns (uint256) {
        return tokenBalanceLedger_[_customerAddress];
    }
    function dividendsOf(address _customerAddress) public view returns (uint256) {
        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;
    }
    function sellPrice() public view returns (uint256) {
        // our calculation relies on the token supply, so we need supply. Doh.
        if (tokenSupply_ == 0) {
            return tokenPriceInitial_ - tokenPriceIncremental_;
        } else {
            uint256 _ethereum = tokensToEthereum_(1e18);
            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);
            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
            return _taxedEthereum;
        }
    }
    function buyPrice() public view returns (uint256) {
        if (tokenSupply_ == 0) {
            return tokenPriceInitial_ + tokenPriceIncremental_;
        } else {
            uint256 _ethereum = tokensToEthereum_(1e18);
            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);
            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);
            return _taxedEthereum;
        }
    }
    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {
        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);
        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);
        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
        return _amountOfTokens;
    }
    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {
        require(_tokensToSell <= tokenSupply_);
        uint256 _ethereum = tokensToEthereum_(_tokensToSell);
        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);
        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
        return _taxedEthereum;
    }
    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {
        address _customerAddress = msg.sender;
        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);
        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);
        uint256 forBoss = SafeMath.div(SafeMath.mul(_undividedDividends, ownerFee1), 100);
        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);
        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);
        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
        uint256 _fee = _dividends * magnitude;
        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);
        if (
            _referredBy != 0x0000000000000000000000000000000000000000 &&
            _referredBy != _customerAddress &&
            tokenBalanceLedger_[_referredBy] >= stakingRequirement
        ) {
            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);
        } else {
            referralBalance_[boss] = SafeMath.add(referralBalance_[boss], _referralBonus);
        }
        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);
        if (tokenSupply_ > 0) {
            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);
            profitPerShare_ += (_dividends * magnitude / tokenSupply_);
            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
        } else {
            tokenSupply_ = _amountOfTokens;
        }
        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);
        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);
        payoutsTo_[_customerAddress] += _updatedPayouts;
        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());
        return _amountOfTokens;
    }
    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {
        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;
        uint256 _tokensReceived =
            (
                (
                    SafeMath.sub(
                        (sqrt
                            (
                                (_tokenPriceInitial ** 2)
                                +
                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))
                                +
                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))
                                +
                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)
                            )
                        ), _tokenPriceInitial
                    )
                ) / (tokenPriceIncremental_)
            ) - (tokenSupply_);
        return _tokensReceived;
    }
    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {
        uint256 tokens_ = (_tokens + 1e18);
        uint256 _tokenSupply = (tokenSupply_ + 1e18);
        uint256 _etherReceived =
            (
                SafeMath.sub(
                    (
                        (
                            (
                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))
                            ) - tokenPriceIncremental_
                        ) * (tokens_ - 1e18)
                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2
                )
                / 1e18);
        return _etherReceived;
    }
    function sqrt(uint256 x) internal pure returns (uint256 y) {
        uint256 z = (x + 1) / 2;
        y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
    }
}
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"_customerAddress","type":"address"}],"name":"dividendsOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_ethereumToSpend","type":"uint256"}],"name":"calculateTokensReceived","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokensToSell","type":"uint256"}],"name":"calculateEthereumReceived","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"stakingRequirement","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_includeReferralBonus","type":"bool"}],"name":"myDividends","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalEthereumBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_customerAddress","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"myTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_toAddress","type":"address"},{"name":"_amountOfTokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amountOfTokens","type":"uint256"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_referredBy","type":"address"}],"name":"buy","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[],"name":"reinvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"incomingEthereum","type":"uint256"},{"indexed":false,"name":"tokensMinted","type":"uint256"},{"indexed":true,"name":"referredBy","type":"address"},{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"}],"name":"onTokenPurchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"tokensBurned","type":"uint256"},{"indexed":false,"name":"ethereumEarned","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"}],"name":"onTokenSell","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"ethereumReinvested","type":"uint256"},{"indexed":false,"name":"tokensMinted","type":"uint256"}],"name":"onReinvestment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"customerAddress","type":"address"},{"indexed":false,"name":"ethereumWithdrawn","type":"uint256"}],"name":"onWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
60c0604052600760808190527f5176616e74756d0000000000000000000000000000000000000000000000000060a0908152620000409160009190620000a9565b506040805180820190915260038082527f51564d000000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000a9565b506802b5e3af16b1880000600255348015620000a257600080fd5b506200014e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ec57805160ff19168380011785556200011c565b828001600101855582156200011c579182015b828111156200011c578251825591602001919060010190620000ff565b506200012a9291506200012e565b5090565b6200014b91905b808211156200012a576000815560010162000135565b90565b6110db806200015e6000396000f3006080604052600436106101105763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461011e57806306fdde031461015157806310d0ffdd146101db57806318160ddd146101f35780632260937314610208578063313ce567146102205780633ccfd60b1461024b5780634b7503341461026257806356d399e814610277578063688abbf71461028c5780636b2f4632146102a657806370a08231146102bb5780638620410b146102dc578063949e8acd146102f157806395d89b4114610306578063a9059cbb1461031b578063e4849b3214610353578063e9fad8ee1461036b578063f088d54714610380578063fdb5a03e14610394575b61011b3460006103a9565b50005b34801561012a57600080fd5b5061013f600160a060020a03600435166106cf565b60408051918252519081900360200190f35b34801561015d57600080fd5b5061016661070a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a0578181015183820152602001610188565b50505050905090810190601f1680156101cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e757600080fd5b5061013f600435610798565b3480156101ff57600080fd5b5061013f6107cb565b34801561021457600080fd5b5061013f6004356107d1565b34801561022c57600080fd5b5061023561080d565b6040805160ff9092168252519081900360200190f35b34801561025757600080fd5b50610260610812565b005b34801561026e57600080fd5b5061013f6108d3565b34801561028357600080fd5b5061013f61092a565b34801561029857600080fd5b5061013f6004351515610930565b3480156102b257600080fd5b5061013f610973565b3480156102c757600080fd5b5061013f600160a060020a0360043516610978565b3480156102e857600080fd5b5061013f610993565b3480156102fd57600080fd5b5061013f6109de565b34801561031257600080fd5b506101666109f0565b34801561032757600080fd5b5061033f600160a060020a0360043516602435610a4a565b604080519115158252519081900360200190f35b34801561035f57600080fd5b50610260600435610bed565b34801561037757600080fd5b50610260610dde565b61013f600160a060020a0360043516610e0b565b3480156103a057600080fd5b50610260610e1d565b60003381808080808080806103c96103c28d600a610ed3565b6064610f0c565b97506103d96103c2896021610ed3565b96506103e96103c289600a610ed3565b95506103f58888610f2f565b94506104018c89610f2f565b935061040c84610f44565b9250680100000000000000008502915060008311801561043657506006546104348482610fdc565b115b151561044157600080fd5b600160a060020a038b161580159061046b575088600160a060020a03168b600160a060020a031614155b80156104915750600254600160a060020a038c1660009081526003602052604090205410155b156104d757600160a060020a038b166000908152600460205260409020546104b99088610fdc565b600160a060020a038c1660009081526004602052604090205561053c565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a60005260046020526000805160206110908339815191525461050e9088610fdc565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a6000526004602052600080516020611090833981519152555b73ca91e6dcb24b88e934f9c056a7e48849069fa16a6000526004602052600080516020611090833981519152546105739087610fdc565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a60009081526004602052600080516020611090833981519152919091556006541115610607576105ba60065484610fdc565b60068190556801000000000000000086028115156105d457fe5b600780549290910490910190556006546801000000000000000086028115156105f957fe5b04830282038203915061060d565b60068390555b600160a060020a0389166000908152600360205260409020546106309084610fdc565b600160a060020a03808b166000818152600360209081526040808320959095556007546005909152939020805493870286900393840190559192508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e864261069a610993565b604080519485526020850193909352838301919091526060830152519081900360800190a350909a9950505050505050505050565b600160a060020a0316600090815260056020908152604080832054600390925290912054600754680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107905780601f1061076557610100808354040283529160200191610790565b820191906000526020600020905b81548152906001019060200180831161077357829003601f168201915b505050505081565b60008080806107ab6103c286600a610ed3565b92506107b78584610f2f565b91506107c282610f44565b95945050505050565b60065490565b60008060008060065485111515156107e857600080fd5b6107f185610fee565b92506108016103c2846004610ed3565b91506107c28383610f2f565b601281565b60008060006108216001610930565b1161082b57600080fd5b3391506108386000610930565b600160a060020a038316600081815260056020908152604080832080546801000000000000000087020190556004909152808220805490839055905193019350909183156108fc0291849190818181858888f15050604080518581529051600160a060020a03871694507fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc9350908190036020019150a25050565b600080600080600654600014156108f1576414f46b04009350610924565b610902670de0b6b3a7640000610fee565b92506109126103c2846004610ed3565b915061091e8383610f2f565b90508093505b50505090565b60025481565b6000338261094657610941816106cf565b61096a565b600160a060020a038116600090815260046020526040902054610968826106cf565b015b91505b50919050565b303190565b600160a060020a031660009081526003602052604090205490565b600080600080600654600014156109b15764199c82cc009350610924565b6109c2670de0b6b3a7640000610fee565b92506109d26103c284600a610ed3565b915061091e8383610fdc565b6000336109ea81610978565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107905780601f1061076557610100808354040283529160200191610790565b600080600080600080610a5b6109de565b11610a6557600080fd5b33600081815260036020526040902054909450861115610a8457600080fd5b6000610a906001610930565b1115610a9e57610a9e610812565b610aac6103c2876001610ed3565b9250610ab88684610f2f565b9150610ac383610fee565b9050610ad160065484610f2f565b600655600160a060020a038416600090815260036020526040902054610af79087610f2f565b600160a060020a038086166000908152600360205260408082209390935590891681522054610b269083610fdc565b600160a060020a0388811660008181526003602090815260408083209590955560078054948a16835260059091528482208054948c02909403909355825491815292909220805492850290920190915554600654610b9a9190680100000000000000008402811515610b9457fe5b04610fdc565b600755604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b600080600080600080600080610c016109de565b11610c0b57600080fd5b33600081815260036020526040902054909750881115610c2a57600080fd5b879550610c3686610fee565b9450610c466103c2866004610ed3565b9350610c566103c2856019610ed3565b9250610c628484610f2f565b9350610c6e8585610f2f565b9150610c7c60065487610f2f565b600655600160a060020a038716600090815260036020526040902054610ca29087610f2f565b600160a060020a038816600090815260036020908152604080832093909355600754600582529282208054938a026801000000000000000087020193849003905573ca91e6dcb24b88e934f9c056a7e48849069fa16a9091526004905260008051602061109083398151915254909150610d1c9084610fdc565b73ca91e6dcb24b88e934f9c056a7e48849069fa16a60009081526004602052600080516020611090833981519152919091556006541115610d7957610d75600754600654680100000000000000008702811515610b9457fe5b6007555b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e878442610daf610993565b604080519485526020850193909352838301919091526060830152519081900360800190a25050505050505050565b3360008181526003602052604081205490811115610dff57610dff81610bed565b610e07610812565b5050565b6000610e1734836103a9565b92915050565b600080600080610e2d6001610930565b11610e3757600080fd5b610e416000610930565b33600081815260056020908152604080832080546801000000000000000087020190556004909152812080549082905590920194509250610e839084906103a9565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080831515610ee65760009150610f05565b50828202828482811515610ef657fe5b0414610f0157600080fd5b8091505b5092915050565b600080808311610f1b57600080fd5b8284811515610f2657fe5b04949350505050565b600082821115610f3e57600080fd5b50900390565b6006546000906c01431e0fae6d7217caa00000009082906402540be400610fc9610fc3730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e4000000000000000161105a565b85610f2f565b811515610fd257fe5b0403949350505050565b600082820183811015610f0157600080fd5b600654600090670de0b6b3a76400008381019181019083906110476414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561104157fe5b04610f2f565b81151561105057fe5b0495945050505050565b80600260018201045b8181101561096d57809150600281828581151561107c57fe5b040181151561108757fe5b04905061106356007755f1a9cef2f9c23eb93f8b10a495d985b42af473963d6e2c7aba58e87e65b2a165627a7a72305820b2efe7952ab19296391621fd158fd570048029feffe30e7e90af6acaa9e3f6980029
Contract_Creation_Code_ARM:



Contract Adress: 0x3fb2dc40b63ea327c190d2a93fabee62da7301ee
Contract Name: CF20
Contract_Source_Code: 
pragma solidity ^0.4.18;
// ----------------------------------------------------------------------------
// (c) by IBM 2018. The MIT Licence.
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Safe maths
// ----------------------------------------------------------------------------
contract SafeMath {
    function safeAdd(uint a, uint b) internal pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) internal pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) internal pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) internal pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}
// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// ----------------------------------------------------------------------------
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// ----------------------------------------------------------------------------
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
    address public owner;
    address public newOwner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    function Owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}
// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and assisted
// token transfers
// ----------------------------------------------------------------------------
contract CF20 is ERC20Interface, Owned, SafeMath {
    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;
    uint public startDate;
    uint public bonusEnds;
    uint public endDate;
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    // ------------------------------------------------------------------------
    // Constructor 000000000000000000
    // ------------------------------------------------------------------------
    function CF20() public {
        symbol = "CF20";
        name = "CRYPTOFUND20";
        decimals = 18;
		_totalSupply = 1000000000000000000000000000;
        balances[msg.sender] = _totalSupply; // Send all tokens to owner
        bonusEnds = now + 0.1 weeks;
        endDate = now + 500 weeks;
    }
    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    // ------------------------------------------------------------------------
    // Get the token balance for account `tokenOwner`
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }
    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to `to` account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(msg.sender, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account
    //
    // We
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Transfer `tokens` from the `from` account to the `to` account
    //
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the `from` account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(from, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for `spender` to transferFrom(...) `tokens`
    // from the token owner's account. The `spender` contract function
    // `receiveApproval(...)` is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
    // ------------------------------------------------------------------------
    // 10,000 CF20 Tokens per 1 ETH
    // ------------------------------------------------------------------------
    function () public payable {
        require(now >= startDate && now <= endDate);
        uint tokens;
        if (now <= bonusEnds) {
            tokens = msg.value * 12000;
        } else {
            tokens = msg.value * 10000;
        }
        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
        _totalSupply = safeAdd(_totalSupply, tokens);
        Transfer(address(0), msg.sender, tokens);
        owner.transfer(msg.value);
    }
    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"startDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"bonusEnds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"endDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"},{"name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferAnyERC20Token","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a031617905560408051908101604052600481527f43463230000000000000000000000000000000000000000000000000000000006020820152600290805161007192916020019061010a565b5060408051908101604052600c81527f43525950544f46554e4432300000000000000000000000000000000000000000602082015260039080516100b992916020019061010a565b506004805460ff191660121790556b033b2e3c9fd0803ce80000006005819055600160a060020a03331660009081526009602052604090205561ec40429081016007556312064200016008556101a5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014b57805160ff1916838001178555610178565b82800160010185558215610178579182015b8281111561017857825182559160200191906001019061015d565b50610184929150610188565b5090565b6101a291905b80821115610184576000815560010161018e565b90565b610bfc806101b46000396000f3006060604052600436106100ed5763ffffffff60e060020a60003504166306fdde0381146101eb578063095ea7b3146102755780630b97bc86146102ab57806318160ddd146102d057806323b872dd146102e3578063313ce5671461030b5780633eaaf86b1461033457806340c650031461034757806370a082311461035a57806379ba5097146103795780638da5cb5b1461038e57806395d89b41146103bd578063a9059cbb146103d0578063c24a0f8b146103f2578063cae9ca5114610405578063d4ee1d901461046a578063dc39d06d1461047d578063dd62ed3e1461049f578063f2fde38b146104c4575b6000600654421015801561010357506008544211155b151561010e57600080fd5b60075442116101225750612ee03402610129565b5061271034025b600160a060020a03331660009081526009602052604090205461014c90826104e3565b600160a060020a03331660009081526009602052604090205560055461017290826104e3565b600555600160a060020a03331660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3600054600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156101e857600080fd5b50005b34156101f657600080fd5b6101fe6104f9565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023a578082015183820152602001610222565b50505050905090810190601f1680156102675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028057600080fd5b610297600160a060020a0360043516602435610597565b604051901515815260200160405180910390f35b34156102b657600080fd5b6102be610603565b60405190815260200160405180910390f35b34156102db57600080fd5b6102be610609565b34156102ee57600080fd5b610297600160a060020a036004358116906024351660443561063b565b341561031657600080fd5b61031e61073c565b60405160ff909116815260200160405180910390f35b341561033f57600080fd5b6102be610745565b341561035257600080fd5b6102be61074b565b341561036557600080fd5b6102be600160a060020a0360043516610751565b341561038457600080fd5b61038c61076c565b005b341561039957600080fd5b6103a16107fa565b604051600160a060020a03909116815260200160405180910390f35b34156103c857600080fd5b6101fe610809565b34156103db57600080fd5b610297600160a060020a0360043516602435610874565b34156103fd57600080fd5b6102be610927565b341561041057600080fd5b61029760048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061092d95505050505050565b341561047557600080fd5b6103a1610a94565b341561048857600080fd5b610297600160a060020a0360043516602435610aa3565b34156104aa57600080fd5b6102be600160a060020a0360043581169060243516610b46565b34156104cf57600080fd5b61038c600160a060020a0360043516610b71565b818101828110156104f357600080fd5b92915050565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058f5780601f106105645761010080835404028352916020019161058f565b820191906000526020600020905b81548152906001019060200180831161057257829003601f168201915b505050505081565b600160a060020a033381166000818152600a6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60065481565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b546005540390565b600160a060020a03831660009081526009602052604081205461065e9083610bbb565b600160a060020a03808616600090815260096020908152604080832094909455600a815283822033909316825291909152205461069b9083610bbb565b600160a060020a038086166000908152600a6020908152604080832033851684528252808320949094559186168152600990915220546106db90836104e3565b600160a060020a03808516600081815260096020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60045460ff1681565b60055481565b60075481565b600160a060020a031660009081526009602052604090205490565b60015433600160a060020a0390811691161461078757600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561058f5780601f106105645761010080835404028352916020019161058f565b600160a060020a0333166000908152600960205260408120546108979083610bbb565b600160a060020a0333811660009081526009602052604080822093909355908516815220546108c690836104e3565b600160a060020a0380851660008181526009602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60085481565b600160a060020a033381166000818152600a6020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a28578082015183820152602001610a10565b50505050905090810190601f168015610a555780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610a7657600080fd5b6102c65a03f11515610a8757600080fd5b5060019695505050505050565b600154600160a060020a031681565b6000805433600160a060020a03908116911614610abf57600080fd5b60008054600160a060020a038086169263a9059cbb929091169085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b2557600080fd5b6102c65a03f11515610b3657600080fd5b5050506040518051949350505050565b600160a060020a039182166000908152600a6020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610b8c57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610bca57600080fd5b509003905600a165627a7a723058203025bbafd6deb4efc0f865fb2def27976d25c136e9de6da876eeb13d725857400029
Contract_Creation_Code_ARM:



Contract Adress: 0x1abc429a9e0a6bb21cac418e876f2ba608556836
Contract Name: EthereumPower
Contract_Source_Code: 
pragma solidity ^0.4.25;
contract EthereumPower {
    // Track how many tokens are owned by each address.
    mapping (address => uint256) public balanceOf;
    string public name = "Ethereum Power";
    string public symbol = "EPWR";
    uint8 public decimals = 18;
    uint256 public totalSupply = 965756597440 * (uint256(10) ** decimals);
    event Transfer(address indexed from, address indexed to, uint256 value);
    constructor() public {
        // Initially assign all tokens to the contract's creator.
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value);
        balanceOf[msg.sender] -= value;  // deduct from sender's balance
        balanceOf[to] += value;          // add to recipient's balance
        emit Transfer(msg.sender, to, value);
        return true;
    }
    event Approval(address indexed owner, address indexed spender, uint256 value);
    mapping(address => mapping(address => uint256)) public allowance;
    function approve(address spender, uint256 value)
        public
        returns (bool success)
    {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    function transferFrom(address from, address to, uint256 value)
        public
        returns (bool success)
    {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60c0604052600e60808190527f457468657265756d20506f77657200000000000000000000000000000000000060a090815261003e9160019190610101565b506040805180820190915260048082527f4550575200000000000000000000000000000000000000000000000000000000602090920191825261008391600291610101565b5060038054601260ff19909116179081905560ff16600a0a64e0db9434c0026004553480156100b157600080fd5b5060045433600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a361019c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014257805160ff191683800117855561016f565b8280016001018555821561016f579182015b8281111561016f578251825591602001919060010190610154565b5061017b92915061017f565b5090565b61019991905b8082111561017b5760008155600101610185565b90565b610576806101ab6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015f57806323b872dd14610186578063313ce567146101b057806370a08231146101db57806395d89b41146101fc578063a9059cbb14610211578063dd62ed3e14610235575b600080fd5b3480156100a957600080fd5b506100b261025c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013357600080fd5b5061014b600160a060020a03600435166024356102e9565b604080519115158252519081900360200190f35b34801561016b57600080fd5b5061017461034f565b60408051918252519081900360200190f35b34801561019257600080fd5b5061014b600160a060020a0360043581169060243516604435610355565b3480156101bc57600080fd5b506101c5610432565b6040805160ff9092168252519081900360200190f35b3480156101e757600080fd5b50610174600160a060020a036004351661043b565b34801561020857600080fd5b506100b261044d565b34801561021d57600080fd5b5061014b600160a060020a03600435166024356104a5565b34801561024157600080fd5b50610174600160a060020a036004358116906024351661052d565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600160a060020a03831660009081526020819052604081205482111561037a57600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156103aa57600080fd5b600160a060020a038085166000818152602081815260408083208054889003905593871680835284832080548801905583835260058252848320338452825291849020805487900390558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b60035460ff1681565b60006020819052908152604090205481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b336000908152602081905260408120548211156104c157600080fd5b3360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6005602090815260009283526040808420909152908252902054815600a165627a7a723058206fee024eacc2bc406fe677b520788c3da3aaab692c7740d1254bc78e1cb9fd220029
Contract_Creation_Code_ARM:



Contract Adress: 0x968a92f07df9ec1799e7e25de5b50663e611d38d
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function trade(
        address src,
        uint srcAmount,
        address dest,
        address destAddress,
        uint maxDestAmount,
        uint minConversionRate,
        address walletId
    )
        public
        payable
        returns(uint);
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    function buy(
        ISetToken set,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
        payable
    {
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 bestAmount = uint(-1);
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.allowance(this, set) == 0) {
                require(token.approve(set, uint256(-1)), "Approve failed");
            }
            uint256 amount = token.balanceOf(this).div(units[i]);
            if (amount < bestAmount) {
                bestAmount = amount;
            }
        }
        set.mint(msg.sender, bestAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function change(bytes callDatas, uint[] starts) public payable { // starts should include 0 and callDatas.length
        for (uint i = 0; i < starts.length - 1; i++) {
            require(address(this).externalCall(0, callDatas, starts[i], starts[i + 1] - starts[i]));
        }
    }
    function sendEthValue(address target, bytes data, uint256 value) external {
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function sendEthProportion(address target, bytes data, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        if (fromToken.allowance(this, target) != 0) {
             fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function approveTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        if (fromToken.allowance(this, target) != 0) {
            fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function transferTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            require(target.call(data));
        }
    }
    function transferTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            // solium-disable-next-line security/no-low-level-calls
            require(target.call(data));
        }
    }
    function transferTokenProportionToOrigin(IERC20 token, uint256 mul, uint256 div) external {
        uint256 amount = token.balanceOf(this).mul(mul).div(div);
        // solium-disable-next-line security/no-tx-origin
        require(token.transfer(tx.origin, amount));
    }
    // Kyber Network
    function kyberSendEthProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        kyber.trade.value(value)(
            fromToken,
            value,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenAmount(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 amount) external {
        if (fromToken.allowance(this, kyber) == 0) {
            fromToken.approve(kyber, uint256(-1));
        }
        kyber.trade(
            fromToken,
            amount,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        this.kyberApproveTokenAmount(kyber, fromToken, toToken, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportionToOrigin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"approveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"sendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberSendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberApproveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"approveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"value","type":"uint256"}],"name":"sendEthValue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"change","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"kyberApproveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b5061186b806100206000396000f3006080604052600436106100a05763ffffffff60e060020a6000350416631396a25481146100a55780633143b224146100ce5780633669f27b14610161578063846f1185146101975780638721fbe9146101ca5780639a509aff146101fd578063bed31bc714610233578063d04c6c1814610266578063d2e9236b1461029f578063d91bd1b0146102cf578063dc0ba22814610308578063dc3193f91461038d575b600080fd5b3480156100b157600080fd5b506100cc600160a060020a03600435166024356044356103bd565b005b60408051602060046024803582810135601f81018590048502860185019096528585526100cc958335600160a060020a0316953695604494919390910191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061050f9650505050505050565b34801561016d57600080fd5b506100cc600160a060020a0360048035821691602480359081019201359060443516606435610c46565b3480156101a357600080fd5b506100cc60048035600160a060020a03169060248035908101910135604435606435610e31565b3480156101d657600080fd5b506100cc600160a060020a0360043581169060243581169060443516606435608435610e8e565b34801561020957600080fd5b506100cc600160a060020a0360048035821691602480359081019201359060443516606435610f8b565b34801561023f57600080fd5b506100cc600160a060020a0360043581169060243581169060443516606435608435611066565b34801561027257600080fd5b506100cc600160a060020a0360048035821691602480359081019201359060443516606435608435611166565b3480156102ab57600080fd5b506100cc60048035600160a060020a031690602480359081019101356044356113bb565b3480156102db57600080fd5b506100cc600160a060020a03600480358216916024803590810192013590604435166064356084356113f7565b6040805160206004803580820135601f81018490048402850184019095528484526100cc943694929360249392840191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506115399650505050505050565b34801561039957600080fd5b506100cc600160a060020a03600435811690602435811690604435166064356115c3565b60006104668261045a8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050506040513d602081101561044c57600080fd5b50519063ffffffff6117bf16565b9063ffffffff6117f816565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152326004820152602481018390529051919250600160a060020a0386169163a9059cbb916044808201926020929091908290030181600087803b1580156104d257600080fd5b505af11580156104e6573d6000803e3d6000fd5b505050506040513d60208110156104fc57600080fd5b5051151561050957600080fd5b50505050565b6060806000806000806105228888611539565b88600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561059d57600080fd5b8101908080516401000000008111156105b557600080fd5b820160208101848111156105c857600080fd5b81518560208202830111640100000000821117156105e557600080fd5b5050929190505050955088600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561062d57600080fd5b505af1158015610641573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561066a57600080fd5b81019080805164010000000081111561068257600080fd5b8201602081018481111561069557600080fd5b81518560208202830111640100000000821117156106b257600080fd5b50909850600019975060009650505050505b855183101561093d5785838151811015156106db57fe5b60209081029091018101516040805160e160020a636eb1769f028152306004820152600160a060020a038d8116602483015291519295509085169263dd62ed3e926044808401938290030181600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b505050506040513d602081101561076257600080fd5b5051151561087057604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152600019602483015291519184169163095ea7b3916044808201926020929091908290030181600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506040513d602081101561080157600080fd5b5051151561087057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f417070726f7665206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b610924858481518110151561088157fe5b6020908102909101810151604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192600160a060020a038716926370a082319260248082019392918290030181600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b505050506040513d602081101561091657600080fd5b50519063ffffffff6117f816565b905083811015610932578093505b6001909201916106c4565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038b16916340c10f1991604480830192600092919082900301818387803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b50505060003031111590506109f6576040513390303180156108fc02916000818181858888f193505050501580156109f4573d6000803e3d6000fd5b505b600092505b8551831015610c3b578583815181101515610a1257fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450600092600160a060020a038616926370a0823192602480820193929182900301818787803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b505050506040513d6020811015610aaa57600080fd5b50511115610c3057604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0384169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050506040513d6020811015610b4857600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610b9757600080fd5b505af1158015610bab573d6000803e3d6000fd5b505050506040513d6020811015610bc157600080fd5b50511515610c3057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6001909201916109fb565b505050505050505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03878116602483015291519184169163dd62ed3e916044808201926020929091908290030181600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b505115610d5d5781600160a060020a031663095ea7b38660006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610d3057600080fd5b505af1158015610d44573d6000803e3d6000fd5b505050506040513d6020811015610d5a57600080fd5b50505b81600160a060020a031663095ea7b386836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610dc057600080fd5b505af1158015610dd4573d6000803e3d6000fd5b505050506040513d6020811015610dea57600080fd5b5050604051600160a060020a0386169085908590808383808284378201915050925050506000604051808303816000865af19150501515610e2a57600080fd5b5050505050565b6000610e488261045a30318663ffffffff6117bf16565b905085600160a060020a03168186866040518083838082843782019150509250505060006040518083038185875af1925050501515610e8657600080fd5b505050505050565b6000610ea58261045a30318663ffffffff6117bf16565b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820184905287811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c483015291519293509088169163cb3c28c791849160e480830192602092919082900301818588803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b50505050506040513d6020811015610f8157600080fd5b5050505050505050565b81600160a060020a031663a9059cbb86836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050506040513d602081101561101857600080fd5b5051151561102557600080fd5b8215610e2a5784600160a060020a03168484604051808383808284378201915050925050506000604051808303816000865af19150501515610e2a57600080fd5b60006110cb8261045a8588600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b604080517fdc3193f9000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152888116602483015287166044820152606481018390529051919250309163dc3193f99160848082019260009290919082900301818387803b15801561114657600080fd5b505af115801561115a573d6000803e3d6000fd5b50505050505050505050565b60006111cb8261045a8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b6040805160e160020a636eb1769f028152306004820152600160a060020a038a8116602483015291519293509086169163dd62ed3e916044808201926020929091908290030181600087803b15801561122357600080fd5b505af1158015611237573d6000803e3d6000fd5b505050506040513d602081101561124d57600080fd5b5051156112e55783600160a060020a031663095ea7b38860006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b505050506040513d60208110156112e257600080fd5b50505b83600160a060020a031663095ea7b388836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b505050506040513d602081101561137257600080fd5b5050604051600160a060020a0388169087908790808383808284378201915050925050506000604051808303816000865af191505015156113b257600080fd5b50505050505050565b83600160a060020a03168184846040518083838082843782019150509250505060006040518083038185875af192505050151561050957600080fd5b600061145c8261045a8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561042257600080fd5b905083600160a060020a031663a9059cbb88836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156114c157600080fd5b505af11580156114d5573d6000803e3d6000fd5b505050506040513d60208110156114eb57600080fd5b505115156114f857600080fd5b84156113b25786600160a060020a03168686604051808383808284378201915050925050506000604051808303816000865af191505015156113b257600080fd5b60005b60018251038110156115be576115ab600084848481518110151561155c57fe5b90602001906020020151858581518110151561157457fe5b90602001906020020151868660010181518110151561158f57fe5b602090810290910101513094939291900363ffffffff61181b16565b15156115b657600080fd5b60010161153c565b505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03868116602483015291519185169163dd62ed3e916044808201926020929091908290030181600087803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b505050506040513d602081101561164257600080fd5b505115156116e457604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152600019602483015291519185169163095ea7b3916044808201926020929091908290030181600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b505050506040513d60208110156116e157600080fd5b50505b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820184905284811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905292519087169263cb3c28c79260e480820193602093909283900390910190829087803b15801561179557600080fd5b505af11580156117a9573d6000803e3d6000fd5b505050506040513d6020811015610e8657600080fd5b6000808315156117d257600091506117f1565b508282028284828115156117e257fe5b04146117ed57600080fd5b8091505b5092915050565b60008080831161180757600080fd5b828481151561181257fe5b04949350505050565b600060405160208501600082858784018a8c6187965a03f1989750505050505050505600a165627a7a723058203d044b3a9f2049c9d47574b3d1e559963c0ef00f2fef73249f34c1fd63b2094b0029
Contract_Creation_Code_ARM:



Contract Adress: 0x3dc9304fbf2cdcca367fc8e80293c813056d9693
Contract Name: RippleRed
Contract_Source_Code: 
pragma solidity ^0.4.25;
contract RippleRed {
    // Track how many tokens are owned by each address.
    mapping (address => uint256) public balanceOf;
    string public name = "Ripple Red";
    string public symbol = "XRPR";
    uint8 public decimals = 18;
    uint256 public totalSupply = 7965756597320 * (uint256(10) ** decimals);
    event Transfer(address indexed from, address indexed to, uint256 value);
    constructor() public {
        // Initially assign all tokens to the contract's creator.
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value);
        balanceOf[msg.sender] -= value;  // deduct from sender's balance
        balanceOf[to] += value;          // add to recipient's balance
        emit Transfer(msg.sender, to, value);
        return true;
    }
    event Approval(address indexed owner, address indexed spender, uint256 value);
    mapping(address => mapping(address => uint256)) public allowance;
    function approve(address spender, uint256 value)
        public
        returns (bool success)
    {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    function transferFrom(address from, address to, uint256 value)
        public
        returns (bool success)
    {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60c0604052600a60808190527f526970706c65205265640000000000000000000000000000000000000000000060a090815261003e9160019190610102565b506040805180820190915260048082527f5852505200000000000000000000000000000000000000000000000000000000602090920191825261008391600291610102565b5060038054601260ff19909116179081905560ff16600a0a65073eac17a448026004553480156100b257600080fd5b5060045433600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a361019d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014357805160ff1916838001178555610170565b82800160010185558215610170579182015b82811115610170578251825591602001919060010190610155565b5061017c929150610180565b5090565b61019a91905b8082111561017c5760008155600101610186565b90565b610576806101ac6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015f57806323b872dd14610186578063313ce567146101b057806370a08231146101db57806395d89b41146101fc578063a9059cbb14610211578063dd62ed3e14610235575b600080fd5b3480156100a957600080fd5b506100b261025c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013357600080fd5b5061014b600160a060020a03600435166024356102e9565b604080519115158252519081900360200190f35b34801561016b57600080fd5b5061017461034f565b60408051918252519081900360200190f35b34801561019257600080fd5b5061014b600160a060020a0360043581169060243516604435610355565b3480156101bc57600080fd5b506101c5610432565b6040805160ff9092168252519081900360200190f35b3480156101e757600080fd5b50610174600160a060020a036004351661043b565b34801561020857600080fd5b506100b261044d565b34801561021d57600080fd5b5061014b600160a060020a03600435166024356104a5565b34801561024157600080fd5b50610174600160a060020a036004358116906024351661052d565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045481565b600160a060020a03831660009081526020819052604081205482111561037a57600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156103aa57600080fd5b600160a060020a038085166000818152602081815260408083208054889003905593871680835284832080548801905583835260058252848320338452825291849020805487900390558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b60035460ff1681565b60006020819052908152604090205481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b336000908152602081905260408120548211156104c157600080fd5b3360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6005602090815260009283526040808420909152908252902054815600a165627a7a7230582040230683577e57f97459771f153b0fe189587b5c4dc6edbb69efa16f78bb20110029
Contract_Creation_Code_ARM:



Contract Adress: 0xd7c05d4015599b33d8225a69f14cd561f27177eb
Contract Name: se7en
Contract_Source_Code: 
pragma solidity ^0.4.25; /*
___________________________________________________________________
  _      _                                        ______           
  |  |  /          /                                /              
--|-/|-/-----__---/----__----__---_--_----__-------/-------__------
  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     
__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_
 .----------------.  .----------------.  .----------------.  .----------------.  .-----------------.
| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
| |    _______   | || |  _________   | || |   _______    | || |  _________   | || | ____  _____  | |
| |   /  ___  |  | || | |_   ___  |  | || |  |  ___  |   | || | |_   ___  |  | || ||_   \|_   _| | |
| |  |  (__ \_|  | || |   | |_  \_|  | || |  |_/  / /    | || |   | |_  \_|  | || |  |   \ | |   | |
| |   '.___`-.   | || |   |  _|  _   | || |      / /     | || |   |  _|  _   | || |  | |\ \| |   | |
| |  |`\____) |  | || |  _| |___/ |  | || |     / /      | || |  _| |___/ |  | || | _| |_\   |_  | |
| |  |_______.'  | || | |_________|  | || |    /_/       | || | |_________|  | || ||_____|\____| | |
| |              | || |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'  '----------------' 
// ----------------------------------------------------------------------------
// Name        : se7en
// Symbol      : S7N
// Copyright (c) 2018 XSe7en Social Media Inc. ( https://se7en.social )
// Contract written by EtherAuthority ( https://EtherAuthority.io )
// ----------------------------------------------------------------------------
*/ 
//*******************************************************************//
//------------------------ SafeMath Library -------------------------//
//*******************************************************************//
    /**
     * @title SafeMath
     * @dev Math operations with safety checks that throw on error
     */
    library SafeMath {
      function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
          return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
      }
      function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
      }
      function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
      }
      function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
      }
    }
//*******************************************************************//
//------------------ Contract to Manage Ownership -------------------//
//*******************************************************************//
    contract owned {
        address public owner;
         constructor () public {
            owner = msg.sender;
        }
        modifier onlyOwner {
            require(msg.sender == owner);
            _;
        }
        function transferOwnership(address newOwner) onlyOwner public {
            owner = newOwner;
        }
    }
    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes  _extraData) external; }
//***************************************************************//
//------------------ ERC20 Standard Template -------------------//
//***************************************************************//
    contract TokenERC20 {
        // Public variables of the token
        using SafeMath for uint256;
        string public name;
        string public symbol;
        uint8 public decimals = 18;
        uint256 public totalSupply;
        uint256 public reservedForICO;
        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions
        // This creates an array with all balances
        mapping (address => uint256) public balanceOf;
        mapping (address => mapping (address => uint256)) public allowance;
        // This generates a public event on the blockchain that will notify clients
        event Transfer(address indexed from, address indexed to, uint256 value);
        // This notifies clients about the amount burnt
        event Burn(address indexed from, uint256 value);
        /**
         * Constructor function
         *
         * Initializes contract with initial supply tokens to the creator of the contract
         */
        constructor (
            uint256 initialSupply,
            uint256 allocatedForICO,
            string memory tokenName,
            string memory tokenSymbol
        ) public {
            totalSupply = initialSupply.mul(1 ether);   
            reservedForICO = allocatedForICO.mul(1 ether);  
            balanceOf[address(this)] = reservedForICO;      
            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); 
            name = tokenName;                               
            symbol = tokenSymbol;                           
        }
        /**
         * Internal transfer, can be called only by this contract
         */
        function _transfer(address _from, address _to, uint _value) internal {
            require(!safeguard);
            // Prevent transfer to 0x0 address. Use burn() instead
            require(_to != address(0x0));
            // Check if the sender has enough balance
            require(balanceOf[_from] >= _value);
            // Check for overflows
            require(balanceOf[_to].add(_value) > balanceOf[_to]);
            // Save this for an assertion in the future
            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);
            // Subtract from the sender
            balanceOf[_from] = balanceOf[_from].sub(_value);
            balanceOf[_to] = balanceOf[_to].add(_value);
            emit Transfer(_from, _to, _value);
            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
        }
        /**
         * Transfer tokens
         *
         * Send `_value` tokens to `_to` from your account
         *
         * @param _to The address of the recipient
         * @param _value the amount to send
         */
        function transfer(address _to, uint256 _value) public returns (bool success) {
            _transfer(msg.sender, _to, _value);
            return true;
        }
        /**
         * Transfer tokens from other address
         *
         * Send `_value` tokens to `_to` in behalf of `_from`
         *
         * @param _from The address of the sender
         * @param _to The address of the recipient
         * @param _value the amount to send
         */
        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
            require(!safeguard);
            require(_value <= allowance[_from][msg.sender]);    
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
            _transfer(_from, _to, _value);
            return true;
        }
        /**
         * Set allowance for other address
         *
         * Allows `_spender` to spend no more than `_value` tokens in your behalf
         *
         * @param _spender The address authorized to spend
         * @param _value the max amount they can spend
         */
        function approve(address _spender, uint256 _value) public
            returns (bool success) {
            require(!safeguard);
            allowance[msg.sender][_spender] = _value;
            return true;
        }
        /**
         * Set allowance for other address and notify
         *
         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
         *
         * @param _spender The address authorized to spend
         * @param _value the max amount they can spend
         * @param _extraData some extra information to send to the approved contract
         */
        function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
            public
            returns (bool success) {
            require(!safeguard);
            tokenRecipient spender = tokenRecipient(_spender);
            if (approve(_spender, _value)) {
                spender.receiveApproval(msg.sender, _value, address(this), _extraData);
                return true;
            }
        }
        /**
         * Destroy tokens
         *
         * Remove `_value` tokens from the system irreversibly
         *
         * @param _value the amount of tokens to burn
         */
        function burn(uint256 _value) public returns (bool success) {
            require(!safeguard);
            require(balanceOf[msg.sender] >= _value);   
            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            
            totalSupply = totalSupply.sub(_value);                      
            emit Burn(msg.sender, _value);
            return true;
        }
        /**
         * Destroy tokens from other account
         *
         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
         *
         * @param _from the address of the sender
         * @param _value the amount of tokens to burn
         */
        function burnFrom(address _from, uint256 _value) public returns (bool success) {
            require(!safeguard);
            require(balanceOf[_from] >= _value);                
            require(_value <= allowance[_from][msg.sender]);    
            balanceOf[_from] = balanceOf[_from].sub(_value);                         
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             
            totalSupply = totalSupply.sub(_value);                              
            emit  Burn(_from, _value);
            return true;
        }
    }
//************************************************************************//
//---------------------  SE7EN MAIN CODE STARTS HERE ---------------------//
//************************************************************************//
    contract se7en is owned, TokenERC20 {
        /*************************************/
        /*  User whitelisting functionality  */
        /*************************************/
        bool public whitelistingStatus = false;
        mapping (address => bool) public whitelisted;
        /**
         * Change whitelisting status on or off
         *
         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.
         */
        function changeWhitelistingStatus() onlyOwner public{
            if (whitelistingStatus == false){
                whitelistingStatus = true;
            }
            else{
                whitelistingStatus = false;    
            }
        }
        /**
         * Whitelist any user address - only Owner can do this
         *
         * It will add user address to whitelisted mapping
         */
        function whitelistUser(address userAddress) onlyOwner public{
            require(whitelistingStatus == true);
            require(userAddress != address(0x0));
            whitelisted[userAddress] = true;
        }
        /**
         * Whitelist Many user address at once - only Owner can do this
         * maximum of 150 addresses to prevent block gas limit max-out and DoS attack
         * this will add user address in whitelisted mapping
         */
        function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{
            require(whitelistingStatus == true);
            uint256 addressCount = userAddresses.length;
            require(addressCount <= 150);
            for(uint256 i = 0; i < addressCount; i++){
                require(userAddresses[i] != address(0x0));
                whitelisted[userAddresses[i]] = true;
            }
        }
        /********************************/
        /* Code for the ERC20 S7N Token */
        /********************************/
        /* Public variables of the token */
        string private tokenName = "se7en";
        string private tokenSymbol = "S7N";
        uint256 private initialSupply = 74243687134;
        uint256 private allocatedForICO = 7424368713;
        mapping (address => bool) public frozenAccount;
        event FrozenFunds(address target, bool frozen);
        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}
        function _transfer(address _from, address _to, uint _value) internal {
            require(!safeguard);
            require (_to != address(0x0));                      
            require (balanceOf[_from] >= _value);               
            require (balanceOf[_to].add(_value) >= balanceOf[_to]); 
            require(!frozenAccount[_from]);                     
            require(!frozenAccount[_to]);                       
            balanceOf[_from] = balanceOf[_from].sub(_value);   
            balanceOf[_to] = balanceOf[_to].add(_value);        
            emit Transfer(_from, _to, _value);
        }
        /// @notice Create `mintedAmount` tokens and send it to `target`
        /// @param target Address to receive the tokens
        /// @param mintedAmount the amount of tokens it will receive
        function mintToken(address target, uint256 mintedAmount) onlyOwner public {
            balanceOf[target] = balanceOf[target].add(mintedAmount);
            totalSupply = totalSupply.add(mintedAmount);
            emit Transfer(address(0x0), address(this), mintedAmount);
            emit Transfer(address(this), target, mintedAmount);
        }
        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens
        /// @param target Address to be frozen
        /// @param freeze either to freeze it or not
        function freezeAccount(address target, bool freeze) onlyOwner public {
                frozenAccount[target] = freeze;
            emit  FrozenFunds(target, freeze);
        }
        /******************************/
        /* Code for the S7N Crowdsale */
        /******************************/
        uint256 public datePreSale   = 1544943600 ;      // 16 Dec 2018 07:00:00 - GMT
        uint256 public dateIcoPhase1 = 1546326000 ;      // 01 Jan 2019 07:00:00 - GMT
        uint256 public dateIcoPhase2 = 1547622000 ;      // 16 Jan 2019 07:00:00 - GMT
        uint256 public dateIcoPhase3 = 1549004400 ;      // 01 Feb 2019 07:00:00 - GMT
        uint256 public dateIcoEnd    = 1551398399 ;      // 28 Feb 2019 23:59:59 - GMT
        uint256 public exchangeRate  = 10000;             // 1 ETH = 10000 Tokens
        uint256 public tokensSold    = 0;                // how many tokens sold through crowdsale              
        function () payable external {
            require(!safeguard);
            require(!frozenAccount[msg.sender]);
            require(datePreSale < now && dateIcoEnd > now);
            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }
            if(datePreSale < now && dateIcoPhase1 > now){ require(msg.value >= (0.50 ether)); }
            // calculate token amount to be sent
            uint256 token = msg.value.mul(exchangeRate);                        
            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     
            tokensSold = tokensSold.add(finalTokens);
            _transfer(address(this), msg.sender, finalTokens);                  
            forwardEherToOwner();                                               
        }
        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){
            if(datePreSale < now && now < dateIcoPhase1 ){
                return token.mul(50).div(100);  //50% bonus in pre sale
            }
            else if(dateIcoPhase1 < now && now < dateIcoPhase2 ){
                return token.mul(25).div(100);  //25% bonus in ICO phase 1
            }
            else if(dateIcoPhase2 < now && now < dateIcoPhase3 ){
                return token.mul(10).div(100);  //10% bonus in ICO phase 2
            }
            else if(dateIcoPhase3 < now && now < dateIcoEnd ){
                return token.mul(5).div(100);  //5% bonus in ICO phase 3
            }
            else{
                return 0;                      //NO BONUS
            }
        }
        function forwardEherToOwner() internal {
            address(owner).transfer(msg.value); 
        }
        function updateCrowdsale(uint256 datePreSaleNew, uint256 dateIcoPhase1New, uint256 dateIcoPhase2New, uint256 dateIcoPhase3New, uint256 dateIcoEndNew) onlyOwner public {
            require(datePreSaleNew < dateIcoPhase1New && dateIcoPhase1New < dateIcoPhase2New);
            require(dateIcoPhase2New < dateIcoPhase3New && dateIcoPhase3New < dateIcoEnd);
            datePreSale   = datePreSaleNew;
            dateIcoPhase1 = dateIcoPhase1New;
            dateIcoPhase2 = dateIcoPhase2New;
            dateIcoPhase3 = dateIcoPhase3New;
            dateIcoEnd    = dateIcoEndNew;
        }
        function stopICO() onlyOwner public{
            dateIcoEnd = 0;
        }
        function icoStatus() public view returns(string memory){
            if(datePreSale > now ){
                return "Pre sale has not started yet";
            }
            else if(datePreSale < now && now < dateIcoPhase1){
                return "Pre sale is running";
            }
            else if(dateIcoPhase1 < now && now < dateIcoPhase2){
                return "ICO phase 1 is running";
            }
            else if(dateIcoPhase2 < now && now < dateIcoPhase3){
                return "ICO phase 2 is running";
            }
            else if(dateIcoPhase3 < now && now < dateIcoEnd){
                return "ICO phase 3 is running";
            }
            else{
                return "ICO is not active";
            }
        }
        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {
            exchangeRate=newExchangeRate;
        }
        function manualWithdrawToken(uint256 _amount) onlyOwner public {
            uint256 tokenAmount = _amount.mul(1 ether);
            _transfer(address(this), msg.sender, tokenAmount);
        }
        function manualWithdrawEther()onlyOwner public{
            address(owner).transfer(address(this).balance);
        }
        function destructContract()onlyOwner public{
            selfdestruct(owner);
        }
        /**
         * Change safeguard status on or off
         *
         * When safeguard is true, all the non-owner functions are unavailable.
         * When safeguard is false, all the functions will resume!
         */
        function changeSafeguardStatus() onlyOwner public{
            if (safeguard == false){
                safeguard = true;
            }
            else{
                safeguard = false;    
            }
        }
        /********************************/
        /* Code for the Air drop of S7N */
        /********************************/
        /**
         * Run an Air-Drop
         *
         * It requires an array of all the addresses and amount of tokens to distribute
         * It will only process first 150 recipients. That limit is fixed to prevent gas limit
         */
        function airdrop(address[] memory recipients,uint tokenAmount) public onlyOwner {
            uint256 addressCount = recipients.length;
            require(addressCount <= 150);
            for(uint i = 0; i < addressCount; i++)
            {
                  _transfer(address(this), recipients[i], tokenAmount.mul(1 ether));
            }
        }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"datePreSale","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoPhase3","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"exchangeRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"userAddress","type":"address"}],"name":"whitelistUser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"changeSafeguardStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"tokensSold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoPhase2","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"manualWithdrawEther","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"manualWithdrawToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"datePreSaleNew","type":"uint256"},{"name":"dateIcoPhase1New","type":"uint256"},{"name":"dateIcoPhase2New","type":"uint256"},{"name":"dateIcoPhase3New","type":"uint256"},{"name":"dateIcoEndNew","type":"uint256"}],"name":"updateCrowdsale","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"userAddresses","type":"address[]"}],"name":"whitelistManyUsers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"mintedAmount","type":"uint256"}],"name":"mintToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"changeWhitelistingStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destructContract","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccount","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"safeguard","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"whitelistingStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"recipients","type":"address[]"},{"name":"tokenAmount","type":"uint256"}],"name":"airdrop","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"stopICO","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoPhase1","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"whitelisted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"icoStatus","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"freeze","type":"bool"}],"name":"freezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"dateIcoEnd","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newExchangeRate","type":"uint256"}],"name":"setICOExchangeRate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"reservedForICO","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"target","type":"address"},{"indexed":false,"name":"frozen","type":"bool"}],"name":"FrozenFunds","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
6003805460ff19908116601217909155600680548216905560098054909116905560c0604052600560808190527f736537656e00000000000000000000000000000000000000000000000000000060a09081526200006191600b919062000349565b506040805180820190915260038082527f53374e00000000000000000000000000000000000000000000000000000000006020909201918252620000a891600c9162000349565b5064114944c2de600d556401ba86e049600e55635c15f7f0601055635c2b0ff0601155635c3ed670601255635c53ee70601355635c7875ff6014556127106015556000601655348015620000fb57600080fd5b50600d54600e54600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200018c5780601f1062000160576101008083540402835291602001916200018c565b820191906000526020600020905b8154815290600101906020018083116200016e57829003601f168201915b5050600c8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152955091935091508301828280156200021e5780601f10620001f2576101008083540402835291602001916200021e565b820191906000526020600020905b8154815290600101906020018083116200020057829003601f168201915b505060008054600160a060020a0319163317905550620002599150859050670de0b6b3a7640000640100000000620008aa620002fc82021704565b6004556200027e83670de0b6b3a7640000640100000000620008aa620002fc82021704565b6005819055306000908152600760205260409020819055600454620002b191640100000000620018656200033682021704565b336000908152600760209081526040909120919091558251620002db916001919085019062000349565b508051620002f190600290602084019062000349565b5050505050620003ee565b6000808315156200031157600091506200032f565b508282028284828115156200032257fe5b04146200032b57fe5b8091505b5092915050565b6000828211156200034357fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038c57805160ff1916838001178555620003bc565b82800160010185558215620003bc579182015b82811115620003bc5782518255916020019190600101906200039f565b50620003ca929150620003ce565b5090565b620003eb91905b80821115620003ca5760008155600101620003d5565b90565b6118a380620003fe6000396000f3006080604052600436106101ed5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146102f5578063095ea7b31461037f57806318160ddd146103b757806323b872dd146103de5780632d6c3b1d14610408578063313ce5671461041d57806332aa2cec146104485780633ba0b9a91461045d57806342966c68146104725780634a4c560d1461048a5780634bec8335146104ad578063518ab2a8146104c257806356fdb048146104d75780635954c8c5146104ec5780635d22a35214610501578063625fe9ec1461051957806370a082311461053d57806375ee19081461055e57806379c65068146105b357806379cc6790146105d75780637ec69c50146105fb5780638da5cb5b146106105780639499e0181461064157806395d89b4114610656578063a9059cbb1461066b578063b414d4b61461068f578063b57dbdc6146106b0578063bd694af2146106c5578063c204642c146106da578063c8e569a814610731578063caa84eed14610746578063cae9ca511461075b578063d936547e146107c4578063d96e1f76146107e5578063dd62ed3e146107fa578063e724529c14610821578063f21869c514610847578063f2fde38b1461085c578063f868061e1461087d578063fa3eaa4114610895575b600654600090819060ff161561020257600080fd5b336000908152600f602052604090205460ff161561021f57600080fd5b42601054108015610231575042601454115b151561023c57600080fd5b60095460ff1615156001141561026a57336000908152600a602052604090205460ff16151561026a57600080fd5b4260105410801561027c575042601154115b15610296576706f05b59d3b2000034101561029657600080fd5b6015546102aa90349063ffffffff6108aa16565b91506102c56102b8836108e0565b839063ffffffff6109b216565b6016549091506102db908263ffffffff6109b216565b6016556102e93033836109c1565b6102f1610b45565b5050005b34801561030157600080fd5b5061030a610b82565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034457818101518382015260200161032c565b50505050905090810190601f1680156103715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038b57600080fd5b506103a3600160a060020a0360043516602435610c0f565b604080519115158252519081900360200190f35b3480156103c357600080fd5b506103cc610c50565b60408051918252519081900360200190f35b3480156103ea57600080fd5b506103a3600160a060020a0360043581169060243516604435610c56565b34801561041457600080fd5b506103cc610d06565b34801561042957600080fd5b50610432610d0c565b6040805160ff9092168252519081900360200190f35b34801561045457600080fd5b506103cc610d15565b34801561046957600080fd5b506103cc610d1b565b34801561047e57600080fd5b506103a3600435610d21565b34801561049657600080fd5b506104ab600160a060020a0360043516610dd4565b005b3480156104b957600080fd5b506104ab610e38565b3480156104ce57600080fd5b506103cc610e7a565b3480156104e357600080fd5b506103cc610e80565b3480156104f857600080fd5b506104ab610e86565b34801561050d57600080fd5b506104ab600435610ed8565b34801561052557600080fd5b506104ab600435602435604435606435608435610f19565b34801561054957600080fd5b506103cc600160a060020a0360043516610f7b565b34801561056a57600080fd5b50604080516020600480358082013583810280860185019096528085526104ab95369593946024949385019291829185019084908082843750949750610f8d9650505050505050565b3480156105bf57600080fd5b506104ab600160a060020a036004351660243561105b565b3480156105e357600080fd5b506103a3600160a060020a0360043516602435611146565b34801561060757600080fd5b506104ab611296565b34801561061c57600080fd5b506106256112d7565b60408051600160a060020a039092168252519081900360200190f35b34801561064d57600080fd5b506104ab6112e6565b34801561066257600080fd5b5061030a61130b565b34801561067757600080fd5b506103a3600160a060020a0360043516602435611363565b34801561069b57600080fd5b506103a3600160a060020a0360043516611379565b3480156106bc57600080fd5b506103a361138e565b3480156106d157600080fd5b506103a3611397565b3480156106e657600080fd5b50604080516020600480358082013583810280860185019096528085526104ab9536959394602494938501929182918501908490808284375094975050933594506113a09350505050565b34801561073d57600080fd5b506104ab61141f565b34801561075257600080fd5b506103cc61143d565b34801561076757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103a3948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506114439650505050505050565b3480156107d057600080fd5b506103a3600160a060020a0360043516611570565b3480156107f157600080fd5b5061030a611585565b34801561080657600080fd5b506103cc600160a060020a0360043581169060243516611748565b34801561082d57600080fd5b506104ab600160a060020a03600435166024351515611765565b34801561085357600080fd5b506103cc6117e0565b34801561086857600080fd5b506104ab600160a060020a03600435166117e6565b34801561088957600080fd5b506104ab60043561182c565b3480156108a157600080fd5b506103cc611848565b6000808315156108bd57600091506108d9565b508282028284828115156108cd57fe5b04146108d557fe5b8091505b5092915050565b6000426010541080156108f4575060115442105b156109225761091b606461090f84603263ffffffff6108aa16565b9063ffffffff61184e16565b90506109ad565b42601154108015610934575060125442105b1561094f5761091b606461090f84601963ffffffff6108aa16565b42601254108015610961575060135442105b1561097c5761091b606461090f84600a63ffffffff6108aa16565b4260135410801561098e575060145442105b156109a95761091b606461090f84600563ffffffff6108aa16565b5060005b919050565b6000828201838110156108d557fe5b60065460ff16156109d157600080fd5b600160a060020a03821615156109e657600080fd5b600160a060020a038316600090815260076020526040902054811115610a0b57600080fd5b600160a060020a038216600090815260076020526040902054610a34818363ffffffff6109b216565b1015610a3f57600080fd5b600160a060020a0383166000908152600f602052604090205460ff1615610a6557600080fd5b600160a060020a0382166000908152600f602052604090205460ff1615610a8b57600080fd5b600160a060020a038316600090815260076020526040902054610ab4908263ffffffff61186516565b600160a060020a038085166000908152600760205260408082209390935590841681522054610ae9908263ffffffff6109b216565b600160a060020a0380841660008181526007602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008054604051600160a060020a03909116913480156108fc02929091818181858888f19350505050158015610b7f573d6000803e3d6000fd5b50565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c075780601f10610bdc57610100808354040283529160200191610c07565b820191906000526020600020905b815481529060010190602001808311610bea57829003601f168201915b505050505081565b60065460009060ff1615610c2257600080fd5b50336000908152600860209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b60065460009060ff1615610c6957600080fd5b600160a060020a0384166000908152600860209081526040808320338452909152902054821115610c9957600080fd5b600160a060020a0384166000908152600860209081526040808320338452909152902054610ccd908363ffffffff61186516565b600160a060020a0385166000908152600860209081526040808320338452909152902055610cfc8484846109c1565b5060019392505050565b60105481565b60035460ff1681565b60135481565b60155481565b60065460009060ff1615610d3457600080fd5b33600090815260076020526040902054821115610d5057600080fd5b33600090815260076020526040902054610d70908363ffffffff61186516565b33600090815260076020526040902055600454610d93908363ffffffff61186516565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600054600160a060020a03163314610deb57600080fd5b60095460ff161515600114610dff57600080fd5b600160a060020a0381161515610e1457600080fd5b600160a060020a03166000908152600a60205260409020805460ff19166001179055565b600054600160a060020a03163314610e4f57600080fd5b60065460ff161515610e6d576006805460ff19166001179055610e78565b6006805460ff191690555b565b60165481565b60125481565b600054600160a060020a03163314610e9d57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610b7f573d6000803e3d6000fd5b60008054600160a060020a03163314610ef057600080fd5b610f0882670de0b6b3a764000063ffffffff6108aa16565b9050610f153033836109c1565b5050565b600054600160a060020a03163314610f3057600080fd5b8385108015610f3e57508284105b1515610f4957600080fd5b8183108015610f59575060145482105b1515610f6457600080fd5b601094909455601192909255601255601355601455565b60076020526000908152604090205481565b600080548190600160a060020a03163314610fa757600080fd5b60095460ff161515600114610fbb57600080fd5b825191506096821115610fcd57600080fd5b5060005b81811015611056578251600090849083908110610fea57fe5b60209081029091010151600160a060020a0316141561100857600080fd5b6001600a6000858481518110151561101c57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101610fd1565b505050565b600054600160a060020a0316331461107257600080fd5b600160a060020a03821660009081526007602052604090205461109b908263ffffffff6109b216565b600160a060020a0383166000908152600760205260409020556004546110c7908263ffffffff6109b216565b60045560408051828152905130916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3604080518281529051600160a060020a0384169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60065460009060ff161561115957600080fd5b600160a060020a03831660009081526007602052604090205482111561117e57600080fd5b600160a060020a03831660009081526008602090815260408083203384529091529020548211156111ae57600080fd5b600160a060020a0383166000908152600760205260409020546111d7908363ffffffff61186516565b600160a060020a0384166000908152600760209081526040808320939093556008815282822033835290522054611214908363ffffffff61186516565b600160a060020a038416600090815260086020908152604080832033845290915290205560045461124b908363ffffffff61186516565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a031633146112ad57600080fd5b60095460ff1615156112cb576009805460ff19166001179055610e78565b6009805460ff19169055565b600054600160a060020a031681565b600054600160a060020a031633146112fd57600080fd5b600054600160a060020a0316ff5b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610c075780601f10610bdc57610100808354040283529160200191610c07565b60006113703384846109c1565b50600192915050565b600f6020526000908152604090205460ff1681565b60065460ff1681565b60095460ff1681565b600080548190600160a060020a031633146113ba57600080fd5b8351915060968211156113cc57600080fd5b5060005b81811015611419576114113085838151811015156113ea57fe5b6020908102909101015161140c86670de0b6b3a764000063ffffffff6108aa16565b6109c1565b6001016113d0565b50505050565b600054600160a060020a0316331461143657600080fd5b6000601455565b60115481565b600654600090819060ff161561145857600080fd5b50836114648185610c0f565b15611568576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156114fc5781810151838201526020016114e4565b50505050905090810190601f1680156115295780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561154b57600080fd5b505af115801561155f573d6000803e3d6000fd5b50505050600191505b509392505050565b600a6020526000908152604090205460ff1681565b60604260105411156115cb575060408051808201909152601c81527f5072652073616c6520686173206e6f74207374617274656420796574000000006020820152611745565b426010541080156115dd575060115442105b1561161c575060408051808201909152601381527f5072652073616c652069732072756e6e696e67000000000000000000000000006020820152611745565b4260115410801561162e575060125442105b1561166d575060408051808201909152601681527f49434f20706861736520312069732072756e6e696e67000000000000000000006020820152611745565b4260125410801561167f575060135442105b156116be575060408051808201909152601681527f49434f20706861736520322069732072756e6e696e67000000000000000000006020820152611745565b426013541080156116d0575060145442105b1561170f575060408051808201909152601681527f49434f20706861736520332069732072756e6e696e67000000000000000000006020820152611745565b5060408051808201909152601181527f49434f206973206e6f742061637469766500000000000000000000000000000060208201525b90565b600860209081526000928352604080842090915290825290205481565b600054600160a060020a0316331461177c57600080fd5b600160a060020a0382166000818152600f6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b60145481565b600054600160a060020a031633146117fd57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a0316331461184357600080fd5b601555565b60055481565b600080828481151561185c57fe5b04949350505050565b60008282111561187157fe5b509003905600a165627a7a723058203b964e03af483c1d3fa386fafd481f61b92b7046f0eaf5de2090d17a1d3540980029
Contract_Creation_Code_ARM:



Contract Adress: 0xb8d92047fb921881e8b7f367467ef7e8d9bdda3f
Contract Name: QaMzyeToken
Contract_Source_Code: 
pragma solidity ^0.4.25;
 contract Token{
     uint256 public totalSupply;
    function balanceOf(address _owner) public  view returns (uint256 balance);
    function  transfer(address _to, uint256 _value) public  returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value)  public returns   
    (bool success);
    function approve(address _spender, uint256 _value) public  returns (bool success);
    function allowance(address _owner, address _spender) public view returns 
    (uint256 remaining);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 
    _value);
}
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
contract StandardToken is Token {
    using SafeMath for uint256;
    function transfer(address _to, uint256 _value) public  returns (bool success) {
        require(_to != address(0));
        require(balances[msg.sender] >= _value);   
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public  returns 
    (bool success) {
        require(_to != address(0));
        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
        balances[_to] = balances[_to].add(_value);
        balances[_from] = balances[_from].sub(_value); 
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }
    function balanceOf(address _owner) public  view  returns (uint256 balance) {
        return balances[_owner];
    }
    function approve(address _spender, uint256 _value) public  returns (bool success)   
    {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(address _owner, address _spender)  public  view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
}
contract QaMzyeToken is StandardToken { 
 string public name = "QaMzyeToken";
 string public symbol = "QMY";
 uint8 public decimals = 18;
 uint256 public INITIAL_SUPPLY = 520000000 * (10 ** 18);
 constructor() public 
 {
      totalSupply = INITIAL_SUPPLY;
      balances[msg.sender] = INITIAL_SUPPLY;
      emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);
  }
    /* Approves and then calls the receiving contract */
    function  approveAndCall (address  _spender, uint256  _value, bytes memory _extraData) public  returns (bool success) {
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
      if(
          !_spender.call(abi.encodeWithSelector(bytes4(keccak256("receiveApproval(address,uint256,address,bytes)")),msg.sender, _value, this, _extraData))
        ) { revert();}
        return true;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280600b81526020017f51614d7a7965546f6b656e000000000000000000000000000000000000000000815250600390805190602001906200005192919062000181565b506040805190810160405280600381526020017f514d590000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f92919062000181565b506012600560006101000a81548160ff021916908360ff1602179055506b01ae22487c1042af08000000600655348015620000d957600080fd5b50600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a362000230565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c457805160ff1916838001178555620001f5565b82800160010185558215620001f5579182015b82811115620001f4578251825591602001919060010190620001d7565b5b50905062000204919062000208565b5090565b6200022d91905b80821115620002295760008160009055506001016200020f565b5090565b90565b6112d080620002406000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b4578063095ea7b31461014457806318160ddd146101a957806323b872dd146101d45780632ff2e9dc14610259578063313ce5671461028457806370a08231146102b557806395d89b411461030c578063a9059cbb1461039c578063cae9ca5114610401578063dd62ed3e146104ac575b600080fd5b3480156100c057600080fd5b506100c9610523565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101095780820151818401526020810190506100ee565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015057600080fd5b5061018f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105c1565b604051808215151515815260200191505060405180910390f35b3480156101b557600080fd5b506101be610748565b6040518082815260200191505060405180910390f35b3480156101e057600080fd5b5061023f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061074e565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061026e610b0a565b6040518082815260200191505060405180910390f35b34801561029057600080fd5b50610299610b10565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102c157600080fd5b506102f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b23565b6040518082815260200191505060405180910390f35b34801561031857600080fd5b50610321610b6c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610361578082015181840152602081019050610346565b50505050905090810190601f16801561038e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a857600080fd5b506103e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c0a565b604051808215151515815260200191505060405180910390f35b34801561040d57600080fd5b50610492600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610e2e565b604051808215151515815260200191505060405180910390f35b3480156104b857600080fd5b5061050d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111e6565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b95780601f1061058e576101008083540402835291602001916105b9565b820191906000526020600020905b81548152906001019060200180831161059c57829003601f168201915b505050505081565b60008082148061064d57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561065857600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561078b57600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610856575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561086157600080fd5b6108b382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061094882600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a1a82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b600560009054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c025780601f10610bd757610100808354040283529160200191610c02565b820191906000526020600020905b815481529060010190602001808311610be557829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c4757600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610c9557600080fd5b610ce782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461128b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d7c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126d90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080831480610eba57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610ec557600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902033853086604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110cf5780820151818401526020810190506110b4565b50505050905090810190601f1680156110fc5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405180828051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af191505015156111db57600080fd5b600190509392505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080828401905083811015151561128157fe5b8091505092915050565b600082821115151561129957fe5b8183039050929150505600a165627a7a723058200a680d8c646be52eb2fc7ab8e9660f891a62a7b3c5f60920d1df96ebd947f4d30029
Contract_Creation_Code_ARM:



Contract Adress: 0x27525a26a2fc5bec00e1bf82a73abebcd91c4a42
Contract Name: TbtzToken
Contract_Source_Code: 
pragma solidity  0.4.24;
// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * See https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
// File: zeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}
// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) internal balances;
  uint256 internal totalSupply_;
  /**
  * @dev Total number of tokens in existence
  */
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }
  /**
  * @dev Transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_value <= balances[msg.sender]);
    require(_to != address(0));
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner];
  }
}
// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address _owner, address _spender)
    public view returns (uint256);
  function transferFrom(address _from, address _to, uint256 _value)
    public returns (bool);
  function approve(address _spender, uint256 _value) public returns (bool);
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * https://github.com/ethereum/EIPs/issues/20
 * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) internal allowed;
  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    returns (bool)
  {
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    require(_to != address(0));
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }
  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed[_owner][_spender];
  }
  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(
    address _spender,
    uint256 _addedValue
  )
    public
    returns (bool)
  {
    allowed[msg.sender][_spender] = (
      allowed[msg.sender][_spender].add(_addedValue));
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(
    address _spender,
    uint256 _subtractedValue
  )
    public
    returns (bool)
  {
    uint256 oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue >= oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
// File: contracts/TbtzToken.sol
/**
 * @title SimpleToken
 * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. 
 * Note they can later distribute these tokens as they wish using `transfer` and other
 * `StandardToken` functions.
 */
contract TbtzToken is StandardToken
{
  string public name      = "Tebit Entertainment Digital Assets";
  string public symbol    = "TBTZ";
  uint256 public decimals = 8;
  uint256 public INITIAL_SUPPLY = 26000000000000000;
  /**
   * @dev Contructor that gives msg.sender all of existing tokens. 
   */
 constructor() public
 {
  totalSupply_ = INITIAL_SUPPLY;
  balances[msg.sender] = INITIAL_SUPPLY;
 }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
6080604052606060405190810160405280602281526020017f546562697420456e7465727461696e6d656e74204469676974616c204173736581526020017f7473000000000000000000000000000000000000000000000000000000000000815250600390805190602001906200007892919062000139565b506040805190810160405280600481526020017f5442545a0000000000000000000000000000000000000000000000000000000081525060049080519060200190620000c692919062000139565b506008600555665c5edcbc290000600655348015620000e457600080fd5b506006546001819055506006546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001e8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017c57805160ff1916838001178555620001ad565b82800160010185558215620001ad579182015b82811115620001ac5782518255916020019190600101906200018f565b5b509050620001bc9190620001c0565b5090565b620001e591905b80821115620001e1576000816000905550600101620001c7565b5090565b90565b61132480620001f86000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101b457806323b872dd146101df5780632ff2e9dc14610264578063313ce5671461028f57806366188463146102ba57806370a082311461031f57806395d89b4114610376578063a9059cbb14610406578063d73dd6231461046b578063dd62ed3e146104d0575b600080fd5b3480156100cb57600080fd5b506100d4610547565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101145780820151818401526020810190506100f9565b50505050905090810190601f1680156101415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015b57600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105e5565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c96106d7565b6040518082815260200191505060405180910390f35b3480156101eb57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106e1565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b50610279610a9c565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610aa2565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610305600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aa8565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b50610360600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d3a565b6040518082815260200191505060405180910390f35b34801561038257600080fd5b5061038b610d82565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103cb5780820151818401526020810190506103b0565b50505050905090810190601f1680156103f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041257600080fd5b50610451600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e20565b604051808215151515815260200191505060405180910390f35b34801561047757600080fd5b506104b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611040565b604051808215151515815260200191505060405180910390f35b3480156104dc57600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061123c565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105dd5780601f106105b2576101008083540402835291602001916105dd565b820191906000526020600020905b8154815290600101906020018083116105c057829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561073057600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107bb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107f757600080fd5b610848826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112c390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108db826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112dc90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109ac82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112c390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b60055481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515610bba576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c4e565b610bcd83826112c390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e185780601f10610ded57610100808354040283529160200191610e18565b820191906000526020600020905b815481529060010190602001808311610dfb57829003601f168201915b505050505081565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e6f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610eab57600080fd5b610efc826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112c390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f8f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112dc90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006110d182600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112dc90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156112d157fe5b818303905092915050565b600081830190508281101515156112ef57fe5b809050929150505600a165627a7a7230582006fceaf75406b60c7dffd3e61e94ddb4c00e74c8fa3212d8226816849604d1670029
Contract_Creation_Code_ARM:



Contract Adress: 0x33b77705f3fbcb092bb898f20d58a370968d5627
Contract Name: KBKJToken
Contract_Source_Code: 
pragma solidity ^0.4.18;
/**
 * 使用安全计算法进行加减乘除运算
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
contract Ownable {
  address public owner;
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }
}
/**
 * 合约管理员可以在紧急情况下暂停合约，停止转账行为
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
  event Pause();
  event Unpause();
  bool public paused = false;
  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
    require(!paused);
    _;
  }
  /**
   * @dev Modifier to make a function callable only when the contract is paused.
   */
  modifier whenPaused() {
    require(paused);
    _;
  }
  /**
   * @dev called by the owner to pause, triggers stopped state
   */
  function pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }
  /**
   * @dev called by the owner to unpause, returns to normal state
   */
  function unpause() onlyOwner whenPaused public {
    paused = false;
    emit Unpause();
  }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) balances;
  uint256 totalSupply_;
  /**
  * @dev total number of tokens in existence
  */
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }
  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) internal allowed;
  /**
   * 方法调用者将from账户中的代币转入to账户中
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }
  /**
   * 方法调用者允许spender操作自己账户中value数量的代币
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * 查看spender还可以操作owner代币的数量是多少
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }
  /**
   * 调用者增加spender可操作的代币数量
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  /**
   * 调用者减少spender可操作的代币数量
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
/**
 * 一个可增发的代币。包含增发及结束增发的方法
 * @title Mintable token
 * @dev Simple ERC20 Token example, with mintable token creation
 * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120
 */
contract MintableToken is StandardToken, Ownable {
  event Mint(address indexed to, uint256 amount);
  event MintFinished();
  bool public mintingFinished = false;
  modifier canMint() {
    require(!mintingFinished);
    _;
  }
  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    totalSupply_ = totalSupply_.add(_amount);
    balances[_to] = balances[_to].add(_amount);
    emit Mint(_to, _amount);
    emit Transfer(address(0), _to, _amount);
    return true;
  }
  /**
   * @dev Function to stop minting new tokens.
   * @return True if the operation was successful.
   */
  function finishMinting() onlyOwner canMint public returns (bool) {
    mintingFinished = true;
    emit MintFinished();
    return true;
  }
}
/**
 * 设置增发的上限
 * @title Capped token
 * @dev Mintable token with a token cap.
 */
contract CappedToken is MintableToken {
  uint256 public cap;
  function CappedToken(uint256 _cap) public {
    require(_cap > 0);
    cap = _cap;
  }
  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    require(totalSupply_.add(_amount) <= cap);
    return super.mint(_to, _amount);
  }
}
// 暂停合约会影响以下方法的调用
contract PausableToken is StandardToken, Pausable {
  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transfer(_to, _value);
  }
  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transferFrom(_from, _to, _value);
  }
  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
    return super.approve(_spender, _value);
  }
  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
    return super.increaseApproval(_spender, _addedValue);
  }
  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
    return super.decreaseApproval(_spender, _subtractedValue);
  }
// 批量转账
function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
    uint receiverCount = _receivers.length;
    uint256 amount = _value.mul(uint256(receiverCount));
    /* require(receiverCount > 0 && receiverCount <= 20); */
    require(receiverCount > 0);
    require(_value > 0 && balances[msg.sender] >= amount);
    balances[msg.sender] = balances[msg.sender].sub(amount);
    for (uint i = 0; i < receiverCount; i++) {
        balances[_receivers[i]] = balances[_receivers[i]].add(_value);
        Transfer(msg.sender, _receivers[i], _value);
    }
    return true;
  }
}
/**
 * 调用者销毁手中的代币，代币总量也会相应减少，此方法是不可逆的
 * @title Burnable Token
 * @dev Token that can be irreversibly burned (destroyed).
 */
contract BurnableToken is BasicToken {
  event Burn(address indexed burner, uint256 value);
  /**
   * @dev Burns a specific amount of tokens.
   * @param _value The amount of token to be burned.
   */
  function burn(uint256 _value) public {
    require(_value <= balances[msg.sender]);
    // no need to require value <= totalSupply, since that would imply the
    // sender's balance is greater than the totalSupply, which *should* be an assertion failure
    address burner = msg.sender;
    balances[burner] = balances[burner].sub(_value);
    totalSupply_ = totalSupply_.sub(_value);
    emit Burn(burner, _value);
    emit Transfer(burner, address(0), _value);
  }
}
contract KBKJToken is CappedToken, PausableToken, BurnableToken {
    string public constant name = "HBKJCoin";
    string public constant symbol = "HBKJ";
    uint8 public constant decimals = 18;
    uint256 private constant TOKEN_CAP = 300000000 * (10 ** uint256(decimals));
    uint256 private constant TOKEN_INITIAL = 210000000 * (10 ** uint256(decimals));
    function KBKJToken() public CappedToken(TOKEN_CAP) {
      totalSupply_ = TOKEN_INITIAL;
      balances[msg.sender] = TOKEN_INITIAL;
      emit Transfer(address(0), msg.sender, TOKEN_INITIAL);
      paused = true;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cap","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_receivers","type":"address[]"},{"name":"_value","type":"uint256"}],"name":"batchTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"burner","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
60806040526000600360146101000a81548160ff0219169083151502179055506000600560006101000a81548160ff02191690831515021790555034801561004657600080fd5b50601260ff16600a0a6311e1a3000233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000811115156100a557600080fd5b8060048190555050601260ff16600a0a630c84588002600181905550601260ff16600a0a630c845880026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601260ff16600a0a630c845880026040518082815260200191505060405180910390a36001600560006101000a81548160ff0219169083151502179055506120bd806101ae6000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461012d57806306fdde031461015c578063095ea7b3146101ec57806318160ddd1461025157806323b872dd1461027c578063313ce56714610301578063355274ea146103325780633f4ba83a1461035d57806340c10f191461037457806342966c68146103d95780635c975abb14610406578063661884631461043557806370a082311461049a5780637d64bcb4146104f157806383f12fec146105205780638456cb59146105a85780638da5cb5b146105bf57806395d89b4114610616578063a9059cbb146106a6578063d73dd6231461070b578063dd62ed3e14610770578063f2fde38b146107e7575b600080fd5b34801561013957600080fd5b5061014261082a565b604051808215151515815260200191505060405180910390f35b34801561016857600080fd5b5061017161083d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b1578082015181840152602081019050610196565b50505050905090810190601f1680156101de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f857600080fd5b50610237600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610876565b604051808215151515815260200191505060405180910390f35b34801561025d57600080fd5b506102666108a6565b6040518082815260200191505060405180910390f35b34801561028857600080fd5b506102e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108b0565b604051808215151515815260200191505060405180910390f35b34801561030d57600080fd5b506103166108e2565b604051808260ff1660ff16815260200191505060405180910390f35b34801561033e57600080fd5b506103476108e7565b6040518082815260200191505060405180910390f35b34801561036957600080fd5b506103726108ed565b005b34801561038057600080fd5b506103bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ad565b604051808215151515815260200191505060405180910390f35b3480156103e557600080fd5b5061040460048036038101908080359060200190929190505050610a5e565b005b34801561041257600080fd5b5061041b610c16565b604051808215151515815260200191505060405180910390f35b34801561044157600080fd5b50610480600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c29565b604051808215151515815260200191505060405180910390f35b3480156104a657600080fd5b506104db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c59565b6040518082815260200191505060405180910390f35b3480156104fd57600080fd5b50610506610ca1565b604051808215151515815260200191505060405180910390f35b34801561052c57600080fd5b5061058e6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610d69565b604051808215151515815260200191505060405180910390f35b3480156105b457600080fd5b506105bd611003565b005b3480156105cb57600080fd5b506105d46110c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062257600080fd5b5061062b6110ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561066b578082015181840152602081019050610650565b50505050905090810190601f1680156106985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106b257600080fd5b506106f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611123565b604051808215151515815260200191505060405180910390f35b34801561071757600080fd5b50610756600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611153565b604051808215151515815260200191505060405180910390f35b34801561077c57600080fd5b506107d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611183565b6040518082815260200191505060405180910390f35b3480156107f357600080fd5b50610828600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061120a565b005b600360149054906101000a900460ff1681565b6040805190810160405280600881526020017f48424b4a436f696e00000000000000000000000000000000000000000000000081525081565b6000600560009054906101000a900460ff1615151561089457600080fd5b61089e83836112e1565b905092915050565b6000600154905090565b6000600560009054906101000a900460ff161515156108ce57600080fd5b6108d98484846113d3565b90509392505050565b601281565b60045481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561094957600080fd5b600560009054906101000a900460ff16151561096457600080fd5b6000600560006101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0b57600080fd5b600360149054906101000a900460ff16151515610a2757600080fd5b600454610a3f8360015461178d90919063ffffffff16565b11151515610a4c57600080fd5b610a5683836117ab565b905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610aad57600080fd5b339050610b01826000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b588260015461199190919063ffffffff16565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600560009054906101000a900460ff1681565b6000600560009054906101000a900460ff16151515610c4757600080fd5b610c5183836119aa565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cff57600080fd5b600360149054906101000a900460ff16151515610d1b57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600080600080600560009054906101000a900460ff16151515610d8b57600080fd5b85519250610da28386611c3b90919063ffffffff16565b9150600083111515610db357600080fd5b600085118015610e015750816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1515610e0c57600080fd5b610e5d826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090505b82811015610ff657610f14856000808985815181101515610ec157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808884815181101515610f2557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581815181101515610f7b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a38080600101915050610ea4565b6001935050505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561105f57600080fd5b600560009054906101000a900460ff1615151561107b57600080fd5b6001600560006101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f48424b4a0000000000000000000000000000000000000000000000000000000081525081565b6000600560009054906101000a900460ff1615151561114157600080fd5b61114b8383611c76565b905092915050565b6000600560009054906101000a900460ff1615151561117157600080fd5b61117b8383611e95565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561126657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156112de5780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561141057600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561145d57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156114e857600080fd5b611539826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115cc826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061169d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008082840190508381101515156117a157fe5b8091505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180957600080fd5b600360149054906101000a900460ff1615151561182557600080fd5b61183a8260015461178d90919063ffffffff16565b600181905550611891826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561199f57fe5b818303905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611abb576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b4f565b611ace838261199190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000806000841415611c505760009150611c6f565b8284029050828482811515611c6157fe5b04141515611c6b57fe5b8091505b5092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611cb357600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611d0057600080fd5b611d51826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461199190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611de4826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000611f2682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461178d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820eaefcfb300f65bbc85ef13cbea708cfd03e332c1947fc2bea9aea8279982357b0029
Contract_Creation_Code_ARM:



Contract Adress: 0x0b63cb1b6a55f6e225e60647c98aa09371237dc3
Contract Name: KSScidTOKEN
Contract_Source_Code: 
pragma solidity ^0.4.18;
// ---------------------------------------------------------------------------------------------------------------------------------------
//                                 ACLYD CENTRAL COMPANY IDENTITY (CCID) LISTING INDEX                                                   |
//      FULL NAME                             (CONTRACT ENTRY)              :         LISTED PUBLIC INFORMATION                          |                                |                             |
// Company Name                            (companyName)                    : Vinekross LLC                                              |
// Company Reg. Number                     (companyRegistrationgNum)        : No. L18958                                                 |
// Jurisdiction                            (companyJurisdiction)            : Saint Kitts and Nevis                                      |
// Type of Organization                    (companyType)                    : Limited Liability Company (LLC)                            |
// Listed Manager                          (companyManager)                 : Not Published                                              |
// Reg. Agent Name                         (companyRegisteredAgent)         : Morning Star Holdings Limited                              |
// Reg. Agent Address                      (companyRegisteredAgentAddress)  : Hunkins Waterfront Plaza, Ste 556, Main Street,            |
//                                                                          : Charlestown, Nevis                                         |
// Company Address                         (companyAddress)                 : Hunkins Waterfront Plaza, Ste 556, Main Street,            |
//                                                                          :  Charlestown, Nevis                                        |
// Company Official Website Domains        (companywebsites)                : Not Published                                              |
// CID Third Party Verification Wallet     (cidThirdPartyVerificationWallet): 0xC9Cd6d0801a51FdeF493E72155ba56e6B52f0E03                 |
// CID Token Symbol                        (cidtokensymbol)                 : KSScid                                                     |
// Total Number of CID tokens Issued       (totalCIDTokensIssued)           : 11                                                         |
// Central Company ID (CCID) Listing Wallet(ccidListingWallet)              : 0x893b9E12f0DA46C68607d69486afdECF709f2E6e                 |
//                                                                                                                                       |
// ---------------------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------
//      ICO TOKEN DETAILS    :        TOKEN INFORMATION                      |
// ICO token Standard        :                                               |
// ICO token Symbol          :                                               |
// ICO Total Token Supply    :                                               |
// ICO token Contract Address:                                               |
//                                                                           |
// (c) by The ACLYD PROJECT'S CENTRAL COMPANY INDENTIY (CCID) LISTING INDEX  |  
// ---------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Safe maths
// ----------------------------------------------------------------------------
contract SafeMath {
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}
// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
// ----------------------------------------------------------------------------
contract ERC20Interface {
    function cidTokenSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// Borrowed from KSScid TOKEN
// ----------------------------------------------------------------------------
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
    address public owner;
    address public newOwner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    function Owned() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}
// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and assisted
// token transfers
// ----------------------------------------------------------------------------
contract KSScidTOKEN is ERC20Interface, Owned, SafeMath {
    /* Public variables of KSScidTOKEN */
    string public companyName = "Vinekross LLC";
    string public companyRegistrationgNum = "No. L18958";
    string public companyJurisdiction =  "Saint Kitts and Nevis";
    string public companyType  = "Limited Liability Company (LLC)";
    string public companyManager = "Not Published";
    string public companyRegisteredAgent = "Morning Star Holdings Limited";
    string public companyRegisteredAgentAddress = "Hunkins Waterfront Plaza, Ste 556, Main Street, Charlestown, Nevis";
    string public companyAddress = "Hunkins Waterfront Plaza, Ste 556, Main Street, Charlestown, Nevis";
    string public companywebsites = "Not Published";
    string public cidThirdPartyVerificationWallet = "0xc9cd6d0801a51fdef493e72155ba56e6b52f0e03";
    string public cidTokenSymbol = "KSScid";
    string public totalCIDTokensIssued = "11";
    string public ccidListingWallet = "0x893b9E12f0DA46C68607d69486afdECF709f2E6e";
    string public icoTokenStandard = "Not Published";
    string public icoTokenSymbol = "Not Published";
    string public icoTotalTokenSupply ="Not Published";
    string public icoTokenContractAddress = "Not Published";
    string public symbol = "KSScid";
    string public name = "KSScid";
    uint8 public decimals;
    uint public _totalSupply = 11;
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    function KSScidTOKEN() public {
        symbol = "KSScid";
        name = "KSScid";
        decimals = 0;
        _totalSupply = 11;
        balances[0xC9Cd6d0801a51FdeF493E72155ba56e6B52f0E03] = _totalSupply;
        Transfer(address(0), 0xC9Cd6d0801a51FdeF493E72155ba56e6B52f0E03, _totalSupply);
    }
    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function cidTokenSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }
    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to  account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(msg.sender, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account
    // 
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the from account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        Transfer(from, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"companyJurisdiction","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cidTokenSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ccidListingWallet","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"icoTokenSymbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyRegisteredAgent","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalCIDTokensIssued","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"icoTokenContractAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companywebsites","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeSub","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeDiv","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"icoTotalTokenSupply","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyRegisteredAgentAddress","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cidTokenSymbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"},{"name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"companyManager","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeMul","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cidThirdPartyVerificationWallet","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferAnyERC20Token","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeAdd","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"icoTokenStandard","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"companyName","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyRegistrationgNum","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"companyType","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280600d81526020017f56696e656b726f7373204c4c43000000000000000000000000000000000000008152506002908051906020019062000051929190620008a5565b506040805190810160405280600a81526020017f4e6f2e204c313839353800000000000000000000000000000000000000000000815250600390805190602001906200009f929190620008a5565b506040805190810160405280601581526020017f5361696e74204b6974747320616e64204e65766973000000000000000000000081525060049080519060200190620000ed929190620008a5565b506040805190810160405280601f81526020017f4c696d69746564204c696162696c69747920436f6d70616e7920284c4c432900815250600590805190602001906200013b929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c6973686564000000000000000000000000000000000000008152506006908051906020019062000189929190620008a5565b506040805190810160405280601d81526020017f4d6f726e696e67205374617220486f6c64696e6773204c696d6974656400000081525060079080519060200190620001d7929190620008a5565b50608060405190810160405280604281526020017f48756e6b696e7320576174657266726f6e7420506c617a612c2053746520353581526020017f362c204d61696e205374726565742c20436861726c6573746f776e2c204e657681526020017f69730000000000000000000000000000000000000000000000000000000000008152506008908051906020019062000272929190620008a5565b50608060405190810160405280604281526020017f48756e6b696e7320576174657266726f6e7420506c617a612c2053746520353581526020017f362c204d61696e205374726565742c20436861726c6573746f776e2c204e657681526020017f6973000000000000000000000000000000000000000000000000000000000000815250600990805190602001906200030d929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c697368656400000000000000000000000000000000000000815250600a90805190602001906200035b929190620008a5565b50606060405190810160405280602a81526020017f307863396364366430383031613531666465663439336537323135356261353681526020017f6536623532663065303300000000000000000000000000000000000000000000815250600b9080519060200190620003d0929190620008a5565b506040805190810160405280600681526020017f4b53536369640000000000000000000000000000000000000000000000000000815250600c90805190602001906200041e929190620008a5565b506040805190810160405280600281526020017f3131000000000000000000000000000000000000000000000000000000000000815250600d90805190602001906200046c929190620008a5565b50606060405190810160405280602a81526020017f307838393362394531326630444134364336383630376436393438366166644581526020017f4346373039663245366500000000000000000000000000000000000000000000815250600e9080519060200190620004e1929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c697368656400000000000000000000000000000000000000815250600f90805190602001906200052f929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c697368656400000000000000000000000000000000000000815250601090805190602001906200057d929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c69736865640000000000000000000000000000000000000081525060119080519060200190620005cb929190620008a5565b506040805190810160405280600d81526020017f4e6f74205075626c6973686564000000000000000000000000000000000000008152506012908051906020019062000619929190620008a5565b506040805190810160405280600681526020017f4b535363696400000000000000000000000000000000000000000000000000008152506013908051906020019062000667929190620008a5565b506040805190810160405280600681526020017f4b5353636964000000000000000000000000000000000000000000000000000081525060149080519060200190620006b5929190620008a5565b50600b601655348015620006c857600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600681526020017f4b535363696400000000000000000000000000000000000000000000000000008152506013908051906020019062000756929190620008a5565b506040805190810160405280600681526020017f4b5353636964000000000000000000000000000000000000000000000000000081525060149080519060200190620007a4929190620008a5565b506000601560006101000a81548160ff021916908360ff160217905550600b6016819055506016546017600073c9cd6d0801a51fdef493e72155ba56e6b52f0e0373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555073c9cd6d0801a51fdef493e72155ba56e6b52f0e0373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6016546040518082815260200191505060405180910390a362000954565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008e857805160ff191683800117855562000919565b8280016001018555821562000919579182015b8281111562000918578251825591602001919060010190620008fb565b5b5090506200092891906200092c565b5090565b6200095191905b808211156200094d57600081600090555060010162000933565b5090565b90565b612b5880620009646000396000f3006080604052600436106101cd576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101d2578063095ea7b31461026257806323b872dd146102c7578063269b4a381461034c5780632c22af02146103dc578063313ce567146104075780633eaaf86b146104385780634e401a761461046357806353e1ead9146104f357806355f73e321461058357806362134b911461061357806370a08231146106a3578063710bdbe9146106fa57806379ba50971461078a5780638da5cb5b146107a157806395d89b41146107f857806397996b6714610888578063a1bd8a7814610918578063a293d1e8146109a8578063a9059cbb146109f3578063b5931f7c14610a58578063c2f3f03e14610aa3578063c2fe5ec214610b33578063c63b765914610bc3578063cae9ca5114610c53578063cc4320b414610cfe578063d05c78da14610d8e578063d4ee1d9014610dd9578063db9d59e714610e30578063dc39d06d14610ec0578063dd62ed3e14610f25578063e6cb901314610f9c578063edccd10514610fe7578063f2fde38b14611077578063f5ec2eed146110ba578063f73acff91461114a578063fdf48f2e146111da575b600080fd5b3480156101de57600080fd5b506101e761126a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022757808201518184015260208101905061020c565b50505050905090810190601f1680156102545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026e57600080fd5b506102ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611308565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b50610332600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113fa565b604051808215151515815260200191505060405180910390f35b34801561035857600080fd5b5061036161168a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a1578082015181840152602081019050610386565b50505050905090810190601f1680156103ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e857600080fd5b506103f1611728565b6040518082815260200191505060405180910390f35b34801561041357600080fd5b5061041c611773565b604051808260ff1660ff16815260200191505060405180910390f35b34801561044457600080fd5b5061044d611786565b6040518082815260200191505060405180910390f35b34801561046f57600080fd5b5061047861178c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104b857808201518184015260208101905061049d565b50505050905090810190601f1680156104e55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ff57600080fd5b5061050861182a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054857808201518184015260208101905061052d565b50505050905090810190601f1680156105755780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058f57600080fd5b506105986118c8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d85780820151818401526020810190506105bd565b50505050905090810190601f1680156106055780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061f57600080fd5b50610628611966565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561066857808201518184015260208101905061064d565b50505050905090810190601f1680156106955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106af57600080fd5b506106e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a04565b6040518082815260200191505060405180910390f35b34801561070657600080fd5b5061070f611a4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074f578082015181840152602081019050610734565b50505050905090810190601f16801561077c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079657600080fd5b5061079f611aeb565b005b3480156107ad57600080fd5b506107b6611c8a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561080457600080fd5b5061080d611caf565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561084d578082015181840152602081019050610832565b50505050905090810190601f16801561087a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561089457600080fd5b5061089d611d4d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108dd5780820151818401526020810190506108c2565b50505050905090810190601f16801561090a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561092457600080fd5b5061092d611deb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096d578082015181840152602081019050610952565b50505050905090810190601f16801561099a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109b457600080fd5b506109dd6004803603810190808035906020019092919080359060200190929190505050611e89565b6040518082815260200191505060405180910390f35b3480156109ff57600080fd5b50610a3e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ea5565b604051808215151515815260200191505060405180910390f35b348015610a6457600080fd5b50610a8d600480360381019080803590602001909291908035906020019092919050505061202e565b6040518082815260200191505060405180910390f35b348015610aaf57600080fd5b50610ab8612052565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610af8578082015181840152602081019050610add565b50505050905090810190601f168015610b255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b3f57600080fd5b50610b486120f0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b88578082015181840152602081019050610b6d565b50505050905090810190601f168015610bb55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610bcf57600080fd5b50610bd861218e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c18578082015181840152602081019050610bfd565b50505050905090810190601f168015610c455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c5f57600080fd5b50610ce4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061222c565b604051808215151515815260200191505060405180910390f35b348015610d0a57600080fd5b50610d1361247b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d53578082015181840152602081019050610d38565b50505050905090810190601f168015610d805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610d9a57600080fd5b50610dc36004803603810190808035906020019092919080359060200190929190505050612519565b6040518082815260200191505060405180910390f35b348015610de557600080fd5b50610dee61254a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3c57600080fd5b50610e45612570565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e85578082015181840152602081019050610e6a565b50505050905090810190601f168015610eb25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ecc57600080fd5b50610f0b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061260e565b604051808215151515815260200191505060405180910390f35b348015610f3157600080fd5b50610f86600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612772565b6040518082815260200191505060405180910390f35b348015610fa857600080fd5b50610fd160048036038101908080359060200190929190803590602001909291905050506127f9565b6040518082815260200191505060405180910390f35b348015610ff357600080fd5b50610ffc612815565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561103c578082015181840152602081019050611021565b50505050905090810190601f1680156110695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561108357600080fd5b506110b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128b3565b005b3480156110c657600080fd5b506110cf612952565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561110f5780820151818401526020810190506110f4565b50505050905090810190601f16801561113c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561115657600080fd5b5061115f6129f0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561119f578082015181840152602081019050611184565b50505050905090810190601f1680156111cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156111e657600080fd5b506111ef612a8e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561122f578082015181840152602081019050611214565b50505050905090810190601f16801561125c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60148054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113005780601f106112d557610100808354040283529160200191611300565b820191906000526020600020905b8154815290600101906020018083116112e357829003601f168201915b505050505081565b600081601860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000611445601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e89565b601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061150e601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e89565b601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d7601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836127f9565b601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117205780601f106116f557610100808354040283529160200191611720565b820191906000526020600020905b81548152906001019060200180831161170357829003601f168201915b505050505081565b6000601760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460165403905090565b601560009054906101000a900460ff1681565b60165481565b600e8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118225780601f106117f757610100808354040283529160200191611822565b820191906000526020600020905b81548152906001019060200180831161180557829003601f168201915b505050505081565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118c05780601f10611895576101008083540402835291602001916118c0565b820191906000526020600020905b8154815290600101906020018083116118a357829003601f168201915b505050505081565b60108054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561195e5780601f106119335761010080835404028352916020019161195e565b820191906000526020600020905b81548152906001019060200180831161194157829003601f168201915b505050505081565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119fc5780601f106119d1576101008083540402835291602001916119fc565b820191906000526020600020905b8154815290600101906020018083116119df57829003601f168201915b505050505081565b6000601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ae35780601f10611ab857610100808354040283529160200191611ae3565b820191906000526020600020905b815481529060010190602001808311611ac657829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60138054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d455780601f10611d1a57610100808354040283529160200191611d45565b820191906000526020600020905b815481529060010190602001808311611d2857829003601f168201915b505050505081565b60128054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611de35780601f10611db857610100808354040283529160200191611de3565b820191906000526020600020905b815481529060010190602001808311611dc657829003601f168201915b505050505081565b600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e815780601f10611e5657610100808354040283529160200191611e81565b820191906000526020600020905b815481529060010190602001808311611e6457829003601f168201915b505050505081565b6000828211151515611e9a57600080fd5b818303905092915050565b6000611ef0601760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e89565b601760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f7c601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836127f9565b601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808211151561203e57600080fd5b818381151561204957fe5b04905092915050565b60118054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120e85780601f106120bd576101008083540402835291602001916120e8565b820191906000526020600020905b8154815290600101906020018083116120cb57829003601f168201915b505050505081565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121865780601f1061215b57610100808354040283529160200191612186565b820191906000526020600020905b81548152906001019060200180831161216957829003601f168201915b505050505081565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122245780601f106121f957610100808354040283529160200191612224565b820191906000526020600020905b81548152906001019060200180831161220757829003601f168201915b505050505081565b600082601860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156124095780820151818401526020810190506123ee565b50505050905090810190601f1680156124365780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561245857600080fd5b505af115801561246c573d6000803e3d6000fd5b50505050600190509392505050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125115780601f106124e657610100808354040283529160200191612511565b820191906000526020600020905b8154815290600101906020018083116124f457829003601f168201915b505050505081565b600081830290506000831480612539575081838281151561253657fe5b04145b151561254457600080fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126065780601f106125db57610100808354040283529160200191612606565b820191906000526020600020905b8154815290600101906020018083116125e957829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561266b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561272f57600080fd5b505af1158015612743573d6000803e3d6000fd5b505050506040513d602081101561275957600080fd5b8101908080519060200190929190505050905092915050565b6000601860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818301905082811015151561280f57600080fd5b92915050565b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128ab5780601f10612880576101008083540402835291602001916128ab565b820191906000526020600020905b81548152906001019060200180831161288e57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561290e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129e85780601f106129bd576101008083540402835291602001916129e8565b820191906000526020600020905b8154815290600101906020018083116129cb57829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a865780601f10612a5b57610100808354040283529160200191612a86565b820191906000526020600020905b815481529060010190602001808311612a6957829003601f168201915b505050505081565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b245780601f10612af957610100808354040283529160200191612b24565b820191906000526020600020905b815481529060010190602001808311612b0757829003601f168201915b5050505050815600a165627a7a723058202347f65f964dc808a4ca3934552b3d8f2c6947deafcd40aff879c3600bf26e600029
Contract_Creation_Code_ARM:



Contract Adress: 0x52f1e12283642689b791fac9a7c4af1003019c87
Contract Name: TokenERC20
Contract_Source_Code: 
pragma solidity >=0.4.22 <0.6.0;
contract owned {
    address public owner;
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
contract TokenERC20 {
    // Public variables of the token
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    // 18 decimals is the strongly suggested default, avoid changing it
    uint256 public totalSupply;
    // This creates an array with all balances
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    // This generates a public event on the blockchain that will notify clients
    event Transfer(address indexed from, address indexed to, uint256 value);
    // This generates a public event on the blockchain that will notify clients
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    // This notifies clients about the amount burnt
    event Burn(address indexed from, uint256 value);
    /**
     * Constrctor function
     *
     * Initializes contract with initial supply tokens to the creator of the contract
     */
    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens
        name = tokenName;                                       // Set the name for display purposes
        symbol = tokenSymbol;                                   // Set the symbol for display purposes
    }
    /**
     * Internal transfer, only can be called by this contract
     */
    function _transfer(address _from, address _to, uint _value) internal {
        // Prevent transfer to 0x0 address. Use burn() instead
        require(_to != address(0x0));
        // Check if the sender has enough
        require(balanceOf[_from] >= _value);
        // Check for overflows
        require(balanceOf[_to] + _value > balanceOf[_to]);
        // Save this for an assertion in the future
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        // Subtract from the sender
        balanceOf[_from] -= _value;
        // Add the same to the recipient
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        // Asserts are used to use static analysis to find bugs in your code. They should never fail
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    /**
     * Transfer tokens
     *
     * Send `_value` tokens to `_to` from your account
     *
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     // Check allowance
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    /**
     * Set allowance for other address
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    /**
     * Set allowance for other address and notify
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
     */
    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, address(this), _extraData);
            return true;
        }
    }
    /**
     * Destroy tokens
     *
     * Remove `_value` tokens from the system irreversibly
     *
     * @param _value the amount of money to burn
     */
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
        balanceOf[msg.sender] -= _value;            // Subtract from the sender
        totalSupply -= _value;                      // Updates totalSupply
        emit Burn(msg.sender, _value);
        return true;
    }
    /**
     * Destroy tokens from other account
     *
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
     *
     * @param _from the address of the sender
     * @param _value the amount of money to burn
     */
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
        require(_value <= allowance[_from][msg.sender]);    // Check allowance
        balanceOf[_from] -= _value;                         // Subtract from the targeted balance
        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
        totalSupply -= _value;                              // Update totalSupply
        emit Burn(_from, _value);
        return true;
    }
}
/******************************************/
/*       ADVANCED TOKEN STARTS HERE       */
/******************************************/
contract MyAdvancedToken is owned, TokenERC20 {
    uint256 public sellPrice;
    uint256 public buyPrice;
    mapping (address => bool) public frozenAccount;
    /* This generates a public event on the blockchain that will notify clients */
    event FrozenFunds(address target, bool frozen);
    /* Initializes contract with initial supply tokens to the creator of the contract */
    constructor(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
    /* Internal transfer, only can be called by this contract */
    function _transfer(address _from, address _to, uint _value) internal {
        require (_to != address(0x0));                          // Prevent transfer to 0x0 address. Use burn() instead
        require (balanceOf[_from] >= _value);                   // Check if the sender has enough
        require (balanceOf[_to] + _value >= balanceOf[_to]);    // Check for overflows
        require(!frozenAccount[_from]);                         // Check if sender is frozen
        require(!frozenAccount[_to]);                           // Check if recipient is frozen
        balanceOf[_from] -= _value;                             // Subtract from the sender
        balanceOf[_to] += _value;                               // Add the same to the recipient
        emit Transfer(_from, _to, _value);
    }
    /// @notice Create `mintedAmount` tokens and send it to `target`
    /// @param target Address to receive the tokens
    /// @param mintedAmount the amount of tokens it will receive
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
        balanceOf[target] += mintedAmount;
        totalSupply += mintedAmount;
        emit Transfer(address(0), address(this), mintedAmount);
        emit Transfer(address(this), target, mintedAmount);
    }
    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens
    /// @param target Address to be frozen
    /// @param freeze either to freeze it or not
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth
    /// @param newSellPrice Price the users can sell to the contract
    /// @param newBuyPrice Price users can buy from the contract
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
        sellPrice = newSellPrice;
        buyPrice = newBuyPrice;
    }
    /// @notice Buy tokens from contract by sending ether
    function buy() payable public {
        uint amount = msg.value / buyPrice;                 // calculates the amount
        _transfer(address(this), msg.sender, amount);       // makes the transfers
    }
    /// @notice Sell `amount` tokens to contract
    /// @param amount amount of tokens to be sold
    function sell(uint256 amount) public {
        address myAddress = address(this);
        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy
        _transfer(msg.sender, address(this), amount);       // makes the transfers
        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60806040526012600260006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b506040516200148e3803806200148e833981018060405260608110156200005357600080fd5b810190808051906020019092919080516401000000008111156200007657600080fd5b828101905060208101848111156200008d57600080fd5b8151856001820283011164010000000082111715620000ab57600080fd5b50509291906020018051640100000000811115620000c857600080fd5b82810190506020810184811115620000df57600080fd5b8151856001820283011164010000000082111715620000fd57600080fd5b5050929190505050600260009054906101000a900460ff1660ff16600a0a8302600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000908051906020019062000181929190620001a4565b5080600190805190602001906200019a929190620001a4565b5050505062000253565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e757805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000217578251825591602001919060010190620001fa565b5b5090506200022791906200022b565b5090565b6200025091905b808211156200024c57600081600090555060010162000232565b5090565b90565b61122b80620002636000396000f3fe6080604052600436106100b4576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde03146100b9578063095ea7b31461014957806318160ddd146101bc57806323b872dd146101e7578063313ce5671461027a57806342966c68146102ab57806370a08231146102fe57806379cc67901461036357806395d89b41146103d6578063a9059cbb14610466578063cae9ca51146104d9578063dd62ed3e146105e3575b600080fd5b3480156100c557600080fd5b506100ce610668565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010e5780820151818401526020810190506100f3565b50505050905090810190601f16801561013b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015557600080fd5b506101a26004803603604081101561016c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610706565b604051808215151515815260200191505060405180910390f35b3480156101c857600080fd5b506101d16107f8565b6040518082815260200191505060405180910390f35b3480156101f357600080fd5b506102606004803603606081101561020a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107fe565b604051808215151515815260200191505060405180910390f35b34801561028657600080fd5b5061028f61092b565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102b757600080fd5b506102e4600480360360208110156102ce57600080fd5b810190808035906020019092919050505061093e565b604051808215151515815260200191505060405180910390f35b34801561030a57600080fd5b5061034d6004803603602081101561032157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a42565b6040518082815260200191505060405180910390f35b34801561036f57600080fd5b506103bc6004803603604081101561038657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a5a565b604051808215151515815260200191505060405180910390f35b3480156103e257600080fd5b506103eb610c74565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042b578082015181840152602081019050610410565b50505050905090810190601f1680156104585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047257600080fd5b506104bf6004803603604081101561048957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d12565b604051808215151515815260200191505060405180910390f35b3480156104e557600080fd5b506105c9600480360360608110156104fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561054357600080fd5b82018360208201111561055557600080fd5b8035906020019184600183028401116401000000008311171561057757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610d29565b604051808215151515815260200191505060405180910390f35b3480156105ef57600080fd5b506106526004803603604081101561060657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ead565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fe5780601f106106d3576101008083540402835291602001916106fe565b820191906000526020600020905b8154815290600101906020018083116106e157829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561088b57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610920848484610ed2565b600190509392505050565b600260009054906101000a900460ff1681565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561098e57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60046020528060005260406000206000915090505481565b600081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610aaa57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b3557600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816003600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d0a5780601f10610cdf57610100808354040283529160200191610d0a565b820191906000526020600020905b815481529060010190602001808311610ced57829003601f168201915b505050505081565b6000610d1f338484610ed2565b6001905092915050565b600080849050610d398585610706565b15610ea4578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e33578082015181840152602081019050610e18565b50505050905090810190601f168015610e605780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610e8257600080fd5b505af1158015610e96573d6000803e3d6000fd5b505050506001915050610ea6565b505b9392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f0e57600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f5c57600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610fea57600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011415156111f957fe5b5050505056fea165627a7a723058205147d5044151f8b444dd5d343598d2ed6b4844f8c5174a7f69649e097cc70cd1002900000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000742494f636f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000342494f0000000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0xda58e44ef23c39f14f8ec920a9937f7812edf95d
Contract Name: CheersCoin
Contract_Source_Code: 
pragma solidity ^0.4.25;
// File: contracts/util/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, throws on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers, truncating the quotient.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    /**
    * @dev Adds two numbers, throws on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
// File: contracts/token/ERC20.sol
/**
 *   @title ERC20
 *   @dev Standart ERC20 token interface
 */
contract ERC20 {
    uint256 public totalSupply = 0;
    mapping(address => uint256) internal balances;
    mapping (address => mapping (address => uint256)) internal allowed;
    function balanceOf(address _who) public view returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
    function approve(address _spender, uint256 _value) public returns (bool);
    function allowance(address _owner, address _spender) public view returns (uint256);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}
// File: contracts/token/CheersCoin.sol
contract CheersCoin is ERC20 {
    using SafeMath for uint256;
    string public constant name = "Cheers Coin";
    string public constant symbol = "CHRS";
    uint8 public constant decimals = 18;
    // Ico contract address
    address public ico;
    address public admin;
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    // Disables/enables token transfers, for migration to platform mainnet
    bool public tokensAreFrozen = true;
    // Allows execution by the ico only
    modifier icoOnly {
        require(msg.sender == ico || msg.sender == admin);
        _;
    }
    modifier tokenUnfrozen {
        require(msg.sender == ico || msg.sender == admin || !tokensAreFrozen);
        _;
    }
    constructor (address _ico, address _admin) public {
        ico = _ico;
        admin = _admin;
    }
    function mintTokens(address _beneficiary, uint256 _value) external icoOnly {
        require(_beneficiary != address(0));
        require(_value > 0);
        uint256 tempValue = _value *  (10 ** uint256(decimals));
        balances[_beneficiary] = balances[_beneficiary].add(tempValue);
        totalSupply = totalSupply.add(tempValue);
        emit Mint(_beneficiary, tempValue);
        emit Transfer(0x0, _beneficiary, tempValue);
    }
    function defrostTokens() external icoOnly {
        tokensAreFrozen = false;
    }
    function frostTokens() external icoOnly {
        tokensAreFrozen = true;
    }
    function burnTokens(address _investor, uint256 _value) external icoOnly {
        require(_value > 0);
        require(balances[_investor] >= _value);
        uint256 tempValue = _value *  (10 ** uint256(decimals));
        totalSupply = totalSupply.sub(tempValue);
        balances[_investor] = balances[_investor].sub(tempValue);
        emit Burn(_investor, tempValue);
    }
    function balanceOf(address _who) public view returns(uint256) {
        return balances[_who];
    }
    function transfer(address _to, uint256 _amount) public tokenUnfrozen returns(bool) {
        require(_to != address(0));
        require(_to != address(this));
        require(_amount > 0);
        require(_amount <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _amount) public tokenUnfrozen returns(bool) {
        require(_to != address(0));
        require(_to != address(this));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }
    function approve(address _spender, uint256 _amount) public returns(bool) {
        // reduce spender's allowance to 0 then set desired value after to avoid race condition
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }
    function allowance(address _owner, address _spender) public view returns(uint256) {
        return allowed[_owner][_spender];
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_investor","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"frostTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"ico","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"defrostTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"tokensAreFrozen","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_beneficiary","type":"address"},{"name":"_value","type":"uint256"}],"name":"mintTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"admin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_ico","type":"address"},{"name":"_admin","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
6080604052600080556004805460a060020a60ff0219167401000000000000000000000000000000000000000017905534801561003b57600080fd5b50604051604080610c3183398101604052805160209091015160038054600160a060020a03938416600160a060020a03199182161790915560048054939092169216919091179055610b9f806100926000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b3146101745780630d1118ce146101ac57806318160ddd146101d257806323b872dd146101f9578063313ce567146102235780634ac6d5f41461024e5780635d4522011461026357806370a08231146102945780638e0ef033146102b557806395d89b41146102ca578063a9059cbb146102df578063ca67065f14610303578063dd62ed3e14610318578063f0dda65c1461033f578063f851a44014610363575b600080fd5b3480156100f657600080fd5b506100ff610378565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a03600435166024356103af565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101d0600160a060020a0360043516602435610451565b005b3480156101de57600080fd5b506101e7610556565b60408051918252519081900360200190f35b34801561020557600080fd5b50610198600160a060020a036004358116906024351660443561055c565b34801561022f57600080fd5b5061023861073e565b6040805160ff9092168252519081900360200190f35b34801561025a57600080fd5b506101d0610743565b34801561026f57600080fd5b506102786107a8565b60408051600160a060020a039092168252519081900360200190f35b3480156102a057600080fd5b506101e7600160a060020a03600435166107b7565b3480156102c157600080fd5b506101d06107d2565b3480156102d657600080fd5b506100ff610820565b3480156102eb57600080fd5b50610198600160a060020a0360043516602435610857565b34801561030f57600080fd5b506101986109b2565b34801561032457600080fd5b506101e7600160a060020a03600435811690602435166109d3565b34801561034b57600080fd5b506101d0600160a060020a03600435166024356109fe565b34801561036f57600080fd5b50610278610b3c565b60408051808201909152600b81527f43686565727320436f696e000000000000000000000000000000000000000000602082015281565b60008115806103df5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b15156103ea57600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600354600090600160a060020a03163314806104775750600454600160a060020a031633145b151561048257600080fd5b6000821161048f57600080fd5b600160a060020a0383166000908152600160205260409020548211156104b457600080fd5b50600054670de0b6b3a76400008202906104d4908263ffffffff610b4b16565b6000908155600160a060020a0384168152600160205260409020546104ff908263ffffffff610b4b16565b600160a060020a038416600081815260016020908152604091829020939093558051848152905191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592918290030190a2505050565b60005481565b600354600090600160a060020a03163314806105825750600454600160a060020a031633145b806105a8575060045474010000000000000000000000000000000000000000900460ff16155b15156105b357600080fd5b600160a060020a03831615156105c857600080fd5b600160a060020a0383163014156105de57600080fd5b600160a060020a03841660009081526001602052604090205482111561060357600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561063357600080fd5b600160a060020a03841660009081526001602052604090205461065c908363ffffffff610b4b16565b600160a060020a0385166000908152600160209081526040808320939093556002815282822033835290522054610699908363ffffffff610b4b16565b600160a060020a0380861660009081526002602090815260408083203384528252808320949094559186168152600190915220546106dd908363ffffffff610b5d16565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b601281565b600354600160a060020a03163314806107665750600454600160a060020a031633145b151561077157600080fd5b6004805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600354600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a03163314806107f55750600454600160a060020a031633145b151561080057600080fd5b6004805474ff000000000000000000000000000000000000000019169055565b60408051808201909152600481527f4348525300000000000000000000000000000000000000000000000000000000602082015281565b600354600090600160a060020a031633148061087d5750600454600160a060020a031633145b806108a3575060045474010000000000000000000000000000000000000000900460ff16155b15156108ae57600080fd5b600160a060020a03831615156108c357600080fd5b600160a060020a0383163014156108d957600080fd5b600082116108e657600080fd5b3360009081526001602052604090205482111561090257600080fd5b33600090815260016020526040902054610922908363ffffffff610b4b16565b3360009081526001602052604080822092909255600160a060020a03851681522054610954908363ffffffff610b5d16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60045474010000000000000000000000000000000000000000900460ff1681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600090600160a060020a0316331480610a245750600454600160a060020a031633145b1515610a2f57600080fd5b600160a060020a0383161515610a4457600080fd5b60008211610a5157600080fd5b50600160a060020a038216600090815260016020526040902054670de0b6b3a7640000820290610a87908263ffffffff610b5d16565b600160a060020a03841660009081526001602052604081209190915554610ab4908263ffffffff610b5d16565b600055604080518281529051600160a060020a038516917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a2604080518281529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b600454600160a060020a031681565b600082821115610b5757fe5b50900390565b600082820183811015610b6c57fe5b93925050505600a165627a7a72305820d3c179aea06568e87ca91947e6914ce9be63270ed7947442695bb6b45fb253cf0029000000000000000000000000fc7816f5c39ca41238f770010d99e12b3c4ef4fa000000000000000000000000cdc8af3a3bd9144e88c392de631f8800f4caf18d
Contract_Creation_Code_ARM:



Contract Adress: 0xa6a75cce4504be61eaf35093b347fa879d24d921
Contract Name: TokenERC20
Contract_Source_Code: 
pragma solidity ^0.4.24;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }  // token的 接受者 这里声明接口, 将会在我们的ABI里
contract TokenERC20 {
/*********Token的属性说明************/
    string public name = 'Super DataBase Coin';
    string public symbol = 'SDBC';
    uint8 public decimals = 8;  // 18 是建议的默认值
    uint256 public totalSupply; // 发行量
    // 建立映射 地址对应了 uint' 便是他的余额
    mapping (address => uint256) public balanceOf;   
    // 地址对应余额
    mapping (address => mapping (address => uint256)) public allowance;
     // 事件，用来通知客户端Token交易发生
    event Transfer(address indexed from, address indexed to, uint256 value);
     // 事件，用来通知客户端代币被消耗(这里就不是转移, 是token用了就没了)
    event Burn(address indexed from, uint256 value);
    // 这里是构造函数, 实例创建时候执行
    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // 这里确定了总发行量
        balanceOf[msg.sender] = totalSupply;    // 这里就比较重要, 这里相当于实现了, 把token 全部给合约的Creator
        name = tokenName;
        symbol = tokenSymbol;
    }
    // token的发送函数
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);    // 不是零地址
        require(balanceOf[_from] >= _value);        // 有足够的余额来发送
        require(balanceOf[_to] + _value > balanceOf[_to]);  // 这里也有意思, 不能发送负数的值(hhhh)
        uint previousBalances = balanceOf[_from] + balanceOf[_to];  // 这个是为了校验, 避免过程出错, 总量不变对吧?
        balanceOf[_from] -= _value; //发钱 不多说
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);   // 这里触发了转账的事件 , 见上event
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);  // 判断总额是否一致, 避免过程出错
    }
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value); // 这里已经储存了 合约创建者的信息, 这个函数是只能被合约创建者使用
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     // 这句很重要, 地址对应的合约地址(也就是token余额)
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;   // 这里是可花费总量
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280601381526020017f537570657220446174614261736520436f696e000000000000000000000000008152506000908051906020019062000051929190620001a1565b506040805190810160405280600481526020017f5344424300000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620001a1565b506008600260006101000a81548160ff021916908360ff160217905550348015620000c957600080fd5b5060405162000f5538038062000f55833981018060405281019080805190602001909291908051820192919060200180518201929190505050600260009054906101000a900460ff1660ff16600a0a8302600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600090805190602001906200017e929190620001a1565b50806001908051906020019062000197929190620001a1565b5050505062000250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e457805160ff191683800117855562000215565b8280016001018555821562000215579182015b8281111562000214578251825591602001919060010190620001f7565b5b50905062000224919062000228565b5090565b6200024d91905b80821115620002495760008160009055506001016200022f565b5090565b90565b610cf580620002606000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a9578063095ea7b31461013957806318160ddd1461019e57806323b872dd146101c9578063313ce5671461024e57806370a082311461027f57806395d89b41146102d6578063a9059cbb14610366578063cae9ca51146103b3578063dd62ed3e1461045e575b600080fd5b3480156100b557600080fd5b506100be6104d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fe5780820151818401526020810190506100e3565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014557600080fd5b50610184600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610573565b604051808215151515815260200191505060405180910390f35b3480156101aa57600080fd5b506101b3610600565b6040518082815260200191505060405180910390f35b3480156101d557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610606565b604051808215151515815260200191505060405180910390f35b34801561025a57600080fd5b50610263610733565b604051808260ff1660ff16815260200191505060405180910390f35b34801561028b57600080fd5b506102c0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610746565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b506102eb61075e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032b578082015181840152602081019050610310565b50505050905090810190601f1680156103585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037257600080fd5b506103b1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107fc565b005b3480156103bf57600080fd5b50610444600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061080b565b604051808215151515815260200191505060405180910390f35b34801561046a57600080fd5b506104bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061098e565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056b5780601f106105405761010080835404028352916020019161056b565b820191906000526020600020905b81548152906001019060200180831161054e57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561069357600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506107288484846109b3565b600190509392505050565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b505050505081565b6108073383836109b3565b5050565b60008084905061081b8585610573565b15610985578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109155780820151818401526020810190506108fa565b50505050905090810190601f1680156109425780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561096457600080fd5b505af1158015610978573d6000803e3d6000fd5b5050505060019150610986565b5b509392505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156109da57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2857600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610ab657600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610cc357fe5b505050505600a165627a7a72305820d82e6d673c2c5c344b9c6f50d7d02d0d71efc193d752f65c1a23e59905b8e2fc00290000000000000000000000000000000000000000000000000000000077359400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000013537570657220446174614261736520436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045344424300000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0x72a50e8717681f4838a8908e6a40f334ce85c7cc
Contract Name: HighwayAcademyCertificates
Contract_Source_Code: 
pragma solidity 0.4.25;
contract HighwayAcademyCertificates {
    event NewCertificate(uint256 indexed certificate_number, string info, string course_name, string student_name, string linkedin, string released_project, string mentor_name, string graduation_date_place);
    struct Certificate {
        string info;
        string course_name;
        string student_name;
        string student_linkedin;
        string released_project;
        string mentor_name;
        string graduation_date_place;
    }
    address public owner;
    uint256 public count = 0;
    mapping(uint256 => Certificate) public certificates;
    modifier onlyOwner {
        require(msg.sender == owner, "Only owner can use this function");
        _;
    }
    constructor() public {
        owner = msg.sender;
    }
    function addCertificate(uint256 certificate_number, string info, string course_name, string student_name, string student_linkedin, string released_project, string mentor_name, string graduation_date_place) public onlyOwner {
        count++;
        require(count == certificate_number, "Wrong certificate number");
        certificates[count] = Certificate(info, course_name, student_name, student_linkedin, released_project, mentor_name, graduation_date_place);
        emit NewCertificate(certificate_number, info, course_name, student_name, student_linkedin, released_project, mentor_name, graduation_date_place);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"certificate_number","type":"uint256"},{"name":"info","type":"string"},{"name":"course_name","type":"string"},{"name":"student_name","type":"string"},{"name":"student_linkedin","type":"string"},{"name":"released_project","type":"string"},{"name":"mentor_name","type":"string"},{"name":"graduation_date_place","type":"string"}],"name":"addCertificate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"certificates","outputs":[{"name":"info","type":"string"},{"name":"course_name","type":"string"},{"name":"student_name","type":"string"},{"name":"student_linkedin","type":"string"},{"name":"released_project","type":"string"},{"name":"mentor_name","type":"string"},{"name":"graduation_date_place","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"certificate_number","type":"uint256"},{"indexed":false,"name":"info","type":"string"},{"indexed":false,"name":"course_name","type":"string"},{"indexed":false,"name":"student_name","type":"string"},{"indexed":false,"name":"linkedin","type":"string"},{"indexed":false,"name":"released_project","type":"string"},{"indexed":false,"name":"mentor_name","type":"string"},{"indexed":false,"name":"graduation_date_place","type":"string"}],"name":"NewCertificate","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0xFa4D0296D4b5DF9788ef0505d3Ab9302306C0106
Contract Name: ZCNYToken
Contract_Source_Code: 
pragma solidity ^0.4.17;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    /**
      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
      * account.
      */
    function Ownable() public {
        owner = msg.sender;
    }
    /**
      * @dev Throws if called by any account other than the owner.
      */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    /**
    * @dev Allows the current owner to transfer control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
    */
    function transferOwnership(address newOwner) public onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20Basic {
    uint public _totalSupply;
    function totalSupply() public constant returns (uint);
    function balanceOf(address who) public constant returns (uint);
    function transfer(address to, uint value) public;
    event Transfer(address indexed from, address indexed to, uint value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
    function allowance(address owner, address spender) public constant returns (uint);
    function transferFrom(address from, address to, uint value) public;
    function approve(address spender, uint value) public;
    event Approval(address indexed owner, address indexed spender, uint value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is Ownable, ERC20Basic {
    using SafeMath for uint;
    mapping(address => uint) public balances;
    // additional variables for use if transaction fees ever became necessary
    uint public basisPointsRate = 0;
    uint public maximumFee = 0;
    /**
    * @dev Fix for the ERC20 short address attack.
    */
    modifier onlyPayloadSize(uint size) {
        require(!(msg.data.length < size + 4));
        _;
    }
    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {
        uint fee = (_value.mul(basisPointsRate)).div(10000);
        if (fee > maximumFee) {
            fee = maximumFee;
        }
        uint sendAmount = _value.sub(fee);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(sendAmount);
        if (fee > 0) {
            balances[owner] = balances[owner].add(fee);
            Transfer(msg.sender, owner, fee);
        }
        Transfer(msg.sender, _to, sendAmount);
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param _owner The address to query the the balance of.
    * @return An uint representing the amount owned by the passed address.
    */
    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is BasicToken, ERC20 {
    mapping (address => mapping (address => uint)) public allowed;
    uint public constant MAX_UINT = 2**256 - 1;
    /**
    * @dev Transfer tokens from one address to another
    * @param _from address The address which you want to send tokens from
    * @param _to address The address which you want to transfer to
    * @param _value uint the amount of tokens to be transferred
    */
    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {
        var _allowance = allowed[_from][msg.sender];
        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
        // if (_value > _allowance) throw;
        uint fee = (_value.mul(basisPointsRate)).div(10000);
        if (fee > maximumFee) {
            fee = maximumFee;
        }
        if (_allowance < MAX_UINT) {
            allowed[_from][msg.sender] = _allowance.sub(_value);
        }
        uint sendAmount = _value.sub(fee);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(sendAmount);
        if (fee > 0) {
            balances[owner] = balances[owner].add(fee);
            Transfer(_from, owner, fee);
        }
        Transfer(_from, _to, sendAmount);
    }
    /**
    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
    * @param _spender The address which will spend the funds.
    * @param _value The amount of tokens to be spent.
    */
    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {
        // To change the approve amount you first have to reduce the addresses`
        //  allowance to zero by calling `approve(_spender, 0)` if it is not
        //  already 0 to mitigate the race condition described here:
        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
    }
    /**
    * @dev Function to check the amount of tokens than an owner allowed to a spender.
    * @param _owner address The address which owns the funds.
    * @param _spender address The address which will spend the funds.
    * @return A uint specifying the amount of tokens still available for the spender.
    */
    function allowance(address _owner, address _spender) public constant returns (uint remaining) {
        return allowed[_owner][_spender];
    }
}
/**
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
  event Pause();
  event Unpause();
  bool public paused = false;
  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
    require(!paused);
    _;
  }
  /**
   * @dev Modifier to make a function callable only when the contract is paused.
   */
  modifier whenPaused() {
    require(paused);
    _;
  }
  /**
   * @dev called by the owner to pause, triggers stopped state
   */
  function pause() onlyOwner whenNotPaused public {
    paused = true;
    Pause();
  }
  /**
   * @dev called by the owner to unpause, returns to normal state
   */
  function unpause() onlyOwner whenPaused public {
    paused = false;
    Unpause();
  }
}
contract BlackList is Ownable, BasicToken {
    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded ZCNY) ///////
    function getBlackListStatus(address _maker) external constant returns (bool) {
        return isBlackListed[_maker];
    }
    function getOwner() external constant returns (address) {
        return owner;
    }
    mapping (address => bool) public isBlackListed;
    function addBlackList (address _evilUser) public onlyOwner {
        isBlackListed[_evilUser] = true;
        AddedBlackList(_evilUser);
    }
    function removeBlackList (address _clearedUser) public onlyOwner {
        isBlackListed[_clearedUser] = false;
        RemovedBlackList(_clearedUser);
    }
    function destroyBlackFunds (address _blackListedUser) public onlyOwner {
        require(isBlackListed[_blackListedUser]);
        uint dirtyFunds = balanceOf(_blackListedUser);
        balances[_blackListedUser] = 0;
        _totalSupply -= dirtyFunds;
        DestroyedBlackFunds(_blackListedUser, dirtyFunds);
    }
    event DestroyedBlackFunds(address _blackListedUser, uint _balance);
    event AddedBlackList(address _user);
    event RemovedBlackList(address _user);
}
contract UpgradedStandardToken is StandardToken{
    // those methods are called by the legacy contract
    // and they must ensure msg.sender to be the contract address
    function transferByLegacy(address from, address to, uint value) public;
    function transferFromByLegacy(address sender, address from, address spender, uint value) public;
    function approveByLegacy(address from, address spender, uint value) public;
}
contract ZCNYToken is Pausable, StandardToken, BlackList {
    string public name;
    string public symbol;
    uint public decimals;
    address public upgradedAddress;
    bool public deprecated;
    //  The contract can be initialized with a number of tokens
    //  All the tokens are deposited to the owner address
    //
    // @param _balance Initial supply of the contract
    // @param _name Token Name
    // @param _symbol Token symbol
    // @param _decimals Token decimals
    function ZCNYToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {
        _totalSupply = _initialSupply;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        balances[owner] = _initialSupply;
        deprecated = false;
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function transfer(address _to, uint _value) public whenNotPaused {
        require(!isBlackListed[msg.sender]);
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);
        } else {
            return super.transfer(_to, _value);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {
        require(!isBlackListed[_from]);
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);
        } else {
            return super.transferFrom(_from, _to, _value);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function balanceOf(address who) public constant returns (uint) {
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).balanceOf(who);
        } else {
            return super.balanceOf(who);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {
        if (deprecated) {
            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);
        } else {
            return super.approve(_spender, _value);
        }
    }
    // Forward ERC20 methods to upgraded contract if this one is deprecated
    function allowance(address _owner, address _spender) public constant returns (uint remaining) {
        if (deprecated) {
            return StandardToken(upgradedAddress).allowance(_owner, _spender);
        } else {
            return super.allowance(_owner, _spender);
        }
    }
    // deprecate current contract in favour of a new one
    function deprecate(address _upgradedAddress) public onlyOwner {
        deprecated = true;
        upgradedAddress = _upgradedAddress;
        Deprecate(_upgradedAddress);
    }
    // deprecate current contract if favour of a new one
    function totalSupply() public constant returns (uint) {
        if (deprecated) {
            return StandardToken(upgradedAddress).totalSupply();
        } else {
            return _totalSupply;
        }
    }
    // Issue a new amount of tokens
    // these tokens are deposited into the owner address
    //
    // @param _amount Number of tokens to be issued
    function issue(uint amount) public onlyOwner {
        require(_totalSupply + amount > _totalSupply);
        require(balances[owner] + amount > balances[owner]);
        balances[owner] += amount;
        _totalSupply += amount;
        Issue(amount);
    }
    // Redeem tokens.
    // These tokens are withdrawn from the owner address
    // if the balance must be enough to cover the redeem
    // or the call will fail.
    // @param _amount Number of tokens to be issued
    function redeem(uint amount) public onlyOwner {
        require(_totalSupply >= amount);
        require(balances[owner] >= amount);
        _totalSupply -= amount;
        balances[owner] -= amount;
        Redeem(amount);
    }
    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {
        // Ensure transparency by hardcoding limit beyond which fees can never be added
        require(newBasisPoints < 20);
        require(newMaxFee < 50);
        basisPointsRate = newBasisPoints;
        maximumFee = newMaxFee.mul(10**decimals);
        Params(basisPointsRate, maximumFee);
    }
    // Called when new token are issued
    event Issue(uint amount);
    // Called when tokens are redeemed
    event Redeem(uint amount);
    // Called when contract is deprecated
    event Deprecate(address newAddress);
    // Called if contract ever adds fees
    event Params(uint feeBasisPoints, uint maxFee);
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_upgradedAddress","type":"address"}],"name":"deprecate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"deprecated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_evilUser","type":"address"}],"name":"addBlackList","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"upgradedAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maximumFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_maker","type":"address"}],"name":"getBlackListStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newBasisPoints","type":"uint256"},{"name":"newMaxFee","type":"uint256"}],"name":"setParams","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"issue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"redeem","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"basisPointsRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isBlackListed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_clearedUser","type":"address"}],"name":"removeBlackList","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"MAX_UINT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_blackListedUser","type":"address"}],"name":"destroyBlackFunds","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_initialSupply","type":"uint256"},{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_decimals","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"Issue","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newAddress","type":"address"}],"name":"Deprecate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"feeBasisPoints","type":"uint256"},{"indexed":false,"name":"maxFee","type":"uint256"}],"name":"Params","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_blackListedUser","type":"address"},{"indexed":false,"name":"_balance","type":"uint256"}],"name":"DestroyedBlackFunds","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_user","type":"address"}],"name":"AddedBlackList","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_user","type":"address"}],"name":"RemovedBlackList","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0x66b3487cf43c6661d590c534187e1c2bb6e61d6e
Contract Name: Goex
Contract_Source_Code: 
pragma solidity ^0.4.24;
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}
contract ERC20 is IERC20 {
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowed;
    uint256 private _totalSupply;
    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }
    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * Beware that changing an allowance with this method brings the risk that someone may use both the old
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    /**
     * @dev Transfer tokens from one address to another.
     * Note that while this function emits an Approval event, this is not required as per the specification,
     * and other compliant implementations may not emit the event.
     * @param from address The address which you want to send tokens from
     * @param to address The address which you want to transfer to
     * @param value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        emit Approval(from, msg.sender, _allowed[from][msg.sender]);
        return true;
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * Emits an Approval event.
     * @param spender The address which will spend the funds.
     * @param addedValue The amount of tokens to increase the allowance by.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
     * @dev Decrease the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To decrement
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * Emits an Approval event.
     * @param spender The address which will spend the funds.
     * @param subtractedValue The amount of tokens to decrease the allowance by.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
    * @dev Transfer token for a specified addresses
    * @param from The address to transfer from.
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
    /**
     * @dev Internal function that mints an amount of the token and assigns it to
     * an account. This encapsulates the modification of balances such that the
     * proper events are emitted.
     * @param account The account that will receive the created tokens.
     * @param value The amount that will be created.
     */
    function _mint(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.add(value);
        _balances[account] = _balances[account].add(value);
        emit Transfer(address(0), account, value);
    }
    /**
     * @dev Internal function that burns an amount of the token of a given
     * account.
     * @param account The account whose tokens will be burnt.
     * @param value The amount that will be burnt.
     */
    function _burn(address account, uint256 value) internal {
        require(account != address(0));
        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }
    /**
     * @dev Internal function that burns an amount of the token of a given
     * account, deducting from the sender's allowance for said account. Uses the
     * internal burn function.
     * Emits an Approval event (reflecting the reduced allowance).
     * @param account The account whose tokens will be burnt.
     * @param value The amount that will be burnt.
     */
    function _burnFrom(address account, uint256 value) internal {
        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
        _burn(account, value);
        emit Approval(account, msg.sender, _allowed[account][msg.sender]);
    }
}
library Roles {
    struct Role {
        mapping (address => bool) bearer;
    }
    /**
     * @dev give an account access to this role
     */
    function add(Role storage role, address account) internal {
        require(account != address(0));
        require(!has(role, account));
        role.bearer[account] = true;
    }
    /**
     * @dev remove an account's access to this role
     */
    function remove(Role storage role, address account) internal {
        require(account != address(0));
        require(has(role, account));
        role.bearer[account] = false;
    }
    /**
     * @dev check if an account has this role
     * @return bool
     */
    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0));
        return role.bearer[account];
    }
}
contract MinterRole {
    using Roles for Roles.Role;
    event MinterAdded(address indexed account);
    event MinterRemoved(address indexed account);
    Roles.Role private _minters;
    constructor () internal {
        _addMinter(msg.sender);
    }
    modifier onlyMinter() {
        require(isMinter(msg.sender));
        _;
    }
    function isMinter(address account) public view returns (bool) {
        return _minters.has(account);
    }
    function addMinter(address account) public onlyMinter {
        _addMinter(account);
    }
    function renounceMinter() public {
        _removeMinter(msg.sender);
    }
    function _addMinter(address account) internal {
        _minters.add(account);
        emit MinterAdded(account);
    }
    function _removeMinter(address account) internal {
        _minters.remove(account);
        emit MinterRemoved(account);
    }
}
contract ERC20Mintable is ERC20, MinterRole {
    /**
     * @dev Function to mint tokens
     * @param to The address that will receive the minted tokens.
     * @param value The amount of tokens to mint.
     * @return A boolean that indicates if the operation was successful.
     */
    function mint(address to, uint256 value) public onlyMinter returns (bool) {
        _mint(to, value);
        return true;
    }
}
contract ERC20Burnable is ERC20 {
    /**
     * @dev Burns a specific amount of tokens.
     * @param value The amount of token to be burned.
     */
    function burn(uint256 value) public {
        _burn(msg.sender, value);
    }
    /**
     * @dev Burns a specific amount of tokens from the target address and decrements allowance
     * @param from address The address which you want to send tokens from
     * @param value uint256 The amount of token to be burned
     */
    function burnFrom(address from, uint256 value) public {
        _burnFrom(from, value);
    }
}
contract Goex is ERC20Mintable, ERC20Burnable {
  string public name = "Goex";
  string public symbol = "Goex";
  uint public decimals = 8;
  /**
   * @dev Constructor that gives msg.sender all of existing tokens.
   */
  constructor() public {
  }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"value","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526040805190810160405280600481526020017f476f657800000000000000000000000000000000000000000000000000000000815250600490805190602001906200005192919062000295565b506040805190810160405280600481526020017f476f657800000000000000000000000000000000000000000000000000000000815250600590805190602001906200009f92919062000295565b506008600655348015620000b257600080fd5b50620000cd33620000d3640100000000026401000000009004565b62000344565b620000f78160036200013d6401000000000262001945179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200017a57600080fd5b62000195828262000200640100000000026401000000009004565b151515620001a257600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200023e57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d857805160ff191683800117855562000309565b8280016001018555821562000309579182015b8281111562000308578251825591602001919060010190620002eb565b5b5090506200031891906200031c565b5090565b6200034191905b808211156200033d57600081600090555060010162000323565b5090565b90565b611ad080620003546000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018657806318160ddd146101eb57806323b872dd14610216578063313ce5671461029b57806339509351146102c657806340c10f191461032b57806342966c681461039057806370a08231146103bd57806379cc67901461041457806395d89b4114610461578063983b2d56146104f15780639865027514610534578063a457c2d71461054b578063a9059cbb146105b0578063aa271e1a14610615578063dd62ed3e14610670575b600080fd5b34801561010257600080fd5b5061010b6106e7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014b578082015181840152602081019050610130565b50505050905090810190601f1680156101785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019257600080fd5b506101d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610785565b604051808215151515815260200191505060405180910390f35b3480156101f757600080fd5b506102006108b2565b6040518082815260200191505060405180910390f35b34801561022257600080fd5b50610281600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108bc565b604051808215151515815260200191505060405180910390f35b3480156102a757600080fd5b506102b0610ac4565b6040518082815260200191505060405180910390f35b3480156102d257600080fd5b50610311600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610aca565b604051808215151515815260200191505060405180910390f35b34801561033757600080fd5b50610376600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d01565b604051808215151515815260200191505060405180910390f35b34801561039c57600080fd5b506103bb60048036038101908080359060200190929190505050610d2b565b005b3480156103c957600080fd5b506103fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d38565b6040518082815260200191505060405180910390f35b34801561042057600080fd5b5061045f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d80565b005b34801561046d57600080fd5b50610476610d8e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104b657808201518184015260208101905061049b565b50505050905090810190601f1680156104e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104fd57600080fd5b50610532600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e2c565b005b34801561054057600080fd5b50610549610e4c565b005b34801561055757600080fd5b50610596600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e57565b604051808215151515815260200191505060405180910390f35b3480156105bc57600080fd5b506105fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061108e565b604051808215151515815260200191505060405180910390f35b34801561062157600080fd5b50610656600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a5565b604051808215151515815260200191505060405180910390f35b34801561067c57600080fd5b506106d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110c2565b6040518082815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561077d5780601f106107525761010080835404028352916020019161077d565b820191906000526020600020905b81548152906001019060200180831161076057829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107c257600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b600061094d82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109d884848461116a565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b60065481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b0757600080fd5b610b9682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610d0c336110a5565b1515610d1757600080fd5b610d218383611357565b6001905092915050565b610d3533826114ab565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d8a82826115ff565b5050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b505050505081565b610e35336110a5565b1515610e4057600080fd5b610e49816117fd565b50565b610e5533611857565b565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e9457600080fd5b610f2382600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600061109b33848461116a565b6001905092915050565b60006110bb8260036118b190919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008083831115151561115b57600080fd5b82840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111a657600080fd5b6111f7816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061128a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561134d57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561139357600080fd5b6113a88160025461133690919063ffffffff16565b6002819055506113ff816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156114e757600080fd5b6114fc8160025461114990919063ffffffff16565b600281905550611553816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b61168e81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461114990919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061171882826114ab565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b61181181600361194590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61186b8160036119f590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156118ee57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561198157600080fd5b61198b82826118b1565b15151561199757600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a3157600080fd5b611a3b82826118b1565b1515611a4657600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505600a165627a7a72305820305cb0ce3134f642feefed2e655816a4a22a87190ec497cd6eabcde85ae894f70029
Contract_Creation_Code_ARM:



Contract Adress: 0xdfeae09d170ca8169991e9cf678b67cb572cb954
Contract Name: opterium
Contract_Source_Code: 
pragma solidity ^0.4.25;
contract opterium {
    /*
 *   See: http://opterium.ru/
 * 
 *   No one can change this smart contract, including the community creators.  
 *   The profit is : (interest is accrued continuously).
 * Up to 100  ETH = 1.0 % in 36 hours of your invested amount
 * From 100   ETH = 1.5 % in 36 hours *
 * From 200   ETH = 1.8 % in 36 hours *
 * From 500   ETH = 2.0 % in 36 hours *
 * From 1000  ETH = 1.6 % in 36 hours *
 * From 3000  ETH = 1.4 % in 36 hours *
 * From 5000  ETH = 1.2 % in 36 hours *
 * From 7000  ETH = 1.0 % in 36 hours *
 * From 10000 ETH = 2.5 % in 36 hours *
 *   Minimum deposit is 0.011 ETH.
 *
 *  How to make a deposit:
 *   Send cryptocurrency from ETH wallet (at least 0.011 ETH) to the address
 *   of the smart contract - opterium
 *   It is not allowed to make transfers from cryptocurrency exchanges.
 *   Only personal ETH wallet with private keys is allowed.
 * 
 *   Recommended limits are 200000 ETH, check the current ETH rate at
 *   the following link: https://ethgasstation.info/
 * 
 * How to get paid:
 *   Request your profit by sending 0 ETH to the address of the smart contract.
 *
  */  
    mapping (address => uint256) public invested;
    mapping (address => uint256) public atBlock;
    address techSupport = 0x720497fce7D8f7D7B89FB27E5Ae48b7DA884f582;
    uint techSupportPercent = 2;
    address defaultReferrer = 0x720497fce7D8f7D7B89FB27E5Ae48b7DA884f582;
    uint refPercent = 2;
    uint refBack = 2;
    function calculateProfitPercent(uint bal) private pure returns (uint) {
        if (bal >= 1e22) {
            return 25;
        }
        if (bal >= 7e21) {
            return 10;
        }
        if (bal >= 5e21) {
            return 12;
        }
        if (bal >= 3e21) {
            return 14;
        }
        if (bal >= 1e21) {
            return 16;
        }
        if (bal >= 5e20) {
            return 20;
        }
        if (bal >= 2e20) {
            return 18;
        }
        if (bal >= 1e20) {
            return 15;
        } else {
            return 10;
        }
    }
    function transferDefaultPercentsOfInvested(uint value) private {
        techSupport.transfer(value * techSupportPercent / 100);
    }
    function bytesToAddress(bytes bys) private pure returns (address addr) {
        assembly {
            addr := mload(add(bys, 20))
        }
    }
    function transferRefPercents(uint value, address sender) private {
        if (msg.data.length != 0) {
            address referrer = bytesToAddress(msg.data);
            if(referrer != sender) {
                sender.transfer(value * refBack / 100);
                referrer.transfer(value * refPercent / 100);
            } else {
                defaultReferrer.transfer(value * refPercent / 100);
            }
        } else {
            defaultReferrer.transfer(value * refPercent / 100);
        }
    }
    function () external payable {
        if (invested[msg.sender] != 0) {
            uint thisBalance = address(this).balance;
            uint amount = invested[msg.sender] * calculateProfitPercent(thisBalance) / 1000 * (block.number - atBlock[msg.sender]) / 9150;
            address sender = msg.sender;
            sender.transfer(amount);
        }
        if (msg.value > 0) {
            transferDefaultPercentsOfInvested(msg.value);
            transferRefPercents(msg.value, msg.sender);
        }
        atBlock[msg.sender] = block.number;
        invested[msg.sender] += (msg.value);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"invested","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"atBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
60806040526002805473720497fce7d8f7d7b89fb27e5ae48b7da884f582600160a060020a031991821681178355600383905560048054909216179055600581905560065534801561005057600080fd5b5061046f806100606000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166366b3f6bf81146101285780638aac13621461015b575b3360009081526020819052604081205481908190156100e65733600090815260016020526040902054303193506123be9043036103e861008a8661017c565b33600090815260208190526040902054028115156100a457fe5b04028115156100af57fe5b6040519190049250339150819083156108fc029084906000818181858888f193505050501580156100e4573d6000803e3d6000fd5b505b6000341115610102576100f83461024a565b6101023433610292565b505033600090815260016020908152604080832043905590829052902080543401905550005b34801561013457600080fd5b50610149600160a060020a0360043516610418565b60408051918252519081900360200190f35b34801561016757600080fd5b50610149600160a060020a036004351661042a565b600069021e19e0c9bab2400000821061019757506019610245565b69017b7883c0691660000082106101b05750600a610245565b69010f0cf064dd5920000082106101c95750600c610245565b68a2a15d09519be0000082106101e15750600e610245565b683635c9adc5dea0000082106101f957506010610245565b681b1ae4d6e2ef500000821061021157506014610245565b680ad78ebc5ac6200000821061022957506012610245565b68056bc75e2d6310000082106102415750600f610245565b50600a5b919050565b600254600354604051600160a060020a039092169160649184029190910480156108fc02916000818181858888f1935050505015801561028e573d6000803e3d6000fd5b5050565b600036156103cd576102d46000368080601f0160208091040260200160405190810160405280939291908181526020018383808284375061043c945050505050565b9050600160a060020a03808216908316146103825781600160a060020a03166108fc6064600654860281151561030657fe5b049081150290604051600060405180830381858888f19350505050158015610332573d6000803e3d6000fd5b5080600160a060020a03166108fc6064600554860281151561035057fe5b049081150290604051600060405180830381858888f1935050505015801561037c573d6000803e3d6000fd5b506103c8565b600454600554604051600160a060020a039092169160649186029190910480156108fc02916000818181858888f193505050501580156103c6573d6000803e3d6000fd5b505b610413565b600454600554604051600160a060020a039092169160649186029190910480156108fc02916000818181858888f19350505050158015610411573d6000803e3d6000fd5b505b505050565b60006020819052908152604090205481565b60016020526000908152604090205481565b60140151905600a165627a7a7230582058da05d2d2e7fb260f570bcf72db74343be624f621f74b194068ec055539f1010029
Contract_Creation_Code_ARM:



Contract Adress: 0xc84227fc4ccd9f9b5478825fce284eb8cef47fca
Contract Name: Moontrex
Contract_Source_Code: 
contract Moontrex {
    /* Public variables of the token */
    string public standard = 'Token 0.1';
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public initialSupply;
    uint256 public totalSupply;
    /* This creates an array with all balances */
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    /* Initializes contract with initial supply tokens to the creator of the contract */
    function Moontrex() {
         initialSupply = 1100000000000000000000000;
        name ="Moontrex";
        decimals = 16;
        symbol = "MOX";
        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens
        totalSupply = initialSupply;                        // Update total supply
    }
    /* Send coins */
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
        balanceOf[msg.sender] -= _value;                     // Subtract from the sender
        balanceOf[_to] += _value;                            // Add the same to the recipient
    }
    /* This unnamed function is called whenever someone tries to send ether to it */
    function () {
        throw;     // Prevents accidental sending of ether
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"initialSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"standard","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"}]
Contract_Creation_Code_16:
60606040526040805190810160405280600981526020017f546f6b656e20302e3100000000000000000000000000000000000000000000008152506000908051906020019061004f929190610174565b50341561005b57600080fd5b69e8ef1e96ae38978000006004819055506040805190810160405280600881526020017f4d6f6f6e74726578000000000000000000000000000000000000000000000000815250600190805190602001906100b7929190610174565b506010600360006101000a81548160ff021916908360ff1602179055506040805190810160405280600381526020017f4d4f5800000000000000000000000000000000000000000000000000000000008152506002908051906020019061011f929190610174565b50600454600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600581905550610219565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101b557805160ff19168380011785556101e3565b828001600101855582156101e3579182015b828111156101e25782518255916020019190600101906101c7565b5b5090506101f091906101f4565b5090565b61021691905b808211156102125760008160009055506001016101fa565b5090565b90565b6107a8806102286000396000f300606060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a957806318160ddd14610137578063313ce56714610160578063378dc3dc1461018f5780635a3b7e42146101b857806370a082311461024657806395d89b4114610293578063a9059cbb14610321578063dd62ed3e14610363575b34156100a457600080fd5b600080fd5b34156100b457600080fd5b6100bc6103cf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fc5780820151818401526020810190506100e1565b50505050905090810190601f1680156101295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014257600080fd5b61014a61046d565b6040518082815260200191505060405180910390f35b341561016b57600080fd5b610173610473565b604051808260ff1660ff16815260200191505060405180910390f35b341561019a57600080fd5b6101a2610486565b6040518082815260200191505060405180910390f35b34156101c357600080fd5b6101cb61048c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020b5780820151818401526020810190506101f0565b50505050905090810190601f1680156102385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025157600080fd5b61027d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061052a565b6040518082815260200191505060405180910390f35b341561029e57600080fd5b6102a6610542565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e65780820151818401526020810190506102cb565b50505050905090810190601f1680156103135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032c57600080fd5b610361600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105e0565b005b341561036e57600080fd5b6103b9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610757565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104655780601f1061043a57610100808354040283529160200191610465565b820191906000526020600020905b81548152906001019060200180831161044857829003601f168201915b505050505081565b60055481565b600360009054906101000a900460ff1681565b60045481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b505050505081565b60066020528060005260406000206000915090505481565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105d85780601f106105ad576101008083540402835291602001916105d8565b820191906000526020600020905b8154815290600101906020018083116105bb57829003601f168201915b505050505081565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561062c57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156106b957600080fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b60076020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820a475d80e5620a374260ad689cd05ed821979bd85a01f56efaf4f0cfdf9b03a720029
Contract_Creation_Code_ARM:



Contract Adress: 0x766f824e31cd8624976d0e01ac8bf7faefd772f7
Contract Name: TreasureToken
Contract_Source_Code: 
pragma solidity ^0.4.24;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public{
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) balances;
  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) allowed;
  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    uint256 _allowance = allowed[_from][msg.sender];
    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
    // require (_value <= _allowance);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = _allowance.sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }
  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }
  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval (address _spender, uint _addedValue) public
    returns (bool success)  {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  function decreaseApproval (address _spender, uint _subtractedValue) public
    returns (bool success) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
contract TreasureToken is StandardToken  {
    string public constant name = "Treasure Token";
    string public constant symbol = "TST";
    uint public constant decimals = 8;
    // there is no problem in using * here instead of .mul()
    uint256 public constant initialSupply = 10000000000 * (10 ** uint256(decimals));
    // Constructors
    constructor() public {
        totalSupply = initialSupply;
        balances[msg.sender] = initialSupply; // Send all tokens to owner
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"initialSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b506008600a0a6402540be400026000819055506008600a0a6402540be40002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611147806100816000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101b457806323b872dd146101df578063313ce56714610264578063378dc3dc1461028f57806366188463146102ba57806370a082311461031f57806395d89b4114610376578063a9059cbb14610406578063d73dd6231461046b578063dd62ed3e146104d0575b600080fd5b3480156100cb57600080fd5b506100d4610547565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101145780820151818401526020810190506100f9565b50505050905090810190601f1680156101415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015b57600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610580565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c9610672565b6040518082815260200191505060405180910390f35b3480156101eb57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610678565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b50610279610964565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610969565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610305600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610978565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b50610360600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c09565b6040518082815260200191505060405180910390f35b34801561038257600080fd5b5061038b610c52565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103cb5780820151818401526020810190506103b0565b50505050905090810190601f1680156103f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041257600080fd5b50610451600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c8b565b604051808215151515815260200191505060405180910390f35b34801561047757600080fd5b506104b6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e61565b604051808215151515815260200191505060405180910390f35b3480156104dc57600080fd5b50610531600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061105d565b6040518082815260200191505060405180910390f35b6040805190810160405280600e81526020017f547265617375726520546f6b656e00000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156106b757600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061078883600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110e490919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061081d83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110fd90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061087383826110e490919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600881565b6008600a0a6402540be4000281565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610a89576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b1d565b610a9c83826110e490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f545354000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610cc857600080fd5b610d1a82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110e490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610daf82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110fd90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000610ef282600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110fd90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156110f257fe5b818303905092915050565b600080828401905083811015151561111157fe5b80915050929150505600a165627a7a723058205a52bc215bc3028e72d81805412aa457c3bc2bbb2e51fac418bb8465d10fa0070029
Contract_Creation_Code_ARM:



Contract Adress: 0xb329faf7d7eeeb484030f3309e0a9b913e90abb3
Contract Name: CustomToken
Contract_Source_Code: 
pragma solidity ^0.4.19;
contract BaseToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
        Transfer(_from, _to, _value);
    }
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
}
contract CustomToken is BaseToken {
    function CustomToken() public {
        totalSupply = 1500000000000000000000000000;
        name = 'Budweiser';
        symbol = 'BWSR';
        decimals = 18;
        balanceOf[0x9A83EBbA7068fa46A67AD710651a0bB1B9441280] = totalSupply;
        Transfer(address(0), 0x9A83EBbA7068fa46A67AD710651a0bB1B9441280, totalSupply);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b506b04d8c55aefb8c05b5c0000006003819055506040805190810160405280600981526020017f42756477656973657200000000000000000000000000000000000000000000008152506000908051906020019061006f9291906101b3565b506040805190810160405280600481526020017f4257535200000000000000000000000000000000000000000000000000000000815250600190805190602001906100bb9291906101b3565b506012600260006101000a81548160ff021916908360ff16021790555060035460046000739a83ebba7068fa46a67ad710651a0bb1b944128073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550739a83ebba7068fa46a67ad710651a0bb1b944128073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6003546040518082815260200191505060405180910390a3610258565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f457805160ff1916838001178555610222565b82800160010185558215610222579182015b82811115610221578251825591602001919060010190610206565b5b50905061022f9190610233565b5090565b61025591905b80821115610251576000816000905550600101610239565b5090565b90565b610b41806102676000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e578063095ea7b31461012e57806318160ddd1461019357806323b872dd146101be578063313ce5671461024357806370a082311461027457806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e146103c0575b600080fd5b3480156100aa57600080fd5b506100b3610437565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610179600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104d5565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a86105c7565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b50610229600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105cd565b604051808215151515815260200191505060405180910390f35b34801561024f57600080fd5b506102586106fa565b604051808260ff1660ff16815260200191505060405180910390f35b34801561028057600080fd5b506102b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061070d565b6040518082815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610725565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610320578082015181840152602081019050610305565b50505050905090810190601f16801561034d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036757600080fd5b506103a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107c3565b604051808215151515815260200191505060405180910390f35b3480156103cc57600080fd5b50610421600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107da565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561065a57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506106ef8484846107ff565b600190509392505050565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107bb5780601f10610790576101008083540402835291602001916107bb565b820191906000526020600020905b81548152906001019060200180831161079e57829003601f168201915b505050505081565b60006107d03384846107ff565b6001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561082657600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561087457600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561090257600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610aaa57fe5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050505600a165627a7a723058209dc731c14f90a365596ea877c37bac0b86a2e771f4a48c095d0db4807e90d1810029
Contract_Creation_Code_ARM:



Contract Adress: 0x5d24041b851a001d33dd9019b1da2663b6dcae9d
Contract Name: EPWR
Contract_Source_Code: 
pragma solidity ^0.4.19;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return a / b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
contract Owned {
	address private Owner;
	function Owned() public{
	    Owner = msg.sender;
	}
	function IsOwner(address addr) view public returns(bool)
	{
	    return Owner == addr;
	}
	function TransferOwner(address newOwner) public onlyOwner
	{
	    Owner = newOwner;
	}
	function Terminate() public onlyOwner
	{
	    selfdestruct(Owner);
	}
	modifier onlyOwner(){
        require(msg.sender == Owner);
        _;
    }
}
contract EPWR is Owned {
    using SafeMath for uint256;
    string public constant name = "ETHEREUM POWER";
    string public constant symbol = "EPWR";
    uint256 public constant decimals = 18;  // 18 is the most common number of decimal places
    bool private tradeable;
    uint256 private currentSupply;
    mapping(address => uint256) private balances;
    mapping(address => mapping(address=> uint256)) private allowed;
    mapping(address => bool) private lockedAccounts;  
	/*
		Incoming Ether
	*/	
    event ReceivedEth(address indexed _from, uint256 _value);
	//this is the fallback
	function () payable public {
		emit ReceivedEth(msg.sender, msg.value);		
	}
	event TransferredEth(address indexed _to, uint256 _value);
	function FoundationTransfer(address _to, uint256 amtEth, uint256 amtToken) public onlyOwner
	{
		require(address(this).balance >= amtEth && balances[this] >= amtToken );
		if(amtEth >0)
		{
			_to.transfer(amtEth);
			emit TransferredEth(_to, amtEth);
		}
		if(amtToken > 0)
		{
			require(balances[_to] + amtToken > balances[_to]);
			balances[this] -= amtToken;
			balances[_to] += amtToken;
			emit Transfer(this, _to, amtToken);
		}
	}	
	/*
		End Incoming Ether
	*/
    function EPWR( ) public
    {
        uint256 initialTotalSupply = 500000000;
        balances[this] = initialTotalSupply * (10**decimals);
        currentSupply =  initialTotalSupply * (10**decimals);
	    emit Transfer(address(0), this, currentSupply);
    }
	uint256 constant startTime = 1525132800; // Date.UTC(2018, 4, 1) as seconds
	uint256 constant startAmt = 95000000;
	uint256 _lastDayPaid = 0;
	uint256 _currentMonth = 0;
	uint256 factor = 10000000;
    event DayMinted(uint256 day,uint256 val, uint256 now);
    function DailyMint() public {
        uint256 day = (now-startTime)/(60*60*24);
        require(startTime <= now);
        require(day >= _lastDayPaid);
        uint256 month = _lastDayPaid/30;
        if(month > _currentMonth){
            _currentMonth += 1;
            factor = (factor * 99)/100;
        }
        uint256 todaysPayout = (((factor * startAmt )/10000000)/30)* (10**decimals);
        balances[this] +=todaysPayout;
        currentSupply += todaysPayout;
        emit Transfer(address(0), this, todaysPayout);
        emit DayMinted(_lastDayPaid, todaysPayout, now);
        _lastDayPaid+=1;
    }
    function lastDayPaid() public view returns(uint256){
        return _lastDayPaid;
    }
	function MintToken(uint256 amt) public onlyOwner {
	    currentSupply += amt;
	    balances[this] += amt;
	    emit Transfer(address(0), this, amt);
	}
	function DestroyToken(uint256 amt) public onlyOwner {
	    require ( balances[this] >= amt);
	    currentSupply -= amt;
	    balances[this] -= amt;
	    emit Transfer(this,address(0), amt);
	}
    event SoldToken(address _buyer, uint256 _value, string note);
    function BuyToken(address _buyer, uint256 _value, string note) public onlyOwner
    {
		require(balances[this] >= _value && balances[_buyer] + _value > balances[_buyer]);
        emit SoldToken( _buyer,  _value,  note);
        balances[this] -= _value;
        balances[_buyer] += _value;
        emit Transfer(this, _buyer, _value);
    }
    function LockAccount(address toLock) public onlyOwner
    {
        lockedAccounts[toLock] = true;
    }
    function UnlockAccount(address toUnlock) public onlyOwner
    {
        delete lockedAccounts[toUnlock];
    }
    function SetTradeable(bool t) public onlyOwner
    {
        tradeable = t;
    }
    function IsTradeable() public view returns(bool)
    {
        return tradeable;
    }
    function totalSupply() constant public returns (uint256)
    {
        return currentSupply;
    }
    function balanceOf(address _owner) constant public returns (uint256 balance)
    {
        return balances[_owner];
    }
    function transfer(address _to, uint256 _value) public notLocked returns (bool success) {
        require(tradeable);
         if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
             emit Transfer( msg.sender, _to,  _value);
             balances[msg.sender] -= _value;
             balances[_to] += _value;
             return true;
         } else {
             return false;
         }
     }
    function transferFrom(address _from, address _to, uint _value)public notLocked returns (bool success) {
        require(!lockedAccounts[_from] && !lockedAccounts[_to]);
		require(tradeable);
        if (balances[_from] >= _value
            && allowed[_from][msg.sender] >= _value
            && balances[_to] + _value > balances[_to]) {
            emit Transfer( _from, _to,  _value);
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            balances[_to] += _value;
            return true;
        } else {
            return false;
        }
    }
     /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }
  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
   modifier notLocked(){
       require (!lockedAccounts[msg.sender]);
       _;
   }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"amt","type":"uint256"}],"name":"MintToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"amtEth","type":"uint256"},{"name":"amtToken","type":"uint256"}],"name":"FoundationTransfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"toLock","type":"address"}],"name":"LockAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_buyer","type":"address"},{"name":"_value","type":"uint256"},{"name":"note","type":"string"}],"name":"BuyToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"amt","type":"uint256"}],"name":"DestroyToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"TransferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"IsTradeable","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"t","type":"bool"}],"name":"SetTradeable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"Terminate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"toUnlock","type":"address"}],"name":"UnlockAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"DailyMint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"IsOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lastDayPaid","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"ReceivedEth","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"TransferredEth","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"day","type":"uint256"},{"indexed":false,"name":"val","type":"uint256"},{"indexed":false,"name":"now","type":"uint256"}],"name":"DayMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_buyer","type":"address"},{"indexed":false,"name":"_value","type":"uint256"},{"indexed":false,"name":"note","type":"string"}],"name":"SoldToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
6080604052600060055560006006556298968060075534801561002157600080fd5b5060008054600160a060020a03191633178155308082526002602090815260408084206b019d971e4fe8401e7400000090819055600181905581519081529051631dcd650094927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3506110c9806100a06000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305297781811461017557806306fdde031461018f5780630730a32214610219578063095ea7b31461024057806318160ddd1461027857806323b872dd1461029f5780632e42b012146102c9578063313ce567146102ea578063321de1d4146102ff5780635daf8a7114610368578063661884631461038057806370a08231146103a4578063858ac4d8146103c55780638aa99826146103e65780638e3bd6fa146103fb5780639445eb3a1461041557806395d89b411461042a578063a9059cbb1461043f578063b9c97a4414610463578063d73dd62314610484578063d9da76de146104a8578063dd0860a8146104bd578063dd62ed3e146104de578063ef43143714610505575b60408051348152905133917f52a6cdf67c40ce333b3d846e4e143db87f71dd7935612a4cafcf6ba76047ca1f919081900360200190a2005b34801561018157600080fd5b5061018d60043561051a565b005b34801561019b57600080fd5b506101a4610574565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101de5781810151838201526020016101c6565b50505050905090810190601f16801561020b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022557600080fd5b5061018d600160a060020a03600435166024356044356105ab565b34801561024c57600080fd5b50610264600160a060020a03600435166024356106f5565b604080519115158252519081900360200190f35b34801561028457600080fd5b5061028d61075c565b60408051918252519081900360200190f35b3480156102ab57600080fd5b50610264600160a060020a0360043581169060243516604435610762565b3480156102d557600080fd5b5061018d600160a060020a03600435166108fc565b3480156102f657600080fd5b5061028d610937565b34801561030b57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261018d948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061093c9650505050505050565b34801561037457600080fd5b5061018d600435610aa9565b34801561038c57600080fd5b50610264600160a060020a0360043516602435610b24565b3480156103b057600080fd5b5061028d600160a060020a0360043516610c14565b3480156103d157600080fd5b5061018d600160a060020a0360043516610c2f565b3480156103f257600080fd5b50610264610c75565b34801561040757600080fd5b5061018d6004351515610c96565b34801561042157600080fd5b5061018d610ced565b34801561043657600080fd5b506101a4610d12565b34801561044b57600080fd5b50610264600160a060020a0360043516602435610d49565b34801561046f57600080fd5b5061018d600160a060020a0360043516610e35565b34801561049057600080fd5b50610264600160a060020a0360043516602435610e6d565b3480156104b457600080fd5b5061018d610f06565b3480156104c957600080fd5b50610264600160a060020a0360043516611017565b3480156104ea57600080fd5b5061028d600160a060020a036004358116906024351661102b565b34801561051157600080fd5b5061028d611056565b600054600160a060020a0316331461053157600080fd5b60018054820190553060008181526002602090815260408083208054860190558051858152905160008051602061107e833981519152929181900390910190a350565b60408051808201909152600e81527f455448455245554d20504f574552000000000000000000000000000000000000602082015281565b600054600160a060020a031633146105c257600080fd5b303182118015906105e25750306000908152600260205260409020548111155b15156105ed57600080fd5b600082111561066d57604051600160a060020a0384169083156108fc029084906000818181858888f1935050505015801561062c573d6000803e3d6000fd5b50604080518381529051600160a060020a038516917f83007cefb28dc4cfb49f429f899c69d37f8011db578f48da2f64929a79bf67b3919081900360200190a25b60008111156106f057600160a060020a0383166000908152600260205260409020548181011161069c57600080fd5b30600081815260026020908152604080832080548690039055600160a060020a038716808452928190208054860190558051858152905192939260008051602061107e833981519152929181900390910190a35b505050565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60015490565b3360009081526004602052604081205460ff161561077f57600080fd5b600160a060020a03841660009081526004602052604090205460ff161580156107c15750600160a060020a03831660009081526004602052604090205460ff16155b15156107cc57600080fd5b60005474010000000000000000000000000000000000000000900460ff1615156107f557600080fd5b600160a060020a03841660009081526002602052604090205482118015906108405750600160a060020a03841660009081526003602090815260408083203384529091529020548211155b80156108655750600160a060020a038316600090815260026020526040902054828101115b156108f15782600160a060020a031684600160a060020a031660008051602061107e833981519152846040518082815260200191505060405180910390a350600160a060020a03808416600090815260026020818152604080842080548790039055600382528084203385528252808420805487900390559386168352522080548201905560016108f5565b5060005b9392505050565b600054600160a060020a0316331461091357600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b601281565b600054600160a060020a0316331461095357600080fd5b30600090815260026020526040902054821180159061098b5750600160a060020a038316600090815260026020526040902054828101115b151561099657600080fd5b7f0307f82a1d7930932f894f6f841bd41285da9d1374694c831ad1efa5911393168383836040518084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a155781810151838201526020016109fd565b50505050905090810190601f168015610a425780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a130600081815260026020908152604080832080548790039055600160a060020a038716808452928190208054870190558051868152905192939260008051602061107e833981519152929181900390910190a3505050565b600054600160a060020a03163314610ac057600080fd5b30600090815260026020526040902054811115610adc57600080fd5b600180548290039055306000818152600260209081526040808320805486900390558051858152905192939260008051602061107e833981519152929181900390910190a350565b336000908152600360209081526040808320600160a060020a038616845290915281205480831115610b7957336000908152600360209081526040808320600160a060020a0388168452909152812055610bae565b610b89818463ffffffff61105c16565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a03163314610c4657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005474010000000000000000000000000000000000000000900460ff1690565b600054600160a060020a03163314610cad57600080fd5b60008054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b600054600160a060020a03163314610d0457600080fd5b600054600160a060020a0316ff5b60408051808201909152600481527f4550575200000000000000000000000000000000000000000000000000000000602082015281565b3360009081526004602052604081205460ff1615610d6657600080fd5b60005474010000000000000000000000000000000000000000900460ff161515610d8f57600080fd5b336000908152600260205260409020548211801590610dc75750600160a060020a038316600090815260026020526040902054828101115b15610e2d57604080518381529051600160a060020a03851691339160008051602061107e8339815191529181900360200190a3503360009081526002602052604080822080548490039055600160a060020a038416825290208054820190556001610756565b506000610756565b600054600160a060020a03163314610e4c57600080fd5b600160a060020a03166000908152600460205260409020805460ff19169055565b336000908152600360209081526040808320600160a060020a0386168452909152812054610ea1908363ffffffff61106e16565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000808062015180635ae7adff19420104925042635ae7ae001115610f2a57600080fd5b600554831015610f3957600080fd5b600554601e90049150600654821115610f6357600680546001019055600754606490606302046007555b506007543060008181526002602090815260408083208054601e629896806305a995c09098029790970496909604670de0b6b3a764000002958601905560018054860190558051858152905160008051602061107e833981519152929181900390910190a360055460408051918252602082018390524282820152517f2bd46683d2f09f7082e2121b94af20e57d4ebfc802b67f4bb92d31adf4c1dbc39181900360600190a1505060058054600101905550565b600054600160a060020a0391821691161490565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60055490565b60008282111561106857fe5b50900390565b6000828201838110156108f557fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a623b3bab579324f071ed01f409f9ca6a82c356e74c55b7a73d2acf08c3e74120029
Contract_Creation_Code_ARM:



Contract Adress: 0x0a0ba2b6d7955029653b9f7ce42f7b6760d705ac
Contract Name: GGTCCoin
Contract_Source_Code: 
pragma solidity ^0.4.11;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;
  mapping(address => uint256) balances;
  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);
    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }
  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public constant returns (uint256 balance) {
    return balances[_owner];
  }
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) allowed;
  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }
  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) returns (bool) {
    // To change the approve amount you first have to reduce the addresses`
    //  allowance to zero by calling `approve(_spender, 0)` if it is not
    //  already 0 to mitigate the race condition described here:
    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }
  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    return allowed[_owner][_spender];
  }
  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval (address _spender, uint _addedValue)
    returns (bool success) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
  function decreaseApproval (address _spender, uint _subtractedValue)
    returns (bool success) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }
}
/**
 * @title GGTCCoin
 * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.
 * Note they can later distribute these tokens as they wish using `transfer` and other
 * `StandardToken` functions.
 */
contract GGTCCoin is StandardToken {
  string public constant name = "GGTC";
  string public constant symbol = "GGTC";
  uint8 public constant decimals = 18;
  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));
  /**
   * @dev Constructor that gives msg.sender all of existing tokens.
   */
  function GGTCCoin() {
    totalSupply = INITIAL_SUPPLY;
    balances[msg.sender] = INITIAL_SUPPLY;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"INITIAL_SUPPLY","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
6060604052341561000f57600080fd5b601260ff16600a0a633b9aca0002600081905550601260ff16600a0a633b9aca0002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112ae806100836000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014d57806318160ddd146101a757806323b872dd146101d05780632ff2e9dc14610249578063313ce5671461027257806366188463146102a157806370a08231146102fb57806395d89b4114610348578063a9059cbb146103d6578063d73dd62314610430578063dd62ed3e1461048a575b600080fd5b34156100ca57600080fd5b6100d26104f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401526020810190506100f7565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015857600080fd5b61018d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061052f565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba6106b6565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b61022f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106bc565b604051808215151515815260200191505060405180910390f35b341561025457600080fd5b61025c610a7b565b6040518082815260200191505060405180910390f35b341561027d57600080fd5b610285610a8c565b604051808260ff1660ff16815260200191505060405180910390f35b34156102ac57600080fd5b6102e1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a91565b604051808215151515815260200191505060405180910390f35b341561030657600080fd5b610332600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d22565b6040518082815260200191505060405180910390f35b341561035357600080fd5b61035b610d6b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039b578082015181840152602081019050610380565b50505050905090810190601f1680156103c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e157600080fd5b610416600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610da4565b604051808215151515815260200191505060405180910390f35b341561043b57600080fd5b610470600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fc8565b604051808215151515815260200191505060405180910390f35b341561049557600080fd5b6104e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111c4565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f474754430000000000000000000000000000000000000000000000000000000081525081565b6000808214806105bb57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156105c657600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106f957600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561074757600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107d257600080fd5b61082482600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124b90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108b982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061098b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124b90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601260ff16600a0a633b9aca000281565b601281565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610ba2576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c36565b610bb5838261124b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600481526020017f474754430000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610de157600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610e2f57600080fd5b610e8182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461124b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f1682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126490919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600061105982600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561125957fe5b818303905092915050565b600080828401905083811015151561127857fe5b80915050929150505600a165627a7a723058203a42bb22a9f7046782147b1a19388239f93ba32280eb1eea94492f26905e402a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xd79396ab3bfaaa0d9f6d11f95bb641601d93c0a9
Contract Name: TokenRegistry
Contract_Source_Code: 
pragma solidity 0.4.18;
// File: zeppelin-solidity/contracts/ownership/Ownable.sol
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
// File: contracts/TokenRegistry.sol
/**
 * The TokenRegistry is a basic registry mapping token symbols
 * to their known, deployed addresses on the current blockchain.
 *
 * Note that the TokenRegistry does *not* mediate any of the
 * core protocol's business logic, but, rather, is a helpful
 * utility for Terms Contracts to use in encoding, decoding, and
 * resolving the addresses of currently deployed tokens.
 *
 * At this point in time, administration of the Token Registry is
 * under Dharma Labs' control.  With more sophisticated decentralized
 * governance mechanisms, we intend to shift ownership of this utility
 * contract to the Dharma community.
 */
contract TokenRegistry is Ownable {
    mapping (bytes32 => TokenAttributes) public symbolHashToTokenAttributes;
    string[256] public tokenSymbolList;
    uint8 public tokenSymbolListLength;
    struct TokenAttributes {
        // The ERC20 contract address.
        address tokenAddress;
        // The index in `tokenSymbolList` where the token's symbol can be found.
        uint tokenIndex;
        // The name of the given token, e.g. "Canonical Wrapped Ether"
        string name;
        // The number of digits that come after the decimal place when displaying token value.
        uint8 numDecimals;
    }
    /**
     * Maps the given symbol to the given token attributes.
     */
    function setTokenAttributes(
        string _symbol,
        address _tokenAddress,
        string _tokenName,
        uint8 _numDecimals
    )
        public onlyOwner
    {
        bytes32 symbolHash = keccak256(_symbol);
        // Attempt to retrieve the token's attributes from the registry.
        TokenAttributes memory attributes = symbolHashToTokenAttributes[symbolHash];
        if (attributes.tokenAddress == address(0)) {
            // The token has not yet been added to the registry.
            attributes.tokenAddress = _tokenAddress;
            attributes.numDecimals = _numDecimals;
            attributes.name = _tokenName;
            attributes.tokenIndex = tokenSymbolListLength;
            tokenSymbolList[tokenSymbolListLength] = _symbol;
            tokenSymbolListLength++;
        } else {
            // The token has already been added to the registry; update attributes.
            attributes.tokenAddress = _tokenAddress;
            attributes.numDecimals = _numDecimals;
            attributes.name = _tokenName;
        }
        // Update this contract's storage.
        symbolHashToTokenAttributes[symbolHash] = attributes;
    }
    /**
     * Given a symbol, resolves the current address of the token the symbol is mapped to.
     */
    function getTokenAddressBySymbol(string _symbol) public view returns (address) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.tokenAddress;
    }
    /**
     * Given the known index of a token within the registry's symbol list,
     * returns the address of the token mapped to the symbol at that index.
     *
     * This is a useful utility for compactly encoding the address of a token into a
     * TermsContractParameters string -- by encoding a token by its index in a
     * a 256 slot array, we can represent a token by a 1 byte uint instead of a 20 byte address.
     */
    function getTokenAddressByIndex(uint _index) public view returns (address) {
        string storage symbol = tokenSymbolList[_index];
        return getTokenAddressBySymbol(symbol);
    }
    /**
     * Given a symbol, resolves the index of the token the symbol is mapped to within the registry's
     * symbol list.
     */
    function getTokenIndexBySymbol(string _symbol) public view returns (uint) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.tokenIndex;
    }
    /**
     * Given an index, resolves the symbol of the token at that index in the registry's
     * token symbol list.
     */
    function getTokenSymbolByIndex(uint _index) public view returns (string) {
        return tokenSymbolList[_index];
    }
    /**
     * Given a symbol, returns the name of the token the symbol is mapped to within the registry's
     * symbol list.
     */
    function getTokenNameBySymbol(string _symbol) public view returns (string) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.name;
    }
    /**
     * Given the symbol for a token, returns the number of decimals as provided in
     * the associated TokensAttribute struct.
     *
     * Example:
     *   getNumDecimalsFromSymbol("REP");
     *   => 18
     */
    function getNumDecimalsFromSymbol(string _symbol) public view returns (uint8) {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return attributes.numDecimals;
    }
    /**
     * Given the index for a token in the registry, returns the number of decimals as provided in
     * the associated TokensAttribute struct.
     *
     * Example:
     *   getNumDecimalsByIndex(1);
     *   => 18
     */
    function getNumDecimalsByIndex(uint _index) public view returns (uint8) {
        string memory symbol = getTokenSymbolByIndex(_index);
        return getNumDecimalsFromSymbol(symbol);
    }
    /**
     * Given the index for a token in the registry, returns the name of the token as provided in
     * the associated TokensAttribute struct.
     *
     * Example:
     *   getTokenNameByIndex(1);
     *   => "Canonical Wrapped Ether"
     */
    function getTokenNameByIndex(uint _index) public view returns (string) {
        string memory symbol = getTokenSymbolByIndex(_index);
        string memory tokenName = getTokenNameBySymbol(symbol);
        return tokenName;
    }
    /**
     * Given the symbol for a token in the registry, returns a tuple containing the token's address,
     * the token's index in the registry, the token's name, and the number of decimals.
     *
     * Example:
     *   getTokenAttributesBySymbol("WETH");
     *   => ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", 1, "Canonical Wrapped Ether", 18]
     */
    function getTokenAttributesBySymbol(string _symbol)
        public
        view
        returns (
            address,
            uint,
            string,
            uint
        )
    {
        bytes32 symbolHash = keccak256(_symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return (
            attributes.tokenAddress,
            attributes.tokenIndex,
            attributes.name,
            attributes.numDecimals
        );
    }
    /**
     * Given the index for a token in the registry, returns a tuple containing the token's address,
     * the token's symbol, the token's name, and the number of decimals.
     *
     * Example:
     *   getTokenAttributesByIndex(1);
     *   => ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "WETH", "Canonical Wrapped Ether", 18]
     */
    function getTokenAttributesByIndex(uint _index)
        public
        view
        returns (
            address,
            string,
            string,
            uint8
        )
    {
        string memory symbol = getTokenSymbolByIndex(_index);
        bytes32 symbolHash = keccak256(symbol);
        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];
        return (
            attributes.tokenAddress,
            symbol,
            attributes.name,
            attributes.numDecimals
        );
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenAttributesByIndex","outputs":[{"name":"","type":"address"},{"name":"","type":"string"},{"name":"","type":"string"},{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenIndexBySymbol","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenAddressBySymbol","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"symbolHashToTokenAttributes","outputs":[{"name":"tokenAddress","type":"address"},{"name":"tokenIndex","type":"uint256"},{"name":"name","type":"string"},{"name":"numDecimals","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_symbol","type":"string"},{"name":"_tokenAddress","type":"address"},{"name":"_tokenName","type":"string"},{"name":"_numDecimals","type":"uint8"}],"name":"setTokenAttributes","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenAddressByIndex","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenSymbolByIndex","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenAttributesBySymbol","outputs":[{"name":"","type":"address"},{"name":"","type":"uint256"},{"name":"","type":"string"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getNumDecimalsFromSymbol","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getNumDecimalsByIndex","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"tokenSymbolList","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getTokenNameBySymbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenSymbolListLength","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getTokenNameByIndex","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:
6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b4a806100536000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e71f8d1146100eb5780632e1e1bb3146102335780633550b6d9146102a45780633dbe284a1461034157806351d658d2146104455780635715c5b7146105105780636e7cbb0d146105735780638052348b1461060f57806380ec85871461072657806382f694301461079d5780638da5cb5b146107da57806395f121bf1461082f578063bd7b564d146108cb578063c51ccb40146109a1578063f2fde38b146109d0578063fa7f369714610a09575b600080fd5b34156100f657600080fd5b61010c6004808035906020019091905050610aa5565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018460ff1660ff168152602001838103835286818151815260200191508051906020019080838360005b8381101561018e578082015181840152602081019050610173565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156101f45780820151818401526020810190506101d9565b50505050905090810190601f1680156102215780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b341561023e57600080fd5b61028e600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c3b565b6040518082815260200191505060405180910390f35b34156102af57600080fd5b6102ff600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610cd0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034c57600080fd5b610366600480803560001916906020019091905050610d85565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018360ff1660ff1681526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156104335780601f1061040857610100808354040283529160200191610433565b820191906000526020600020905b81548152906001019060200180831161041657829003601f168201915b50509550505050505060405180910390f35b341561045057600080fd5b61050e600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560ff16906020019091905050610de1565b005b341561051b57600080fd5b6105316004808035906020019091905050611217565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561057e57600080fd5b61059460048080359060200190919050506112d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d45780820151818401526020810190506105b9565b50505050905090810190601f1680156106015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561061a57600080fd5b61066a600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611390565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156106e85780820151818401526020810190506106cd565b50505050905090810190601f1680156107155780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561073157600080fd5b610781600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611515565b604051808260ff1660ff16815260200191505060405180910390f35b34156107a857600080fd5b6107be60048080359060200190919050506115b7565b604051808260ff1660ff16815260200191505060405180910390f35b34156107e557600080fd5b6107ed6115dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561083a57600080fd5b6108506004808035906020019091905050611602565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610890578082015181840152602081019050610875565b50505050905090810190601f1680156108bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108d657600080fd5b610926600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506116b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096657808201518184015260208101905061094b565b50505050905090810190601f1680156109935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156109ac57600080fd5b6109b46117e8565b604051808260ff1660ff16815260200191505060405180910390f35b34156109db57600080fd5b610a07600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117fc565b005b3415610a1457600080fd5b610a2a6004808035906020019091905050611951565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a6a578082015181840152602081019050610a4f565b50505050905090810190601f168015610a975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000610aaf611989565b610ab7611989565b6000610ac1611989565b600080610acd886112d7565b9250826040518082805190602001908083835b602083101515610b055780518252602082019150602081019050602083039250610ae0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683826002018360030160009054906101000a900460ff16818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c225780601f10610bf757610100808354040283529160200191610c22565b820191906000526020600020905b815481529060010190602001808311610c0557829003601f168201915b5050505050915096509650965096505050509193509193565b6000806000836040518082805190602001908083835b602083101515610c765780518252602082019150602081019050602083039250610c51565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506001600083600019166000191681526020019081526020016000209050806001015492505050919050565b6000806000836040518082805190602001908083835b602083101515610d0b5780518252602082019150602081019050602083039250610ce6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050919050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201908060030160009054906101000a900460ff16905084565b6000610deb61199d565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4657600080fd5b856040518082805190602001908083835b602083101515610e7c5780518252602082019150602081019050602083039250610e57565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150600160008360001916600019168152602001908152602001600020608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fcb5780601f10610fa057610100808354040283529160200191610fcb565b820191906000526020600020905b815481529060010190602001808311610fae57829003601f168201915b505050505081526020016003820160009054906101000a900460ff1660ff1660ff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16141561110d5784816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816060019060ff16908160ff168152505083816040018190525061010260009054906101000a900460ff1660ff1681602001818152505085600261010260009054906101000a900460ff1660ff16610100811015156110c057fe5b0190805190602001906110d49291906119e5565b50610102600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff16021790555050611161565b84816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816060019060ff16908160ff16815250508381604001819052505b8060016000846000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906111ea929190611a65565b5060608201518160030160006101000a81548160ff021916908360ff160217905550905050505050505050565b6000806002836101008110151561122a57fe5b0190506112cf818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112c55780601f1061129a576101008083540402835291602001916112c5565b820191906000526020600020905b8154815290600101906020018083116112a857829003601f168201915b5050505050610cd0565b915050919050565b6112df611989565b600282610100811015156112ef57fe5b018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113845780601f1061135957610100808354040283529160200191611384565b820191906000526020600020905b81548152906001019060200180831161136757829003601f168201915b50505050509050919050565b60008061139b611989565b6000806000866040518082805190602001908083835b6020831015156113d657805182526020820191506020810190506020830392506113b1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010154826002018360030160009054906101000a900460ff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114f75780601f106114cc576101008083540402835291602001916114f7565b820191906000526020600020905b8154815290600101906020018083116114da57829003601f168201915b505050505091508060ff169050955095509550955050509193509193565b6000806000836040518082805190602001908083835b602083101515611550578051825260208201915060208101905060208303925061152b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060016000836000191660001916815260200190815260200160002090508060030160009054906101000a900460ff1692505050919050565b60006115c1611989565b6115ca836112d7565b90506115d581611515565b915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002816101008110151561161257fe5b016000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116ad5780601f10611682576101008083540402835291602001916116ad565b820191906000526020600020905b81548152906001019060200180831161169057829003601f168201915b505050505081565b6116bd611989565b600080836040518082805190602001908083835b6020831015156116f657805182526020820191506020810190506020830392506116d1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506001600083600019166000191681526020019081526020016000209050806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117da5780601f106117af576101008083540402835291602001916117da565b820191906000526020600020905b8154815290600101906020018083116117bd57829003601f168201915b505050505092505050919050565b61010260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561185757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561189357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611959611989565b611961611989565b611969611989565b611972846112d7565b915061197d826116b5565b90508092505050919050565b602060405190810160405280600081525090565b608060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016119d5611ae5565b8152602001600060ff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a2657805160ff1916838001178555611a54565b82800160010185558215611a54579182015b82811115611a53578251825591602001919060010190611a38565b5b509050611a619190611af9565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611aa657805160ff1916838001178555611ad4565b82800160010185558215611ad4579182015b82811115611ad3578251825591602001919060010190611ab8565b5b509050611ae19190611af9565b5090565b602060405190810160405280600081525090565b611b1b91905b80821115611b17576000816000905550600101611aff565b5090565b905600a165627a7a723058209b941d0de0d510f499d51005e8694ec912b4d67e9024bb0e60459a4c44c3c3510029
Contract_Creation_Code_ARM:



Contract Adress: 0x3715669c0624371d25cdec2c3e22ddc0d3328fd4
Contract Name: PantheonChina
Contract_Source_Code: 
pragma solidity 0.4.25;
/*
* Pantheon China 第一份智能合約提供穩定的收入。 
* 智能合約可確保您的資金免遭盜竊和黑客攻擊
* 不要投入超過你可以輸的
*/
contract PantheonChina {
    struct UserRecord {
        address referrer;
        uint tokens;
        uint gained_funds;
        uint ref_funds;
        // 這個領域可能是負面的
        int funds_correction;
    }
    using SafeMath for uint;
    using SafeMathInt for int;
    using Fee for Fee.fee;
    using ToAddress for bytes;
    // ERC20
    string constant public name = "Pantheon China";
    string constant public symbol = "PAC";
    uint8 constant public decimals = 18;
    // Fees
    Fee.fee private fee_purchase = Fee.fee(1, 10); // 10%
    Fee.fee private fee_selling  = Fee.fee(1, 20); // 5%
    Fee.fee private fee_transfer = Fee.fee(1, 100); // 1%
    Fee.fee private fee_referral = Fee.fee(33, 100); // 33%
    // 最少量的令牌將成為推薦計劃的參與者
    uint constant private minimal_stake = 10e18;
    // 轉換eth < - >令牌的因素，具有所需的計算精度
    uint constant private precision_factor = 1e18;
    // 定價政策
    //  - 如果用戶購買1個令牌，價格將增加“price_offset”值
    //  - 如果用戶賣出1個令牌，價格將降低“price_offset”值
    // 有關詳細信息，請參閱方法“fundsToTokens”和“tokensToFunds”
    uint private price = 1e29; // 100 Gwei * precision_factor
    uint constant private price_offset = 1e28; // 10 Gwei * precision_factor
    // 令牌總數
    uint private total_supply = 0;
    // 令牌持有者之間共享的總利潤。由於此參數，它並不能準確反映資金總額
    // 可以修改以在總供應量發生變化時保持真實用戶的股息
    // 有關詳細信息，請參閱方法“dividendsOf”並在代碼中使用“funds_correction”
    uint private shared_profit = 0;
    // 用戶數據的映射
    mapping(address => UserRecord) private user_data;
    // ==== 修改 ==== //
    modifier onlyValidTokenAmount(uint tokens) {
        require(tokens > 0, "Amount of tokens must be greater than zero");
        require(tokens <= user_data[msg.sender].tokens, "You have not enough tokens");
        _;
    }
    // ==== 上市 API ==== //
    // ---- 寫作方法 ---- //
    function () public payable {
        buy(msg.data.toAddr());
    }
    /*
    *  從收到的資金購買代幣
    */
    function buy(address referrer) public payable {
        // 報名費
        (uint fee_funds, uint taxed_funds) = fee_purchase.split(msg.value);
        require(fee_funds != 0, "Incoming funds is too small");
        // 更新用戶的推薦人
        //  - 你不能成為自己的推薦人
        //  - 用戶和他的推薦人將在一起生活
        UserRecord storage user = user_data[msg.sender];
        if (referrer != 0x0 && referrer != msg.sender && user.referrer == 0x0) {
            user.referrer = referrer;
        }
        // 申請推薦獎金
        if (user.referrer != 0x0) {
            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, msg.value);
            require(fee_funds != 0, "收入資金太小");
        }
        // 計算代幣金額和變更價格
        (uint tokens, uint _price) = fundsToTokens(taxed_funds);
        require(tokens != 0, "收入資金太小");
        price = _price;
        // 薄荷代幣，增加共享利潤
        mintTokens(msg.sender, tokens);
        shared_profit = shared_profit.add(fee_funds);
        emit Purchase(msg.sender, msg.value, tokens, price / precision_factor, now);
    }
    /*
    *  出售給定數量的代幣並獲得資金
    */
    function sell(uint tokens) public onlyValidTokenAmount(tokens) {
        // 計算資金數額和變更價格
        (uint funds, uint _price) = tokensToFunds(tokens);
        require(funds != 0, "沒有足夠的令牌來做這件事");
        price = _price;
        // 申請費
        (uint fee_funds, uint taxed_funds) = fee_selling.split(funds);
        require(fee_funds != 0, "沒有足夠的令牌來做這件事");
        // 刻錄令牌並為用戶的股息增加資金
        burnTokens(msg.sender, tokens);
        UserRecord storage user = user_data[msg.sender];
        user.gained_funds = user.gained_funds.add(taxed_funds);
        // 增加共享利潤
        shared_profit = shared_profit.add(fee_funds);
        emit Selling(msg.sender, tokens, funds, price / precision_factor, now);
    }
    /*
    *  將給定數量的令牌從發件人轉移到另一個用戶
    * ERC20
    */
    function transfer(address to_addr, uint tokens) public onlyValidTokenAmount(tokens) returns (bool success) {
        require(to_addr != msg.sender, "You cannot transfer tokens to yourself");
        // 申請費
        (uint fee_tokens, uint taxed_tokens) = fee_transfer.split(tokens);
        require(fee_tokens != 0, "Insufficient tokens to do that");
        // 計算資金數額和變更價格
        (uint funds, uint _price) = tokensToFunds(fee_tokens);
        require(funds != 0, "Insufficient tokens to do that");
        price = _price;
        // 燃燒和薄荷代幣，不含費用
        burnTokens(msg.sender, tokens);
        mintTokens(to_addr, taxed_tokens);
        // 增加共享利潤
        shared_profit = shared_profit.add(funds);
        emit Transfer(msg.sender, to_addr, tokens);
        return true;
    }
    /*
    *  再投資所有股息
    */
    function reinvest() public {
        // 獲得所有股息
        uint funds = dividendsOf(msg.sender);
        require(funds > 0, "You have no dividends");
        // 做出更正，之後的事件將為0
        UserRecord storage user = user_data[msg.sender];
        user.funds_correction = user.funds_correction.add(int(funds));
        // 申請費
        (uint fee_funds, uint taxed_funds) = fee_purchase.split(funds);
        require(fee_funds != 0, "Insufficient dividends to do that");
        // 申請推薦獎金
        if (user.referrer != 0x0) {
            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, funds);
            require(fee_funds != 0, "Insufficient dividends to do that");
        }
        // 計算代幣金額和變更價格
        (uint tokens, uint _price) = fundsToTokens(taxed_funds);
        require(tokens != 0, "Insufficient dividends to do that");
        price = _price;
        // 薄荷代幣，增加共享利潤
        mintTokens(msg.sender, tokens);
        shared_profit = shared_profit.add(fee_funds);
        emit Reinvestment(msg.sender, funds, tokens, price / precision_factor, now);
    }
    /*
    *  撤回所有股息
    */
    function withdraw() public {
        // 獲得所有股息
        uint funds = dividendsOf(msg.sender);
        require(funds > 0, "You have no dividends");
        // 做出更正，之後的事件將為0
        UserRecord storage user = user_data[msg.sender];
        user.funds_correction = user.funds_correction.add(int(funds));
        // 發送資金
        msg.sender.transfer(funds);
        emit Withdrawal(msg.sender, funds, now);
    }
    /*
    *  出售所有代幣和分紅
    */
    function exit() public {
        // 賣掉所有代幣
        uint tokens = user_data[msg.sender].tokens;
        if (tokens > 0) {
            sell(tokens);
        }
        withdraw();
    }
    /*
    * 警告！此方法在令牌持有者之間分配所有傳入資金，並且不提供任何內容
    * 它將在未來由我們的生態系統中的其他合同/地址使用
    * 但如果你想捐款，歡迎你
    */
    function donate() public payable {
        shared_profit = shared_profit.add(msg.value);
        emit Donation(msg.sender, msg.value, now);
    }
    function totalSupply() public view returns (uint) {
        return total_supply;
    }
    function balanceOf(address addr) public view returns (uint) {
        return user_data[addr].tokens;
    }
    function dividendsOf(address addr) public view returns (uint) {
        UserRecord memory user = user_data[addr];
        int d = int(user.gained_funds.add(user.ref_funds));
        require(d >= 0);
        if (total_supply > 0) {
            d = d.add(int(shared_profit.mul(user.tokens) / total_supply));
        }
        if (user.funds_correction > 0) {
            d = d.sub(user.funds_correction);
        }
        else if (user.funds_correction < 0) {
            d = d.add(-user.funds_correction);
        }
        require(d >= 0);
        return uint(d);
    }
    function expectedTokens(uint funds, bool apply_fee) public view returns (uint) {
        if (funds == 0) {
            return 0;
        }
        if (apply_fee) {
            (,uint _funds) = fee_purchase.split(funds);
            funds = _funds;
        }
        (uint tokens,) = fundsToTokens(funds);
        return tokens;
    }
    function expectedFunds(uint tokens, bool apply_fee) public view returns (uint) {
        // 總共有空令牌或沒有銷售代幣
        if (tokens == 0 || total_supply == 0) {
            return 0;
        }
        // 比總共開採更多的令牌，只是從計算中排除不必要的令牌
        else if (tokens > total_supply) {
            tokens = total_supply;
        }
        (uint funds,) = tokensToFunds(tokens);
        if (apply_fee) {
            (,uint _funds) = fee_selling.split(funds);
            funds = _funds;
        }
        return funds;
    }
    /*
    *  下一個令牌的購買價格
    */
    function buyPrice() public view returns (uint) {
        return price / precision_factor;
    }
    /*
    *  售價下一個令牌
    */
    function sellPrice() public view returns (uint) {
        return price.sub(price_offset) / precision_factor;
    }
    // ==== 私人的 API ==== //
    function mintTokens(address addr, uint tokens) internal {
        UserRecord storage user = user_data[addr];
        bool not_first_minting = total_supply > 0;
        if (not_first_minting) {
            shared_profit = shared_profit.mul(total_supply.add(tokens)) / total_supply;
        }
        total_supply = total_supply.add(tokens);
        user.tokens = user.tokens.add(tokens);
        if (not_first_minting) {
            user.funds_correction = user.funds_correction.add(int(tokens.mul(shared_profit) / total_supply));
        }
    }
    function burnTokens(address addr, uint tokens) internal {
        UserRecord storage user = user_data[addr];
        uint dividends_from_tokens = 0;
        if (total_supply == tokens) {
            dividends_from_tokens = shared_profit.mul(user.tokens) / total_supply;
        }
        shared_profit = shared_profit.mul(total_supply.sub(tokens)) / total_supply;
        total_supply = total_supply.sub(tokens);
        user.tokens = user.tokens.sub(tokens);
        if (total_supply > 0) {
            user.funds_correction = user.funds_correction.sub(int(tokens.mul(shared_profit) / total_supply));
        }
        else if (dividends_from_tokens != 0) {
            user.funds_correction = user.funds_correction.sub(int(dividends_from_tokens));
        }
    }
    function rewardReferrer(address addr, address referrer_addr, uint funds, uint full_funds) internal returns (uint funds_after_reward) {
        UserRecord storage referrer = user_data[referrer_addr];
        if (referrer.tokens >= minimal_stake) {
            (uint reward_funds, uint taxed_funds) = fee_referral.split(funds);
            referrer.ref_funds = referrer.ref_funds.add(reward_funds);
            emit ReferralReward(addr, referrer_addr, full_funds, reward_funds, now);
            return taxed_funds;
        }
        else {
            return funds;
        }
    }
    function fundsToTokens(uint funds) internal view returns (uint tokens, uint _price) {
        uint b = price.mul(2).sub(price_offset);
        uint D = b.mul(b).add(price_offset.mul(8).mul(funds).mul(precision_factor));
        uint n = D.sqrt().sub(b).mul(precision_factor) / price_offset.mul(2);
        uint anp1 = price.add(price_offset.mul(n) / precision_factor);
        return (n, anp1);
    }
    function tokensToFunds(uint tokens) internal view returns (uint funds, uint _price) {
        uint sell_price = price.sub(price_offset);
        uint an = sell_price.add(price_offset).sub(price_offset.mul(tokens) / precision_factor);
        uint sn = sell_price.add(an).mul(tokens) / precision_factor.mul(2);
        return (sn / precision_factor, an);
    }
    // ==== 活動 ==== //
    event Purchase(address indexed addr, uint funds, uint tokens, uint price, uint time);
    event Selling(address indexed addr, uint tokens, uint funds, uint price, uint time);
    event Reinvestment(address indexed addr, uint funds, uint tokens, uint price, uint time);
    event Withdrawal(address indexed addr, uint funds, uint time);
    event Donation(address indexed addr, uint funds, uint time);
    event ReferralReward(address indexed referral_addr, address indexed referrer_addr, uint funds, uint reward_funds, uint time);
    //ERC20
    event Transfer(address indexed from_addr, address indexed to_addr, uint tokens);
}
library SafeMath {
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }
        uint c = a * b;
        require(c / a == b, "mul failed");
        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        require(b <= a, "sub failed");
        return a - b;
    }
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "add failed");
        return c;
    }
    function sqrt(uint x) internal pure returns (uint y) {
        uint z = add(x, 1) / 2;
        y = x;
        while (z < y) {
            y = z;
            z = add(x / z, z) / 2;
        }
    }
}
library SafeMathInt {
    function sub(int a, int b) internal pure returns (int) {
        int c = a - b;
        require(c <= a, "sub failed");
        return c;
    }
    function add(int a, int b) internal pure returns (int) {
        int c = a + b;
        require(c >= a, "add failed");
        return c;
    }
}
library Fee {
    using SafeMath for uint;
    struct fee {
        uint num;
        uint den;
    }
    function split(fee memory f, uint value) internal pure returns (uint tax, uint taxed_value) {
        if (value == 0) {
            return (0, 0);
        }
        tax = value.mul(f.num) / f.den;
        taxed_value = value.sub(tax);
    }
    function get_tax(fee memory f, uint value) internal pure returns (uint tax) {
        if (value == 0) {
            return 0;
        }
        tax = value.mul(f.num) / f.den;
    }
}
library ToAddress {
    function toAddr(bytes source) internal pure returns (address addr) {
        assembly {
            addr := mload(add(source, 0x14))
        }
        return addr;
    }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"dividendsOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to_addr","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokens","type":"uint256"},{"name":"apply_fee","type":"bool"}],"name":"expectedFunds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"funds","type":"uint256"},{"name":"apply_fee","type":"bool"}],"name":"expectedTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"uint256"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"donate","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"referrer","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[],"name":"reinvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"tokens","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Purchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Selling","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"tokens","type":"uint256"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Reinvestment","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Withdrawal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"Donation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"referral_addr","type":"address"},{"indexed":true,"name":"referrer_addr","type":"address"},{"indexed":false,"name":"funds","type":"uint256"},{"indexed":false,"name":"reward_funds","type":"uint256"},{"indexed":false,"name":"time","type":"uint256"}],"name":"ReferralReward","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from_addr","type":"address"},{"indexed":true,"name":"to_addr","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"}]
Contract_Creation_Code_16:
60016080819052600a60a0819052600082815581835560c0839052601460e081905260028490556003556101008390526064610120819052600493909355600583905561018060405260216101408190526101608490526006556007929092556c01431e0fae6d7217caa000000060085560098290555534801561008257600080fd5b50611a79806100926000396000f3006080604052600436106100ef5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461013357806306fdde031461016657806318160ddd146101f0578063313ce567146102055780633ccfd60b146102305780634b7503341461024557806370a082311461025a5780638620410b1461027b57806395d89b4114610290578063a9059cbb146102a5578063be2eaad4146102dd578063c5f60620146102fa578063e4849b3214610317578063e9fad8ee1461032f578063ed88c68e14610344578063f088d5471461034c578063fdb5a03e14610360575b61013161012c6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610375945050505050565b61037c565b005b34801561013f57600080fd5b50610154600160a060020a03600435166105e8565b60408051918252519081900360200190f35b34801561017257600080fd5b5061017b610718565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b557818101518382015260200161019d565b50505050905090810190601f1680156101e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fc57600080fd5b5061015461074f565b34801561021157600080fd5b5061021a610755565b6040805160ff9092168252519081900360200190f35b34801561023c57600080fd5b5061013161075a565b34801561025157600080fd5b50610154610855565b34801561026657600080fd5b50610154600160a060020a0360043516610890565b34801561028757600080fd5b506101546108ae565b34801561029c57600080fd5b5061017b6108c3565b3480156102b157600080fd5b506102c9600160a060020a03600435166024356108fa565b604080519115158252519081900360200190f35b3480156102e957600080fd5b506101546004356024351515610bd4565b34801561030657600080fd5b506101546004356024351515610c4f565b34801561032357600080fd5b50610131600435610caa565b34801561033b57600080fd5b50610131610f79565b610131610fa8565b610131600160a060020a036004351661037c565b34801561036c57600080fd5b50610131610ff9565b6014015190565b6040805180820190915260008054825260015460208301529081908190819081906103ad903463ffffffff6112cb16565b9095509350841515610409576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b336000908152600b602052604090209250600160a060020a0386161580159061043b5750600160a060020a0386163314155b801561044f57508254600160a060020a0316155b1561047b57825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161783555b8254600160a060020a0316156104fc5782546104a3903390600160a060020a0316873461131e565b94508415156104fc576040805160e560020a62461bcd02815260206004820152601260248201527fe694b6e585a5e8b387e98791e5a4aae5b08f0000000000000000000000000000604482015290519081900360640190fd5b610505846113f9565b9092509050811515610561576040805160e560020a62461bcd02815260206004820152601260248201527fe694b6e585a5e8b387e98791e5a4aae5b08f0000000000000000000000000000604482015290519081900360640190fd5b60088190556105703383611520565b600a54610583908663ffffffff6115f016565b600a5560085433907fd721454499cf9c37b757e03b9d675df451c229048129d6e2d552216a035e6a559034908590670de0b6b3a7640000905b6040805194855260208501939093520482820152426060830152519081900360800190a2505050505050565b60006105f2611a14565b50600160a060020a038083166000908152600b60209081526040808320815160a081018352815490951685526001810154928501929092526002820154908401819052600382015460608501819052600490920154608085015261065b9163ffffffff6115f016565b9050600081121561066b57600080fd5b600060095411156106b0576106ad6009546106958460200151600a5461165890919063ffffffff16565b81151561069e57fe5b8391900463ffffffff6116d116565b90505b6000826080015113156106da5760808201516106d390829063ffffffff61172e16565b9050610703565b60008260800151121561070357608082015161070090829060000363ffffffff6116d116565b90505b600081121561071157600080fd5b9392505050565b60408051808201909152600e81527f50616e7468656f6e204368696e61000000000000000000000000000000000000602082015281565b60095490565b601281565b600080610766336105e8565b9150600082116107c0576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b50336000908152600b6020526040902060048101546107e5908363ffffffff6116d116565b6004820155604051339083156108fc029084906000818181858888f19350505050158015610817573d6000803e3d6000fd5b5060408051838152426020820152815133927fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb928290030190a25050565b6000670de0b6b3a76400006108816b204fce5e3e2502611000000060085461178b90919063ffffffff16565b81151561088a57fe5b04905090565b600160a060020a03166000908152600b602052604090206001015490565b600854600090670de0b6b3a76400009061088a565b60408051808201909152600381527f5041430000000000000000000000000000000000000000000000000000000000602082015281565b6000808080808581811161097e576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600b60205260409020600101548111156109e8576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b600160a060020a038816331415610a6f576040805160e560020a62461bcd02815260206004820152602660248201527f596f752063616e6e6f74207472616e7366657220746f6b656e7320746f20796f60448201527f757273656c660000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040805180820190915260045481526005546020820152610a96908863ffffffff6112cb16565b9095509350841515610af2576040805160e560020a62461bcd02815260206004820152601e60248201527f496e73756666696369656e7420746f6b656e7320746f20646f20746861740000604482015290519081900360640190fd5b610afb856117eb565b9093509150821515610b57576040805160e560020a62461bcd02815260206004820152601e60248201527f496e73756666696369656e7420746f6b656e7320746f20646f20746861740000604482015290519081900360640190fd5b6008829055610b6633886118b5565b610b708885611520565b600a54610b83908463ffffffff6115f016565b600a55604080518881529051600160a060020a038a169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001979650505050505050565b60008080841580610be55750600954155b15610bf35760009250610c47565b600954851115610c035760095494505b610c0c856117eb565b5091508315610c43576040805180820190915260025481526003546020820152610c3c908363ffffffff6112cb16565b9150508091505b8192505b505092915050565b60008080841515610c635760009250610c47565b8315610c97576040805180820190915260005481526001546020820152610c90908663ffffffff6112cb16565b9250508194505b610ca0856113f9565b5095945050505050565b60008080808085818111610d2e576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600b6020526040902060010154811115610d98576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b610da1876117eb565b9096509450851515610e22576040805160e560020a62461bcd028152602060048201526024808201527fe6b292e69c89e8b6b3e5a4a0e79a84e4bba4e7898ce4be86e5819ae98099e4bb60448201527fb6e4ba8b00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60088590556040805180820190915260025481526003546020820152610e4e908763ffffffff6112cb16565b9094509250831515610ecf576040805160e560020a62461bcd028152602060048201526024808201527fe6b292e69c89e8b6b3e5a4a0e79a84e4bba4e7898ce4be86e5819ae98099e4bb60448201527fb6e4ba8b00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610ed933886118b5565b336000908152600b602052604090206002810154909250610f00908463ffffffff6115f016565b6002830155600a54610f18908563ffffffff6115f016565b600a556008546040805189815260208101899052670de0b6b3a7640000909204828201524260608301525133917fafd310387603da0dcf44f11f54b04254b548c58b194e75f85851e849f0eef307919081900360800190a250505050505050565b336000908152600b602052604081206001015490811115610f9d57610f9d81610caa565b610fa561075a565b50565b600a54610fbb903463ffffffff6115f016565b600a5560408051348152426020820152815133927f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec928290030190a2565b60008060008060008061100b336105e8565b955060008611611065576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b336000908152600b60205260409020600481015490955061108c908763ffffffff6116d116565b600486015560408051808201909152600054815260015460208201526110b8908763ffffffff6112cb16565b909450925083151561113a576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8454600160a060020a0316156111e1578454611162903390600160a060020a0316868961131e565b93508315156111e1576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6111ea836113f9565b909250905081151561126c576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600881905561127b3383611520565b600a5461128e908563ffffffff6115f016565b600a5560085433907f1abe689c7914cafd54f789eb0851e90cba235302161e81e259ee4c357c374d829088908590670de0b6b3a7640000906105bc565b6000808215156112e057506000905080611317565b602084015184516112f890859063ffffffff61165816565b81151561130157fe5b049150611314838363ffffffff61178b16565b90505b9250929050565b600160a060020a0383166000908152600b60205260408120600181015482908190678ac7230489e80000116113ea576040805180820190915260065481526007546020820152611374908763ffffffff6112cb16565b6003850154919350915061138e908363ffffffff6115f016565b6003840155604080518681526020810184905242818301529051600160a060020a03808a1692908b16917f870e4e1dcfab6c09707448d3659b3d8097c084bf06e7467d6029940cd7122ee09181900360600190a38093506113ee565b8593505b505050949350505050565b6000806000806000806114346b204fce5e3e25026110000000611428600260085461165890919063ffffffff16565b9063ffffffff61178b16565b935061148c611470670de0b6b3a76400006114648a816b204fce5e3e25026110000000600863ffffffff61165816565b9063ffffffff61165816565b611480868063ffffffff61165816565b9063ffffffff6115f016565b92506114ab6b204fce5e3e25026110000000600263ffffffff61165816565b6114c4670de0b6b3a764000061146487611428886119bb565b8115156114cd57fe5b049150611512670de0b6b3a76400006114f86b204fce5e3e250261100000008563ffffffff61165816565b81151561150157fe5b60085491900463ffffffff6115f016565b919791965090945050505050565b600160a060020a0382166000908152600b6020526040812060095490911080156115775760095461156961155a828663ffffffff6115f016565b600a549063ffffffff61165816565b81151561157257fe5b04600a555b60095461158a908463ffffffff6115f016565b60095560018201546115a2908463ffffffff6115f016565b600183015580156115ea576115e46009546115c8600a548661165890919063ffffffff16565b8115156115d157fe5b600485015491900463ffffffff6116d116565b60048301555b50505050565b60008282018381101561164d576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b8091505b5092915050565b60008083151561166b5760009150611651565b5082820282848281151561167b57fe5b041461164d576040805160e560020a62461bcd02815260206004820152600a60248201527f6d756c206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008282018381121561164d576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008183038381131561164d576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000828211156117e5576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b50900390565b60008060008060006118146b204fce5e3e2502611000000060085461178b90919063ffffffff16565b9250611864670de0b6b3a764000061183e6b204fce5e3e250261100000008963ffffffff61165816565b81151561184757fe5b04611428856b204fce5e3e2502611000000063ffffffff6115f016565b915061187f670de0b6b3a7640000600263ffffffff61165816565b61189387611464868663ffffffff6115f016565b81151561189c57fe5b670de0b6b3a76400009190040496919550909350505050565b600160a060020a0382166000908152600b60205260408120600954909190831415611901576009546001830154600a546118f49163ffffffff61165816565b8115156118fd57fe5b0490505b60095461191761155a828663ffffffff61178b16565b81151561192057fe5b04600a55600954611937908463ffffffff61178b16565b600955600182015461194f908463ffffffff61178b16565b6001830155600954600010156119a05761199660095461197a600a548661165890919063ffffffff16565b81151561198357fe5b600485015491900463ffffffff61172e16565b60048301556115ea565b80156115ea5760048201546115e4908263ffffffff61172e16565b60008060026119cb8460016115f0565b8115156119d457fe5b0490508291505b81811015611a0e5780915060026119fd82858115156119f657fe5b04836115f0565b811515611a0657fe5b0490506119db565b50919050565b60a0604051908101604052806000600160a060020a031681526020016000815260200160008152602001600081526020016000815250905600a165627a7a723058208bfca6b637ee894d59a4a2e161ca0a02f9d50a42d56365ef0c2e0f0c2ca787590029
Contract_Creation_Code_ARM:



Contract Adress: 0x91010307773dbf725a34c4dab6834b9efe452600
Contract Name: BthhjToken
Contract_Source_Code: 
pragma solidity ^0.4.16;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
contract TokenERC20 {
    // Public variables of the token
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    // 18 decimals is the strongly suggested default, avoid changing it
    uint256 public totalSupply;
    // This creates an array with all balances
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    // This generates a public event on the blockchain that will notify clients
    event Transfer(address indexed from, address indexed to, uint256 value);
    // This notifies clients about the amount burnt
    event Burn(address indexed from, uint256 value);
    /**
     * Constrctor function
     *
     * Initializes contract with initial supply tokens to the creator of the contract
     */
    function TokenERC20(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
    }
    /**
     * Internal transfer, only can be called by this contract
     */
    function _transfer(address _from, address _to, uint _value) internal {
        // Prevent transfer to 0x0 address. Use burn() instead
        require(_to != 0x0);
        // Check if the sender has enough
        require(balanceOf[_from] >= _value);
        // Check for overflows
        require(balanceOf[_to] + _value > balanceOf[_to]);
        // Save this for an assertion in the future
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        // Subtract from the sender
        balanceOf[_from] -= _value;
        // Add the same to the recipient
        balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
        // Asserts are used to use static analysis to find bugs in your code. They should never fail
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    /**
     * Transfer tokens
     *
     * Send `_value` tokens to `_to` from your account
     *
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }
    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]);     // Check allowance
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    /**
     * Set allowance for other address
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    /**
     * Set allowance for other address and notify
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
     */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        public
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }
    /**
     * Destroy tokens
     *
     * Remove `_value` tokens from the system irreversibly
     *
     * @param _value the amount of money to burn
     */
    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
        balanceOf[msg.sender] -= _value;            // Subtract from the sender
        totalSupply -= _value;                      // Updates totalSupply
        Burn(msg.sender, _value);
        return true;
    }
    /**
     * Destroy tokens from other account
     *
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
     *
     * @param _from the address of the sender
     * @param _value the amount of money to burn
     */
    function burnFrom(address _from, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
        require(_value <= allowance[_from][msg.sender]);    // Check allowance
        balanceOf[_from] -= _value;                         // Subtract from the targeted balance
        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
        totalSupply -= _value;                              // Update totalSupply
        Burn(_from, _value);
        return true;
    }
}
/******************************************/
/*       ADVANCED TOKEN STARTS HERE       */
/******************************************/
contract BthhjToken is TokenERC20 {
    /* Initializes contract with initial supply tokens to the creator of the contract */
    function BthhjToken(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]
Contract_Creation_Code_16:
60806040526002805460ff1916601217905534801561001d57600080fd5b506040516109cf3803806109cf83398101604090815281516020808401518385015160025460ff16600a0a84026003819055336000908152600485529586205590850180519395909491019285928592859261007b9285019061009b565b50805161008f90600190602084019061009b565b50505050505050610136565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100dc57805160ff1916838001178555610109565b82800160010185558215610109579182015b828111156101095782518255916020019190600101906100ee565b50610115929150610119565b5090565b61013391905b80821115610115576000815560010161011f565b90565b61088a806101456000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806342966c68146101fc57806370a082311461021457806379cc67901461023557806395d89b4114610259578063a9059cbb1461026e578063cae9ca5114610294578063dd62ed3e146102fd575b600080fd5b3480156100ca57600080fd5b506100d3610324565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a03600435166024356103b2565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103df565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103e5565b3480156101dd57600080fd5b506101e6610454565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061016c60043561045d565b34801561022057600080fd5b50610195600160a060020a03600435166104d5565b34801561024157600080fd5b5061016c600160a060020a03600435166024356104e7565b34801561026557600080fd5b506100d36105b8565b34801561027a57600080fd5b50610292600160a060020a0360043516602435610612565b005b3480156102a057600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261016c948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506106219650505050505050565b34801561030957600080fd5b50610195600160a060020a036004358116906024351661073a565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b505050505081565b336000908152600560209081526040808320600160a060020a039590951683529390529190912055600190565b60035481565b600160a060020a038316600090815260056020908152604080832033845290915281205482111561041557600080fd5b600160a060020a038416600090815260056020908152604080832033845290915290208054839003905561044a848484610757565b5060019392505050565b60025460ff1681565b3360009081526004602052604081205482111561047957600080fd5b3360008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600160a060020a03821660009081526004602052604081205482111561050c57600080fd5b600160a060020a038316600090815260056020908152604080832033845290915290205482111561053c57600080fd5b600160a060020a0383166000818152600460209081526040808320805487900390556005825280832033845282529182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103aa5780601f1061037f576101008083540402835291602001916103aa565b61061d338383610757565b5050565b60008361062e81856103b2565b15610732576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156106c65781810151838201526020016106ae565b50505050905090810190601f1680156106f35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b50505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a038316151561076e57600080fd5b600160a060020a03841660009081526004602052604090205482111561079357600080fd5b600160a060020a038316600090815260046020526040902054828101116107b957600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a0380841660009081526004602052604080822054928716825290205401811461085857fe5b505050505600a165627a7a72305820f7b7ecd37947e9aa75a051ccad69794131d62de3596e67c92b353740018b47ff00290000000000000000000000000000000000000000000000000000000001312d00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005425448484a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005425448484a000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0xf342e74b452652b95f902f7d247ca9b4dd70a5a7
Contract Name: ElfiToken
Contract_Source_Code: 
pragma solidity ^0.4.24;
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
contract ElfiToken {
    mapping(address => uint256) public balances;
    mapping(address => mapping (address => uint256)) public allowed;
    using SafeMath for uint256;
    address public owner;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 private constant MAX_UINT256 = 2**256 -1 ;
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    bool lock = false;
    constructor(
        uint256 _initialAmount,
        string _tokenName,
        uint8 _decimalUnits,
        string _tokenSymbol
    ) public {
        owner = msg.sender;
        balances[msg.sender] = _initialAmount;
        totalSupply = _initialAmount;
        name = _tokenName;
        decimals = _decimalUnits;
        symbol = _tokenSymbol;
    }
	modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    modifier isLock {
        require(!lock);
        _;
    }
    function setLock(bool _lock) onlyOwner public{
        lock = _lock;
    }
    function transferOwnership(address newOwner) onlyOwner public {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
    function transfer(
        address _to,
        uint256 _value
    ) public returns (bool) {
        require(balances[msg.sender] >= _value);
        require(msg.sender == _to || balances[_to] <= MAX_UINT256 - _value);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool) {
        uint256 allowance = allowed[_from][msg.sender];
        require(balances[_from] >= _value);
        require(_from == _to || balances[_to] <= MAX_UINT256 -_value);
        require(allowance >= _value);
        balances[_from] -= _value;
        balances[_to] += _value;
        if (allowance < MAX_UINT256) {
            allowed[_from][msg.sender] -= _value;
        }
        emit Transfer(_from, _to, _value);
        return true;
    }
    function balanceOf(
        address _owner
    ) public view returns (uint256) {
        return balances[_owner];
    }
    function approve(
        address _spender,
        uint256 _value
    ) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    function allowance(
        address _owner,
        address _spender
    ) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_lock","type":"bool"}],"name":"setLock","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_initialAmount","type":"uint256"},{"name":"_tokenName","type":"string"},{"name":"_decimalUnits","type":"uint8"},{"name":"_tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040526007805460ff1916905534801561001a57600080fd5b50604051610942380380610942833981016040908152815160208084015183850151606086015160028054600160a060020a0319163390811790915560009081528085529590952084905560068490559085018051939590949193910191610087916003918601906100b4565b506005805460ff191660ff841617905580516100aa9060049060208401906100b4565b505050505061014f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f557805160ff1916838001178555610122565b82800160010185558215610122579182015b82811115610122578251825591602001919060010190610107565b5061012e929150610132565b5090565b61014c91905b8082111561012e5760008155600101610138565b90565b6107e48061015e6000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd57806327e235e3146101e7578063313ce567146102085780635c65816514610233578063619d51941461025a57806370a08231146102765780638da5cb5b1461029757806395d89b41146102c8578063a9059cbb146102dd578063dd62ed3e14610301578063f2fde38b14610328575b600080fd5b3480156100e057600080fd5b506100e9610349565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a03600435166024356103d7565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab61043d565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610443565b3480156101f357600080fd5b506101ab600160a060020a036004351661058d565b34801561021457600080fd5b5061021d61059f565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b506101ab600160a060020a03600435811690602435166105a8565b34801561026657600080fd5b5061027460043515156105c5565b005b34801561028257600080fd5b506101ab600160a060020a03600435166105ef565b3480156102a357600080fd5b506102ac61060a565b60408051600160a060020a039092168252519081900360200190f35b3480156102d457600080fd5b506100e9610619565b3480156102e957600080fd5b50610182600160a060020a0360043516602435610674565b34801561030d57600080fd5b506101ab600160a060020a036004358116906024351661073b565b34801561033457600080fd5b50610274600160a060020a0360043516610766565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b505050505081565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60065481565b600160a060020a03831660008181526001602090815260408083203384528252808320549383529082905281205490919083111561048057600080fd5b83600160a060020a031685600160a060020a031614806104bd5750600160a060020a03841660009081526020819052604090205460001984900310155b15156104c857600080fd5b828110156104d557600080fd5b600160a060020a038086166000908152602081905260408082208054879003905591861681522080548401905560001981101561053757600160a060020a03851660009081526001602090815260408083203384529091529020805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3506001949350505050565b60006020819052908152604090205481565b60055460ff1681565b600160209081526000928352604080842090915290825290205481565b600254600160a060020a031633146105dc57600080fd5b6007805460ff1916911515919091179055565b600160a060020a031660009081526020819052604090205490565b600254600160a060020a031681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103cf5780601f106103a4576101008083540402835291602001916103cf565b3360009081526020819052604081205482111561069057600080fd5b33600160a060020a03841614806106c45750600160a060020a03831660009081526020819052604090205460001983900310155b15156106cf57600080fd5b3360008181526020818152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600254600160a060020a0316331461077d57600080fd5b600160a060020a038116156107b5576002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b505600a165627a7a7230582087df5a83bbfe199647d0a51bb19f0271b4b7fdd92d79aecea7891ed6bd1074a100290000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a456c666920546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454c464900000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0x74758acfce059f503a7e6b0fc2c8737600f9f2c4
Contract Name: TokenTransferProxy
Contract_Source_Code: 
pragma solidity 0.4.25;
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 {
  function totalSupply() public view returns (uint256);
  function balanceOf(address _who) public view returns (uint256);
  function allowance(address _owner, address _spender)
    public view returns (uint256);
  function transfer(address _to, uint256 _value) public returns (bool);
  function approve(address _spender, uint256 _value)
    public returns (bool);
  function transferFrom(address _from, address _to, uint256 _value)
    public returns (bool);
  function decimals() public view returns (uint256);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
library ERC20SafeTransfer {
    function safeTransfer(address _tokenAddress, address _to, uint256 _value) internal returns (bool success) {
        require(_tokenAddress.call(bytes4(keccak256("transfer(address,uint256)")), _to, _value));
        return fetchReturnData();
    }
    function safeTransferFrom(address _tokenAddress, address _from, address _to, uint256 _value) internal returns (bool success) {
        require(_tokenAddress.call(bytes4(keccak256("transferFrom(address,address,uint256)")), _from, _to, _value));
        return fetchReturnData();
    }
    function safeApprove(address _tokenAddress, address _spender, uint256 _value) internal returns (bool success) {
        require(_tokenAddress.call(bytes4(keccak256("approve(address,uint256)")), _spender, _value));
        return fetchReturnData();
    }
    function fetchReturnData() internal returns (bool success){
        assembly {
            switch returndatasize()
            case 0 {
                success := 1
            }
            case 32 {
                returndatacopy(0, 0, 32)
                success := mload(0)
            }
            default {
                revert(0, 0)
            }
        }
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;
  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );
  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    owner = msg.sender;
  }
  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }
  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }
  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}
/*
  Copyright 2018 ZeroEx Intl.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
/// @title TokenTransferProxy - Transfers tokens on behalf of contracts that have been approved via decentralized governance.
/// @author Amir Bandeali - <
Contract_ABI:
[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"authorities","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"authorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAuthorizedAddresses","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"target","type":"address"},{"indexed":true,"name":"caller","type":"address"}],"name":"LogAuthorizedAddressAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"target","type":"address"},{"indexed":true,"name":"caller","type":"address"}],"name":"LogAuthorizedAddressRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:
608060405260008054600160a060020a0319163317905561094e806100256000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166315dacbea811461009d57806342f1181e146100ee578063494503d41461011e578063707129391461015f578063715018a61461018d5780638da5cb5b146101a2578063b9181611146101b7578063d39de6e9146101e5578063f2fde38b1461024a575b600080fd5b3480156100a957600080fd5b506100da73ffffffffffffffffffffffffffffffffffffffff60043581169060243581169060443516606435610278565b604080519115158252519081900360200190f35b3480156100fa57600080fd5b5061011c73ffffffffffffffffffffffffffffffffffffffff600435166102b8565b005b34801561012a57600080fd5b506101366004356103ba565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561016b57600080fd5b5061011c73ffffffffffffffffffffffffffffffffffffffff600435166103ef565b34801561019957600080fd5b5061011c6105c6565b3480156101ae57600080fd5b5061013661064c565b3480156101c357600080fd5b506100da73ffffffffffffffffffffffffffffffffffffffff60043516610668565b3480156101f157600080fd5b506101fa61067d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023657818101518382015260200161021e565b505050509050019250505060405180910390f35b34801561025657600080fd5b5061011c73ffffffffffffffffffffffffffffffffffffffff600435166106ed565b3360009081526001602052604081205460ff16151561029657600080fd5b6102a28585858561071d565b15156102ad57600080fd5b506001949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102dc57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902054819060ff161561031157600080fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805473ffffffffffffffffffffffffffffffffffffffff191684179055513392917f94bb87f4c15c4587ff559a7584006fa01ddf9299359be6b512b94527aa961aca91a35050565b60028054829081106103c857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461041457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040902054829060ff16151561044a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120805460ff1916905591505b60025482101561057e578273ffffffffffffffffffffffffffffffffffffffff166002838154811015156104aa57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610573576002805460001981019081106104e457fe5b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216918490811061051757fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff9290921691909117905560028054600019019061056d90826108df565b5061057e565b60019091019061047a565b604051339073ffffffffffffffffffffffffffffffffffffffff8516907ff5b347a1e40749dd050f5f07fbdbeb7e3efa9756903044dd29401fd1d4bb4a1c90600090a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ea57600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60016020526000908152604090205460ff1681565b606060028054806020026020016040519081016040528092919081815260200182805480156106e257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116106b7575b505050505090505b90565b60005473ffffffffffffffffffffffffffffffffffffffff16331461071157600080fd5b61071a8161080c565b50565b604080517f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81527f74323536290000000000000000000000000000000000000000000000000000006020820152815190819003602501812063ffffffff7c010000000000000000000000000000000000000000000000000000000091829004908116909102825273ffffffffffffffffffffffffffffffffffffffff868116600484015285811660248401526044830185905292516000938816926064808201928692909190829003018183875af19250505015156107fb57600080fd5b6108036108b0565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116151561082e57600080fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60003d80156108c657602081146108cf57600080fd5b600191506108db565b60206000803e60005191505b5090565b81548183558181111561090357600083815260209020610903918101908301610908565b505050565b6106ea91905b808211156108db576000815560010161090e5600a165627a7a72305820f5bd2f2a71ccfe1c41a6ef6dfacfb888911b01ee2817c68a5a885443e2aafe810029
Contract_Creation_Code_ARM:



Contract Adress: 0xa94c4f27189c4760a5489cbab72acd1f9fa44379
Contract Name: JSPcoin
Contract_Source_Code: 
pragma solidity ^0.4.24;
// ----------------------------------------------------------------------------
// 'JSP' token contract
//
// Deployed to : 0x3Acd29e955c92f1aa37FcF9561d569674a3AD47E
// Symbol      : JSP
// Name        : JSPcoin
// Total supply: 100000000
// Decimals    : 18
//
// Enjoy.
//
// (c) by Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Safe maths
// ----------------------------------------------------------------------------
contract SafeMath {
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }
    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }
    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}
// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
// ----------------------------------------------------------------------------
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// Borrowed from MiniMeToken
// ----------------------------------------------------------------------------
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
    address public owner;
    address public newOwner;
    event OwnershipTransferred(address indexed _from, address indexed _to);
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}
// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and assisted
// token transfers
// ----------------------------------------------------------------------------
contract JSPcoin is ERC20Interface, Owned, SafeMath {
    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor(JSPcoin) public {
        symbol = "JSP";
        name = "JSPcoin";
        decimals = 18;
        _totalSupply = 100000000000000000000000000;
        balances[0x3Acd29e955c92f1aa37FcF9561d569674a3AD47E] = _totalSupply;
        emit Transfer(address(0), 0x3Acd29e955c92f1aa37FcF9561d569674a3AD47E, _totalSupply);
    }
    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }
    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account
    // 
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the from account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }
    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }
    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
    // ------------------------------------------------------------------------
    // Owner can transfer out any accidentally sent ERC20 tokens
    // ------------------------------------------------------------------------
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
        return ERC20Interface(tokenAddress).transfer(owner, tokens);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeSub","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeDiv","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"tokens","type":"uint256"},{"name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeMul","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"newOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokenAddress","type":"address"},{"name":"tokens","type":"uint256"}],"name":"transferAnyERC20Token","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenOwner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"safeAdd","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tokenOwner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"tokens","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:
60806040523480156200001157600080fd5b506040516020806200196a83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f4a5350000000000000000000000000000000000000000000000000000000000081525060029080519060200190620000c29291906200021c565b506040805190810160405280600781526020017f4a5350636f696e0000000000000000000000000000000000000000000000000081525060039080519060200190620001109291906200021c565b506012600460006101000a81548160ff021916908360ff1602179055506a52b7d2dcc80cd2e400000060058190555060055460066000733acd29e955c92f1aa37fcf9561d569674a3ad47e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550733acd29e955c92f1aa37fcf9561d569674a3ad47e73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a350620002cb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025f57805160ff191683800117855562000290565b8280016001018555821562000290579182015b828111156200028f57825182559160200191906001019062000272565b5b5090506200029f9190620002a3565b5090565b620002c891905b80821115620002c4576000816000905550600101620002aa565b5090565b90565b61168f80620002db6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a757806318160ddd1461020c57806323b872dd14610237578063313ce567146102bc5780633eaaf86b146102ed57806370a082311461031857806379ba50971461036f5780638da5cb5b1461038657806395d89b41146103dd578063a293d1e81461046d578063a9059cbb146104b8578063b5931f7c1461051d578063cae9ca5114610568578063d05c78da14610613578063d4ee1d901461065e578063dc39d06d146106b5578063dd62ed3e1461071a578063e6cb901314610791578063f2fde38b146107dc575b600080fd5b34801561012357600080fd5b5061012c61081f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b506101f2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108bd565b604051808215151515815260200191505060405180910390f35b34801561021857600080fd5b506102216109af565b6040518082815260200191505060405180910390f35b34801561024357600080fd5b506102a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109fa565b604051808215151515815260200191505060405180910390f35b3480156102c857600080fd5b506102d1610c8a565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102f957600080fd5b50610302610c9d565b6040518082815260200191505060405180910390f35b34801561032457600080fd5b50610359600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ca3565b6040518082815260200191505060405180910390f35b34801561037b57600080fd5b50610384610cec565b005b34801561039257600080fd5b5061039b610e8b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e957600080fd5b506103f2610eb0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610432578082015181840152602081019050610417565b50505050905090810190601f16801561045f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561047957600080fd5b506104a26004803603810190808035906020019092919080359060200190929190505050610f4e565b6040518082815260200191505060405180910390f35b3480156104c457600080fd5b50610503600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6a565b604051808215151515815260200191505060405180910390f35b34801561052957600080fd5b5061055260048036038101908080359060200190929190803590602001909291905050506110f3565b6040518082815260200191505060405180910390f35b34801561057457600080fd5b506105f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611117565b604051808215151515815260200191505060405180910390f35b34801561061f57600080fd5b506106486004803603810190808035906020019092919080359060200190929190505050611366565b6040518082815260200191505060405180910390f35b34801561066a57600080fd5b50610673611397565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106c157600080fd5b50610700600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113bd565b604051808215151515815260200191505060405180910390f35b34801561072657600080fd5b5061077b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611521565b6040518082815260200191505060405180910390f35b34801561079d57600080fd5b506107c660048036038101908080359060200190929190803590602001909291905050506115a8565b6040518082815260200191505060405180910390f35b3480156107e857600080fd5b5061081d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115c4565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108b55780601f1061088a576101008083540402835291602001916108b5565b820191906000526020600020905b81548152906001019060200180831161089857829003601f168201915b505050505081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600660008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460055403905090565b6000610a45600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f4e565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0e600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f4e565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bd7600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836115a8565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600460009054906101000a900460ff1681565b60055481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f465780601f10610f1b57610100808354040283529160200191610f46565b820191906000526020600020905b815481529060010190602001808311610f2957829003601f168201915b505050505081565b6000828211151515610f5f57600080fd5b818303905092915050565b6000610fb5600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f4e565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611041600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836115a8565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808211151561110357600080fd5b818381151561110e57fe5b04905092915050565b600082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112f45780820151818401526020810190506112d9565b50505050905090810190601f1680156113215780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b50505050600190509392505050565b600081830290506000831480611386575081838281151561138357fe5b04145b151561139157600080fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141a57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156114de57600080fd5b505af11580156114f2573d6000803e3d6000fd5b505050506040513d602081101561150857600080fd5b8101908080519060200190929190505050905092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081830190508281101515156115be57600080fd5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820917b6db34f48d5a15d20d445fc27ec9e6dc07b678c70172620efbd794ccd130d0029
Contract_Creation_Code_ARM:



Contract Adress: 0xb72816d00fd5afd8cc40423b6b078cdbef999416
Contract Name: Network51
Contract_Source_Code: 
/*! Net51.sol | (c) 2018 Develop by Network 51 LLC (proxchain.tech), author @proxchain | License: MIT */
pragma solidity 0.4.25;
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns(uint256) {
        if(a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns(uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns(uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    function add(uint256 a, uint256 b) internal pure returns(uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns(uint256) {
        require(b != 0);
        return a % b;
    }
}
contract Network51 {
    using SafeMath for uint;
    struct Investor {
        uint invested;
        uint payouts;
        uint first_invest;
        uint last_payout;
        address referrer;
    }
    uint constant public COMMISSION = 10;
    uint constant public DEVFEE = 1000;
    uint constant public WITHDRAW = 80;
    uint constant public REFBONUS = 5;
    uint constant public CASHBACK = 5;
    uint constant public MULTIPLICATION = 2;
    address public beneficiary = 0xd17a5265f8719ea5B01E084Aef3d4D58f452Ca18;
    mapping(address => Investor) public investors;
    event AddInvestor(address indexed holder);
    event Payout(address indexed holder, uint amount);
    event Deposit(address indexed holder, uint amount, address referrer);
    event RefBonus(address indexed from, address indexed to, uint amount);
    event CashBack(address indexed holder, uint amount);
    event Withdraw(address indexed holder, uint amount);
    function bonusSize() view public returns(uint) {
        uint b = address(this).balance;
        if(b >= 20500 ether) return 5;
        if(b >= 20400 ether) return 2;
        if(b >= 20300 ether) return 3;
        if(b >= 20200 ether) return 0;
        if(b >= 20100 ether) return 5;
        if(b >= 20000 ether) return 3;
        if(b >= 19900 ether) return 1;
        if(b >= 19800 ether) return 3;
        if(b >= 19700 ether) return 5;
        if(b >= 19600 ether) return 3;
        if(b >= 19500 ether) return 4;
        if(b >= 19400 ether) return 2;
        if(b >= 19300 ether) return 3;
        if(b >= 19200 ether) return 0;
        if(b >= 19100 ether) return 5;
        if(b >= 19000 ether) return 3;
        if(b >= 18900 ether) return 1;
        if(b >= 18800 ether) return 3;
        if(b >= 18700 ether) return 5;
        if(b >= 18600 ether) return 7;
        if(b >= 18500 ether) return 6;
        if(b >= 18400 ether) return 2;
        if(b >= 18300 ether) return 3;
        if(b >= 18200 ether) return 1;
        if(b >= 18100 ether) return 5;
        if(b >= 18000 ether) return 3;
        if(b >= 17900 ether) return 1;
        if(b >= 17800 ether) return 3;
        if(b >= 17700 ether) return 5;
        if(b >= 17600 ether) return 5;
        if(b >= 17500 ether) return 4;
        if(b >= 17400 ether) return 2;
        if(b >= 17300 ether) return 3;
        if(b >= 17200 ether) return 0;
        if(b >= 17100 ether) return 5;
        if(b >= 17000 ether) return 3;
        if(b >= 16900 ether) return 1;
        if(b >= 16800 ether) return 3;
        if(b >= 16700 ether) return 5;
        if(b >= 16600 ether) return 4;
        if(b >= 16500 ether) return 5;
        if(b >= 16400 ether) return 2;
        if(b >= 16300 ether) return 3;
        if(b >= 16200 ether) return 0;
        if(b >= 16100 ether) return 5;
        if(b >= 16000 ether) return 3;
        if(b >= 15900 ether) return 1;
        if(b >= 15800 ether) return 3;
        if(b >= 15700 ether) return 5;
        if(b >= 15600 ether) return 4;
        if(b >= 15500 ether) return 6;
        if(b >= 15400 ether) return 2;
        if(b >= 15300 ether) return 3;
        if(b >= 15200 ether) return 3;
        if(b >= 15100 ether) return 5;
        if(b >= 15000 ether) return 3;
        if(b >= 14900 ether) return 1;
        if(b >= 14800 ether) return 3;
        if(b >= 14700 ether) return 4;
        if(b >= 14600 ether) return 5;
        if(b >= 14500 ether) return 7;
        if(b >= 14400 ether) return 2;
        if(b >= 14300 ether) return 3;
        if(b >= 14200 ether) return 1;
        if(b >= 14100 ether) return 5;
        if(b >= 14000 ether) return 3;
        if(b >= 13900 ether) return 1;
        if(b >= 13800 ether) return 3;
        if(b >= 13700 ether) return 6;
        if(b >= 13600 ether) return 5;
        if(b >= 13500 ether) return 6;
        if(b >= 13400 ether) return 4;
        if(b >= 13300 ether) return 3;
        if(b >= 13200 ether) return 2;
        if(b >= 13100 ether) return 5;
        if(b >= 13000 ether) return 3;
        if(b >= 12900 ether) return 1;
        if(b >= 12800 ether) return 3;
        if(b >= 12700 ether) return 5;
        if(b >= 12600 ether) return 6;
        if(b >= 12500 ether) return 7;
        if(b >= 12400 ether) return 2;
        if(b >= 12300 ether) return 3;
        if(b >= 12200 ether) return 2;
        if(b >= 12100 ether) return 5;
        if(b >= 12000 ether) return 3;
        if(b >= 11900 ether) return 1;
        if(b >= 11800 ether) return 3;
        if(b >= 11700 ether) return 5;
        if(b >= 11600 ether) return 7;
        if(b >= 11500 ether) return 8;
        if(b >= 11400 ether) return 2;
        if(b >= 11300 ether) return 3;
        if(b >= 11200 ether) return 2;
        if(b >= 11100 ether) return 5;
        if(b >= 11000 ether) return 3;
        if(b >= 10900 ether) return 1;
        if(b >= 10800 ether) return 3;
        if(b >= 10700 ether) return 5;
        if(b >= 10600 ether) return 7;
        if(b >= 10500 ether) return 9;
        if(b >= 10400 ether) return 6;
        if(b >= 10300 ether) return 3;
        if(b >= 10200 ether) return 2;
        if(b >= 10100 ether) return 5;
        if(b >= 10000 ether) return 3;
        if(b >= 9900 ether) return 2;
        if(b >= 9800 ether) return 3;
        if(b >= 9700 ether) return 6;
        if(b >= 9600 ether) return 5;
        if(b >= 9500 ether) return 7;
        if(b >= 9400 ether) return 4;
        if(b >= 9300 ether) return 3;
        if(b >= 9200 ether) return 2;
        if(b >= 9100 ether) return 5;
        if(b >= 9000 ether) return 3;
        if(b >= 8900 ether) return 2;
        if(b >= 8800 ether) return 3;
        if(b >= 8700 ether) return 5;
        if(b >= 8600 ether) return 6;
        if(b >= 8500 ether) return 8;
        if(b >= 8400 ether) return 5;
        if(b >= 8300 ether) return 4;
        if(b >= 8200 ether) return 3;
        if(b >= 8100 ether) return 5;
        if(b >= 8000 ether) return 3;
        if(b >= 7900 ether) return 2;
        if(b >= 7800 ether) return 3;
        if(b >= 7700 ether) return 5;
        if(b >= 7600 ether) return 4;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 50000 ether) return 0;
        if(b >= 48000 ether) return 8;
        if(b >= 46000 ether) return 5;
        if(b >= 44000 ether) return 3;
        if(b >= 42000 ether) return 4;
        if(b >= 40000 ether) return 5;
        if(b >= 38000 ether) return 3;
        if(b >= 36000 ether) return 4;
        if(b >= 34000 ether) return 3;
        if(b >= 32000 ether) return 5;
        if(b >= 30000 ether) return 7;
        if(b >= 27000 ether) return 6;
        if(b >= 26000 ether) return 2;
        if(b >= 25000 ether) return 5;
        if(b >= 24000 ether) return 2;
        if(b >= 23000 ether) return 4;
        if(b >= 22000 ether) return 3;
        if(b >= 21000 ether) return 2;
        if(b >= 20000 ether) return 4;
        if(b >= 19000 ether) return 3;
        if(b >= 18000 ether) return 8;
        if(b >= 17500 ether) return 7;
        if(b >= 17000 ether) return 2;
        if(b >= 16500 ether) return 3;
        if(b >= 16000 ether) return 1;
        if(b >= 15500 ether) return 5;
        if(b >= 15000 ether) return 3;
        if(b >= 14500 ether) return 4;
        if(b >= 14000 ether) return 3;
        if(b >= 13500 ether) return 5;
        if(b >= 13000 ether) return 7;
        if(b >= 12500 ether) return 6;
        if(b >= 12250 ether) return 2;
        if(b >= 12000 ether) return 3;
        if(b >= 11750 ether) return 1;
        if(b >= 11500 ether) return 4;
        if(b >= 11250 ether) return 5;
        if(b >= 11000 ether) return 3;
        if(b >= 10750 ether) return 0;
        if(b >= 10500 ether) return 3;
        if(b >= 10250 ether) return 4;
        if(b >= 10000 ether) return 7;
        if(b >= 9950 ether) return 2;
        if(b >= 9900 ether) return 3;
        if(b >= 9850 ether) return 0;
        if(b >= 9800 ether) return 5;
        if(b >= 9750 ether) return 3;
        if(b >= 9450 ether) return 2;
        if(b >= 9400 ether) return 4;
        if(b >= 9100 ether) return 5;
        if(b >= 9050 ether) return 6;
        if(b >= 8750 ether) return 7;
        if(b >= 8700 ether) return 3;
        if(b >= 8500 ether) return 2;
        if(b >= 8450 ether) return 0;
        if(b >= 8250 ether) return 4;
        if(b >= 8200 ether) return 3;
        if(b >= 8000 ether) return 2;
        if(b >= 7950 ether) return 4;
        if(b >= 7750 ether) return 3;
        if(b >= 7700 ether) return 5;
        if(b >= 7500 ether) return 7;
        if(b >= 7400 ether) return 2;
        if(b >= 7300 ether) return 3;
        if(b >= 7200 ether) return 0;
        if(b >= 7100 ether) return 5;
        if(b >= 7000 ether) return 3;
        if(b >= 6900 ether) return 1;
        if(b >= 6800 ether) return 3;
        if(b >= 6700 ether) return 5;
        if(b >= 6600 ether) return 7;
        if(b >= 6500 ether) return 6;
        if(b >= 6450 ether) return 2;
        if(b >= 6400 ether) return 1;
        if(b >= 6350 ether) return 0;
        if(b >= 6300 ether) return 4;
        if(b >= 6250 ether) return 3;
        if(b >= 6200 ether) return 2;
        if(b >= 6150 ether) return 0;
        if(b >= 6100 ether) return 3;
        if(b >= 6050 ether) return 7;
        if(b >= 6000 ether) return 5;
        if(b >= 5970 ether) return 6;
        if(b >= 5940 ether) return 3;
        if(b >= 5910 ether) return 2;
        if(b >= 5880 ether) return 1;
        if(b >= 5850 ether) return 4;
        if(b >= 5820 ether) return 3;
        if(b >= 5790 ether) return 0;
        if(b >= 5760 ether) return 2;
        if(b >= 5730 ether) return 4;
        if(b >= 5700 ether) return 6;
        if(b >= 5650 ether) return 3;
        if(b >= 5600 ether) return 5;
        if(b >= 5550 ether) return 0;
        if(b >= 5500 ether) return 3;
        if(b >= 5450 ether) return 1;
        if(b >= 5400 ether) return 2;
        if(b >= 5350 ether) return 4;
        if(b >= 5300 ether) return 0;
        if(b >= 5250 ether) return 5;
        if(b >= 5200 ether) return 6;
        if(b >= 5180 ether) return 4;
        if(b >= 5160 ether) return 2;
        if(b >= 5140 ether) return 0;
        if(b >= 5120 ether) return 2;
        if(b >= 5100 ether) return 3;
        if(b >= 5080 ether) return 2;
        if(b >= 5060 ether) return 0;
        if(b >= 5040 ether) return 2;
        if(b >= 5020 ether) return 6;
        if(b >= 5000 ether) return 5;
        if(b >= 4950 ether) return 4;
        if(b >= 4900 ether) return 3;
        if(b >= 4850 ether) return 2;
        if(b >= 4800 ether) return 0;
        if(b >= 4750 ether) return 1;
        if(b >= 4700 ether) return 3;
        if(b >= 4650 ether) return 2;
        if(b >= 4600 ether) return 3;
        if(b >= 4550 ether) return 2;
        if(b >= 4500 ether) return 5;
        if(b >= 4300 ether) return 2;
        if(b >= 4100 ether) return 3;
        if(b >= 3900 ether) return 0;
        if(b >= 3700 ether) return 3;
        if(b >= 3500 ether) return 2;
        if(b >= 3300 ether) return 4;
        if(b >= 3100 ether) return 1;
        if(b >= 2900 ether) return 0;
        if(b >= 2700 ether) return 4;
        if(b >= 2500 ether) return 3;
        if(b >= 2400 ether) return 4;
        if(b >= 2300 ether) return 5;
        if(b >= 2200 ether) return 0;
        if(b >= 2100 ether) return 2;
        if(b >= 2000 ether) return 3;
        if(b >= 1900 ether) return 0;
        if(b >= 1800 ether) return 3;
        if(b >= 1700 ether) return 5;
        if(b >= 1600 ether) return 4;
        if(b >= 1500 ether) return 5;
        if(b >= 1450 ether) return 2;
        if(b >= 1400 ether) return 3;
        if(b >= 1350 ether) return 2;
        if(b >= 1300 ether) return 0;
        if(b >= 1250 ether) return 1;
        if(b >= 1200 ether) return 2;
        if(b >= 1150 ether) return 1;
        if(b >= 1100 ether) return 0;
        if(b >= 1050 ether) return 5;
        if(b >= 1000 ether) return 4;
        if(b >= 990 ether) return 1;
        if(b >= 980 ether) return 2;
        if(b >= 970 ether) return 0;
        if(b >= 960 ether) return 3;
        if(b >= 950 ether) return 1;
        if(b >= 940 ether) return 2;
        if(b >= 930 ether) return 1;
        if(b >= 920 ether) return 0;
        if(b >= 910 ether) return 2;
        if(b >= 900 ether) return 3;
        if(b >= 880 ether) return 2;
        if(b >= 860 ether) return 1;
        if(b >= 840 ether) return 0;
        if(b >= 820 ether) return 2;
        if(b >= 800 ether) return 3;
        if(b >= 780 ether) return 1;
        if(b >= 760 ether) return 0;
        if(b >= 740 ether) return 2;
        if(b >= 720 ether) return 3;
        if(b >= 700 ether) return 4;
        if(b >= 680 ether) return 1;
        if(b >= 660 ether) return 3;
        if(b >= 640 ether) return 2;
        if(b >= 620 ether) return 0;
        if(b >= 600 ether) return 3;
        if(b >= 580 ether) return 2;
        if(b >= 560 ether) return 1;
        if(b >= 540 ether) return 0;
        if(b >= 520 ether) return 2;
        if(b >= 500 ether) return 4;
        if(b >= 490 ether) return 1;
        if(b >= 480 ether) return 3;
        if(b >= 470 ether) return 0;
        if(b >= 460 ether) return 3;
        if(b >= 450 ether) return 1;
        if(b >= 440 ether) return 2;
        if(b >= 430 ether) return 1;
        if(b >= 420 ether) return 0;
        if(b >= 410 ether) return 2;
        if(b >= 400 ether) return 3;
        if(b >= 390 ether) return 2;
        if(b >= 380 ether) return 1;
        if(b >= 370 ether) return 0;
        if(b >= 360 ether) return 2;
        if(b >= 350 ether) return 3;
        if(b >= 340 ether) return 1;
        if(b >= 330 ether) return 0;
        if(b >= 320 ether) return 2;
        if(b >= 310 ether) return 1;
        if(b >= 300 ether) return 3;
        if(b >= 290 ether) return 1;
        if(b >= 280 ether) return 3;
        if(b >= 270 ether) return 2;
        if(b >= 260 ether) return 0;
        if(b >= 250 ether) return 1;
        if(b >= 240 ether) return 2;
        if(b >= 230 ether) return 1;
        if(b >= 220 ether) return 0;
        if(b >= 210 ether) return 1;
        if(b >= 200 ether) return 2;
        if(b >= 190 ether) return 1;
        if(b >= 180 ether) return 3;
        if(b >= 170 ether) return 0;
        if(b >= 160 ether) return 3;
        if(b >= 150 ether) return 1;
        if(b >= 140 ether) return 2;
        if(b >= 130 ether) return 1;
        if(b >= 120 ether) return 0;
        if(b >= 110 ether) return 2;
        if(b >= 100 ether) return 3;
        if(b >= 99 ether) return 2;
        if(b >= 98 ether) return 1;
        if(b >= 97 ether) return 0;
        if(b >= 96 ether) return 2;
        if(b >= 95 ether) return 3;
        if(b >= 94 ether) return 1;
        if(b >= 93 ether) return 0;
        if(b >= 92 ether) return 2;
        if(b >= 91 ether) return 3;
        if(b >= 90 ether) return 2;
        if(b >= 89 ether) return 1;
        if(b >= 88 ether) return 3;
        if(b >= 87 ether) return 2;
        if(b >= 86 ether) return 0;
        if(b >= 85 ether) return 1;
        if(b >= 84 ether) return 2;
        if(b >= 83 ether) return 1;
        if(b >= 82 ether) return 0;
        if(b >= 81 ether) return 1;
        if(b >= 80 ether) return 3;
        if(b >= 79 ether) return 1;
        if(b >= 78 ether) return 3;
        if(b >= 77 ether) return 2;
        if(b >= 76 ether) return 0;
        if(b >= 75 ether) return 1;
        if(b >= 74 ether) return 2;
        if(b >= 73 ether) return 1;
        if(b >= 72 ether) return 0;
        if(b >= 71 ether) return 1;
        if(b >= 70 ether) return 2;
        if(b >= 69 ether) return 1;
        if(b >= 68 ether) return 3;
        if(b >= 67 ether) return 0;
        if(b >= 66 ether) return 3;
        if(b >= 65 ether) return 1;
        if(b >= 64 ether) return 2;
        if(b >= 63 ether) return 1;
        if(b >= 62 ether) return 0;
        if(b >= 61 ether) return 2;
        if(b >= 60 ether) return 3;
        if(b >= 59 ether) return 1;
        if(b >= 58 ether) return 3;
        if(b >= 57 ether) return 2;
        if(b >= 56 ether) return 0;
        if(b >= 55 ether) return 1;
        if(b >= 54 ether) return 2;
        if(b >= 53 ether) return 1;
        if(b >= 52 ether) return 0;
        if(b >= 51 ether) return 2;
        if(b >= 50 ether) return 3;
        if(b >= 49 ether) return 2;
        if(b >= 48 ether) return 1;
        if(b >= 47 ether) return 0;
        if(b >= 46 ether) return 2;
        if(b >= 45 ether) return 3;
        if(b >= 44 ether) return 1;
        if(b >= 43 ether) return 0;
        if(b >= 42 ether) return 2;
        if(b >= 41 ether) return 1;
        if(b >= 40 ether) return 3;
        if(b >= 39 ether) return 1;
        if(b >= 38 ether) return 3;
        if(b >= 37 ether) return 2;
        if(b >= 36 ether) return 0;
        if(b >= 35 ether) return 1;
        if(b >= 34 ether) return 2;
        if(b >= 33 ether) return 1;
        if(b >= 32 ether) return 0;
        if(b >= 31 ether) return 1;
        if(b >= 30 ether) return 2;
        if(b >= 29 ether) return 1;
        if(b >= 28 ether) return 3;
        if(b >= 27 ether) return 0;
        if(b >= 26 ether) return 3;
        if(b >= 25 ether) return 1;
        if(b >= 24 ether) return 2;
        if(b >= 23 ether) return 1;
        if(b >= 22 ether) return 0;
        if(b >= 21 ether) return 2;
        if(b >= 20 ether) return 3;
        if(b >= 19 ether) return 2;
        if(b >= 18 ether) return 1;
        if(b >= 17 ether) return 0;
        if(b >= 16 ether) return 2;
        if(b >= 15 ether) return 3;
        if(b >= 14 ether) return 1;
        if(b >= 13 ether) return 0;
        if(b >= 12 ether) return 2;
        if(b >= 11 ether) return 1;
        if(b >= 10 ether) return 3;
        if(b >= 9 ether) return 1;
        if(b >= 8 ether) return 3;
        if(b >= 7 ether) return 2;
        if(b >= 6 ether) return 0;
        if(b >= 5 ether) return 1;
        if(b >= 4 ether) return 2;
        if(b >= 3 ether) return 1;
        if(b >= 2 ether) return 0;
        if(b >= 1 ether) return 2;
        return 1;
            }
    function payoutSize(address _to) view public returns(uint) {
        uint max = investors[_to].invested.mul(MULTIPLICATION);
        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;
        uint payout = investors[_to].invested.mul(bonusSize()).div(100).mul(block.timestamp.sub(investors[_to].last_payout)).div(1 days);
        return investors[_to].payouts.add(payout) > max ? max.sub(investors[_to].payouts) : payout;
    }
    function withdrawSize(address _to) view public returns(uint) {
        uint max = investors[_to].invested.div(100).mul(WITHDRAW);
        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;
        return max.sub(investors[_to].payouts);
    }
    function bytesToAddress(bytes bys) pure private returns(address addr) {
        assembly {
            addr := mload(add(bys, 20))
        }
    }
    function() payable external {
        if(investors[msg.sender].invested > 0) {
            uint payout = payoutSize(msg.sender);
            require(msg.value > 0 || payout > 0, "No payouts");
            if(payout > 0) {
                investors[msg.sender].last_payout = block.timestamp;
                investors[msg.sender].payouts = investors[msg.sender].payouts.add(payout);
                msg.sender.transfer(payout);
                emit Payout(msg.sender, payout);
            }
            if(investors[msg.sender].payouts >= investors[msg.sender].invested.mul(MULTIPLICATION)) {
                delete investors[msg.sender];
                emit Withdraw(msg.sender, 0);
            }
        }
        if(msg.value == 0.00000051 ether) {
            require(investors[msg.sender].invested > 0, "You have not invested anything yet");
            uint amount = withdrawSize(msg.sender);
            require(amount > 0, "You have nothing to withdraw");
            msg.sender.transfer(amount);
            beneficiary.transfer(msg.value.mul(DEVFEE).div(1));
            delete investors[msg.sender];
            emit Withdraw(msg.sender, amount);
        }
        else if(msg.value > 0) {
            require(msg.value >= 0.05 ether, "Minimum investment amount 0.05 ether");
            investors[msg.sender].last_payout = block.timestamp;
            investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);
            beneficiary.transfer(msg.value.mul(COMMISSION).div(100));
            if(investors[msg.sender].first_invest == 0) {
                investors[msg.sender].first_invest = block.timestamp;
                if(msg.data.length > 0) {
                    address ref = bytesToAddress(msg.data);
                    if(ref != msg.sender && investors[ref].invested > 0 && msg.value >= 1 ether) {
                        investors[msg.sender].referrer = ref;
                        uint ref_bonus = msg.value.mul(REFBONUS).div(100);
                        ref.transfer(ref_bonus);
                        emit RefBonus(msg.sender, ref, ref_bonus);
                        uint cashback_bonus = msg.value.mul(CASHBACK).div(100);
                        msg.sender.transfer(cashback_bonus);
                        emit CashBack(msg.sender, cashback_bonus);
                    }
                }
                emit AddInvestor(msg.sender);
            }
            emit Deposit(msg.sender, msg.value, investors[msg.sender].referrer);
        }
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"WITHDRAW","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"DEVFEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"bonusSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"REFBONUS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"beneficiary","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"COMMISSION","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_to","type":"address"}],"name":"withdrawSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CASHBACK","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"investors","outputs":[{"name":"invested","type":"uint256"},{"name":"payouts","type":"uint256"},{"name":"first_invest","type":"uint256"},{"name":"last_payout","type":"uint256"},{"name":"referrer","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MULTIPLICATION","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_to","type":"address"}],"name":"payoutSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"}],"name":"AddInvestor","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Payout","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"referrer","type":"address"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"RefBonus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"CashBack","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"holder","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"}]
Contract_Creation_Code_16:
608060405260008054600160a060020a03191673d17a5265f8719ea5b01e084aef3d4d58f452ca1817905534801561003657600080fd5b506149fa806100466000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166316ba7197811461083f578063196744231461086657806319c5b8871461087b578063227c76781461089057806338af3eed146108a5578063562df3d5146108d65780635718b760146108eb5780636f78cb41146108905780636f7bc9be1461090c578063724e1b4214610961578063cd402c8e14610976575b3360009081526001602052604081205481908190819081908110156102a0576100d633610993565b945060003411806100e75750600085115b151561013d576040805160e560020a62461bcd02815260206004820152600a60248201527f4e6f207061796f75747300000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008511156101eb573360009081526001602081905260409091204260038201550154610170908663ffffffff610b0316565b336000818152600160208190526040808320909101939093559151909187156108fc02918891818181858888f193505050501580156101b3573d6000803e3d6000fd5b5060408051868152905133917f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a6919081900360200190a25b3360009081526001602052604090205461020c90600263ffffffff610b2016565b3360009081526001602081905260409091200154106102a05733600081815260016020818152604080842084815592830184905560028301849055600383018490556004909201805473ffffffffffffffffffffffffffffffffffffffff19169055815192835290517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649281900390910190a25b346476be5e6c0014156104a4573360009081526001602052604081205411610338576040805160e560020a62461bcd02815260206004820152602260248201527f596f752068617665206e6f7420696e76657374656420616e797468696e67207960448201527f6574000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61034133610b4e565b93506000841161039b576040805160e560020a62461bcd02815260206004820152601c60248201527f596f752068617665206e6f7468696e6720746f20776974686472617700000000604482015290519081900360640190fd5b604051339085156108fc029086906000818181858888f193505050501580156103c8573d6000803e3d6000fd5b50600054600160a060020a03166108fc6103fb60016103ef346103e863ffffffff610b2016565b9063ffffffff610c0a16565b6040518115909202916000818181858888f19350505050158015610423573d6000803e3d6000fd5b503360008181526001602081815260408084208481559283018490556002830184905560038301939093556004909101805473ffffffffffffffffffffffffffffffffffffffff19169055815187815291517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649281900390910190a2610838565b60003411156108385766b1a2bc2ec50000341015610531576040805160e560020a62461bcd028152602060048201526024808201527f4d696e696d756d20696e766573746d656e7420616d6f756e7420302e3035206560448201527f7468657200000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600090815260016020526040902042600382015554610557903463ffffffff610b0316565b3360009081526001602052604081209190915554600160a060020a03166108fc61058d60646103ef34600a63ffffffff610b2016565b6040518115909202916000818181858888f193505050501580156105b5573d6000803e3d6000fd5b503360009081526001602052604090206002015415156107dc57336000908152600160205260408120426002909101553611156107b0576106266000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610c2d945050505050565b9250600160a060020a03831633148015906106575750600160a060020a038316600090815260016020526040812054115b801561066b5750670de0b6b3a76400003410155b156107b057336000908152600160205260409020600401805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556106b860646103ef346005610b20565b604051909250600160a060020a0384169083156108fc029084906000818181858888f193505050501580156106f1573d6000803e3d6000fd5b50604080518381529051600160a060020a0385169133917f328838ddfc48ad5ae5531b1ad95dfb22b42ff1866853e474375ffef2c63d8e509181900360200190a361074860646103ef34600563ffffffff610b2016565b604051909150339082156108fc029083906000818181858888f19350505050158015610778573d6000803e3d6000fd5b5060408051828152905133917f4615c4123931012254d1da78d05803534c985008f2421c8f2921db902fcc4955919081900360200190a25b60405133907f387d39bfed02fad21f9108b51f3ba7fc3880f84960908214bb7d9460e73116d590600090a25b33600081815260016020908152604091829020600401548251348152600160a060020a039091169181019190915281517fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f929181900390910190a25b5050505050005b34801561084b57600080fd5b50610854610c34565b60408051918252519081900360200190f35b34801561087257600080fd5b50610854610c39565b34801561088757600080fd5b50610854610c3f565b34801561089c57600080fd5b50610854614962565b3480156108b157600080fd5b506108ba614967565b60408051600160a060020a039092168252519081900360200190f35b3480156108e257600080fd5b50610854614976565b3480156108f757600080fd5b50610854600160a060020a0360043516610b4e565b34801561091857600080fd5b5061092d600160a060020a036004351661497b565b604080519586526020860194909452848401929092526060840152600160a060020a03166080830152519081900360a00190f35b34801561096d57600080fd5b506108546149b2565b34801561098257600080fd5b50610854600160a060020a03600435165b600160a060020a038116600090815260016020526040812054819081906109c190600263ffffffff610b2016565b600160a060020a0385166000908152600160205260409020549092501580610a055750600160a060020a038416600090815260016020819052604090912001548211155b15610a135760009250610afc565b600160a060020a038416600090815260016020526040902060030154610a8e9062015180906103ef90610a4d90429063ffffffff6149b716565b610a8260646103ef610a5d610c3f565b600160a060020a038c166000908152600160205260409020549063ffffffff610b2016565b9063ffffffff610b2016565b600160a060020a038516600090815260016020819052604090912001549091508290610ac0908363ffffffff610b0316565b11610acb5780610af9565b600160a060020a03841660009081526001602081905260409091200154610af990839063ffffffff6149b716565b92505b5050919050565b600082820183811015610b1557600080fd5b8091505b5092915050565b600080831515610b335760009150610b19565b50828202828482811515610b4357fe5b0414610b1557600080fd5b600160a060020a0381166000908152600160205260408120548190610b8190605090610a8290606463ffffffff610c0a16565b600160a060020a0384166000908152600160205260409020549091501580610bc55750600160a060020a038316600090815260016020819052604090912001548111155b15610bd35760009150610c04565b600160a060020a03831660009081526001602081905260409091200154610c0190829063ffffffff6149b716565b91505b50919050565b600080808311610c1957600080fd5b8284811515610c2457fe5b04949350505050565b6014015190565b605081565b6103e881565b600030316904574ea66a5853d000008110610c5d576005915061495e565b690451e2df0c2af0c000008110610c77576002915061495e565b69044c7717adfd8db000008110610c91576003915061495e565b6904470b504fd02aa000008110610cab576000915061495e565b6904419f88f1a2c79000008110610cc5576005915061495e565b69043c33c19375648000008110610cdf576003915061495e565b690436c7fa3548017000008110610cf9576001915061495e565b6904315c32d71a9e6000008110610d13576003915061495e565b69042bf06b78ed3b5000008110610d2d576005915061495e565b69042684a41abfd84000008110610d47576003915061495e565b69042118dcbc92753000008110610d61576004915061495e565b69041bad155e65122000008110610d7b576002915061495e565b690416414e0037af1000008110610d95576003915061495e565b690410d586a20a4c0000008110610daf576000915061495e565b69040b69bf43dce8f000008110610dc9576005915061495e565b690405fdf7e5af85e000008110610de3576003915061495e565b6904009230878222d000008110610dfd576001915061495e565b6903fb26692954bfc000008110610e17576003915061495e565b6903f5baa1cb275cb000008110610e31576005915061495e565b6903f04eda6cf9f9a000008110610e4b576007915061495e565b6903eae3130ecc969000008110610e65576006915061495e565b6903e5774bb09f338000008110610e7f576002915061495e565b6903e00b845271d07000008110610e99576003915061495e565b6903da9fbcf4446d6000008110610eb3576001915061495e565b6903d533f596170a5000008110610ecd576005915061495e565b6903cfc82e37e9a74000008110610ee7576003915061495e565b6903ca5c66d9bc443000008110610f01576001915061495e565b6903c4f09f7b8ee12000008110610f1b576003915061495e565b6903bf84d81d617e1000008110610f35576005915061495e565b6903ba1910bf341b0000008110610f4f576005915061495e565b6903b4ad496106b7f000008110610f69576004915061495e565b6903af418202d954e000008110610f83576002915061495e565b6903a9d5baa4abf1d000008110610f9d576003915061495e565b6903a469f3467e8ec000008110610fb7576000915061495e565b69039efe2be8512bb000008110610fd1576005915061495e565b69039992648a23c8a000008110610feb576003915061495e565b690394269d2bf6659000008110611005576001915061495e565b69038ebad5cdc902800000811061101f576003915061495e565b6903894f0e6f9b9f7000008110611039576005915061495e565b690383e347116e3c6000008110611053576004915061495e565b69037e777fb340d9500000811061106d576005915061495e565b6903790bb85513764000008110611087576002915061495e565b6903739ff0f6e61330000081106110a1576003915061495e565b69036e342998b8b020000081106110bb576000915061495e565b690368c8623a8b4d10000081106110d5576005915061495e565b6903635c9adc5dea00000081106110ef576003915061495e565b69035df0d37e3086f000008110611109576001915061495e565b690358850c200323e000008110611123576003915061495e565b6903531944c1d5c0d00000811061113d576005915061495e565b69034dad7d63a85dc000008110611157576004915061495e565b69034841b6057afab000008110611171576006915061495e565b690342d5eea74d97a00000811061118b576002915061495e565b69033d6a2749203490000081106111a5576003915061495e565b690337fe5feaf2d180000081106111bf576003915061495e565b69033292988cc56e70000081106111d9576005915061495e565b69032d26d12e980b60000081106111f3576003915061495e565b690327bb09d06aa8500000811061120d576001915061495e565b6903224f42723d454000008110611227576003915061495e565b69031ce37b140fe23000008110611241576004915061495e565b69031777b3b5e27f200000811061125b576005915061495e565b6903120bec57b51c1000008110611275576007915061495e565b69030ca024f987b9000000811061128f576002915061495e565b690307345d9b5a55f0000081106112a9576003915061495e565b690301c8963d2cf2e0000081106112c3576001915061495e565b6902fc5ccedeff8fd0000081106112dd576005915061495e565b6902f6f10780d22cc0000081106112f7576003915061495e565b6902f1854022a4c9b000008110611311576001915061495e565b6902ec1978c47766a00000811061132b576003915061495e565b6902e6adb1664a039000008110611345576006915061495e565b6902e141ea081ca0800000811061135f576005915061495e565b6902dbd622a9ef3d7000008110611379576006915061495e565b6902d66a5b4bc1da6000008110611393576004915061495e565b6902d0fe93ed947750000081106113ad576003915061495e565b6902cb92cc8f671440000081106113c7576002915061495e565b6902c627053139b130000081106113e1576005915061495e565b6902c0bb3dd30c4e20000081106113fb576003915061495e565b6902bb4f7674deeb1000008110611415576001915061495e565b6902b5e3af16b188000000811061142f576003915061495e565b6902b077e7b88424f000008110611449576005915061495e565b6902ab0c205a56c1e000008110611463576006915061495e565b6902a5a058fc295ed00000811061147d576007915061495e565b6902a034919dfbfbc000008110611497576002915061495e565b69029ac8ca3fce98b0000081106114b1576003915061495e565b6902955d02e1a135a0000081106114cb576002915061495e565b69028ff13b8373d290000081106114e5576005915061495e565b69028a857425466f80000081106114ff576003915061495e565b69028519acc7190c7000008110611519576001915061495e565b69027fade568eba96000008110611533576003915061495e565b69027a421e0abe46500000811061154d576005915061495e565b690274d656ac90e34000008110611567576007915061495e565b69026f6a8f4e63803000008110611581576008915061495e565b690269fec7f0361d200000811061159b576002915061495e565b69026493009208ba10000081106115b5576003915061495e565b69025f273933db5700000081106115cf576002915061495e565b690259bb71d5adf3f0000081106115e9576005915061495e565b6902544faa778090e000008110611603576003915061495e565b69024ee3e319532dd00000811061161d576001915061495e565b690249781bbb25cac000008110611637576003915061495e565b6902440c545cf867b000008110611651576005915061495e565b69023ea08cfecb04a00000811061166b576007915061495e565b69023934c5a09da19000008110611685576009915061495e565b690233c8fe42703e800000811061169f576006915061495e565b69022e5d36e442db70000081106116b9576003915061495e565b690228f16f86157860000081106116d3576002915061495e565b69022385a827e81550000081106116ed576005915061495e565b69021e19e0c9bab24000008110611707576003915061495e565b690218ae196b8d4f3000008110611721576002915061495e565b69021342520d5fec200000811061173b576003915061495e565b69020dd68aaf32891000008110611755576006915061495e565b6902086ac3510526000000811061176f576005915061495e565b690202fefbf2d7c2f000008110611789576007915061495e565b6901fd933494aa5fe0000081106117a3576004915061495e565b6901f8276d367cfcd0000081106117bd576003915061495e565b6901f2bba5d84f99c0000081106117d7576002915061495e565b6901ed4fde7a2236b0000081106117f1576005915061495e565b6901e7e4171bf4d3a00000811061180b576003915061495e565b6901e2784fbdc7709000008110611825576002915061495e565b6901dd0c885f9a0d800000811061183f576003915061495e565b6901d7a0c1016caa7000008110611859576005915061495e565b6901d234f9a33f476000008110611873576006915061495e565b6901ccc9324511e4500000811061188d576008915061495e565b6901c75d6ae6e48140000081106118a7576005915061495e565b6901c1f1a388b71e30000081106118c1576004915061495e565b6901bc85dc2a89bb20000081106118db576003915061495e565b6901b71a14cc5c5810000081106118f5576005915061495e565b6901b1ae4d6e2ef5000000811061190f576003915061495e565b6901ac4286100191f000008110611929576002915061495e565b6901a6d6beb1d42ee000008110611943576003915061495e565b6901a16af753a6cbd00000811061195d576005915061495e565b69019bff2ff57968c000008110611977576004915061495e565b6901969368974c05b000008110611991576007915061495e565b69019127a1391ea2a0000081106119ab576002915061495e565b69018bbbd9daf13f90000081106119c5576003915061495e565b69018650127cc3dc80000081106119df576000915061495e565b690180e44b1e967970000081106119f9576005915061495e565b69017b7883c069166000008110611a13576003915061495e565b6901760cbc623bb35000008110611a2d576001915061495e565b690170a0f5040e504000008110611a47576003915061495e565b69016b352da5e0ed3000008110611a61576005915061495e565b690165c96647b38a2000008110611a7b576007915061495e565b6901605d9ee986271000008110611a95576006915061495e565b69015da7bb3a6f758800008110611aaf576002915061495e565b69015af1d78b58c40000008110611ac9576001915061495e565b6901583bf3dc42127800008110611ae3576000915061495e565b69015586102d2b60f000008110611afd576004915061495e565b690152d02c7e14af6800008110611b17576003915061495e565b6901501a48cefdfde000008110611b31576002915061495e565b69014d64651fe74c5800008110611b4b576000915061495e565b69014aae8170d09ad000008110611b65576003915061495e565b690147f89dc1b9e94800008110611b7f576007915061495e565b6901969368974c05b000008110611b99576007915061495e565b69019127a1391ea2a000008110611bb3576002915061495e565b69018bbbd9daf13f9000008110611bcd576003915061495e565b69018650127cc3dc8000008110611be7576000915061495e565b690180e44b1e96797000008110611c01576005915061495e565b69017b7883c069166000008110611c1b576003915061495e565b6901760cbc623bb35000008110611c35576001915061495e565b690170a0f5040e504000008110611c4f576003915061495e565b69016b352da5e0ed3000008110611c69576005915061495e565b690165c96647b38a2000008110611c83576007915061495e565b6901605d9ee986271000008110611c9d576006915061495e565b69015da7bb3a6f758800008110611cb7576002915061495e565b69015af1d78b58c40000008110611cd1576001915061495e565b6901583bf3dc42127800008110611ceb576000915061495e565b69015586102d2b60f000008110611d05576004915061495e565b690152d02c7e14af6800008110611d1f576003915061495e565b6901501a48cefdfde000008110611d39576002915061495e565b69014d64651fe74c5800008110611d53576000915061495e565b69014aae8170d09ad000008110611d6d576003915061495e565b690147f89dc1b9e94800008110611d87576007915061495e565b6901969368974c05b000008110611da1576007915061495e565b69019127a1391ea2a000008110611dbb576002915061495e565b69018bbbd9daf13f9000008110611dd5576003915061495e565b69018650127cc3dc8000008110611def576000915061495e565b690180e44b1e96797000008110611e09576005915061495e565b69017b7883c069166000008110611e23576003915061495e565b6901760cbc623bb35000008110611e3d576001915061495e565b690170a0f5040e504000008110611e57576003915061495e565b69016b352da5e0ed3000008110611e71576005915061495e565b690165c96647b38a2000008110611e8b576007915061495e565b6901605d9ee986271000008110611ea5576006915061495e565b69015da7bb3a6f758800008110611ebf576002915061495e565b69015af1d78b58c40000008110611ed9576001915061495e565b6901583bf3dc42127800008110611ef3576000915061495e565b69015586102d2b60f000008110611f0d576004915061495e565b690152d02c7e14af6800008110611f27576003915061495e565b6901501a48cefdfde000008110611f41576002915061495e565b69014d64651fe74c5800008110611f5b576000915061495e565b69014aae8170d09ad000008110611f75576003915061495e565b690147f89dc1b9e94800008110611f8f576007915061495e565b6901969368974c05b000008110611fa9576007915061495e565b69019127a1391ea2a000008110611fc3576002915061495e565b69018bbbd9daf13f9000008110611fdd576003915061495e565b69018650127cc3dc8000008110611ff7576000915061495e565b690180e44b1e96797000008110612011576005915061495e565b69017b7883c06916600000811061202b576003915061495e565b6901760cbc623bb35000008110612045576001915061495e565b690170a0f5040e50400000811061205f576003915061495e565b69016b352da5e0ed3000008110612079576005915061495e565b690165c96647b38a2000008110612093576007915061495e565b6901605d9ee9862710000081106120ad576006915061495e565b69015da7bb3a6f7588000081106120c7576002915061495e565b69015af1d78b58c400000081106120e1576001915061495e565b6901583bf3dc421278000081106120fb576000915061495e565b69015586102d2b60f000008110612115576004915061495e565b690152d02c7e14af680000811061212f576003915061495e565b6901501a48cefdfde000008110612149576002915061495e565b69014d64651fe74c5800008110612163576000915061495e565b69014aae8170d09ad00000811061217d576003915061495e565b690147f89dc1b9e94800008110612197576007915061495e565b6901969368974c05b0000081106121b1576007915061495e565b69019127a1391ea2a0000081106121cb576002915061495e565b69018bbbd9daf13f90000081106121e5576003915061495e565b69018650127cc3dc80000081106121ff576000915061495e565b690180e44b1e96797000008110612219576005915061495e565b69017b7883c069166000008110612233576003915061495e565b6901760cbc623bb3500000811061224d576001915061495e565b690170a0f5040e504000008110612267576003915061495e565b69016b352da5e0ed3000008110612281576005915061495e565b690165c96647b38a200000811061229b576007915061495e565b6901605d9ee9862710000081106122b5576006915061495e565b69015da7bb3a6f7588000081106122cf576002915061495e565b69015af1d78b58c400000081106122e9576001915061495e565b6901583bf3dc42127800008110612303576000915061495e565b69015586102d2b60f00000811061231d576004915061495e565b690152d02c7e14af6800008110612337576003915061495e565b6901501a48cefdfde000008110612351576002915061495e565b69014d64651fe74c580000811061236b576000915061495e565b69014aae8170d09ad000008110612385576003915061495e565b690147f89dc1b9e9480000811061239f576007915061495e565b6901969368974c05b0000081106123b9576007915061495e565b69019127a1391ea2a0000081106123d3576002915061495e565b69018bbbd9daf13f90000081106123ed576003915061495e565b69018650127cc3dc8000008110612407576000915061495e565b690180e44b1e96797000008110612421576005915061495e565b69017b7883c06916600000811061243b576003915061495e565b6901760cbc623bb35000008110612455576001915061495e565b690170a0f5040e50400000811061246f576003915061495e565b69016b352da5e0ed3000008110612489576005915061495e565b690165c96647b38a20000081106124a3576007915061495e565b6901605d9ee9862710000081106124bd576006915061495e565b69015da7bb3a6f7588000081106124d7576002915061495e565b69015af1d78b58c400000081106124f1576001915061495e565b6901583bf3dc4212780000811061250b576000915061495e565b69015586102d2b60f000008110612525576004915061495e565b690152d02c7e14af680000811061253f576003915061495e565b6901501a48cefdfde000008110612559576002915061495e565b69014d64651fe74c5800008110612573576000915061495e565b69014aae8170d09ad00000811061258d576003915061495e565b690147f89dc1b9e948000081106125a7576007915061495e565b6901969368974c05b0000081106125c1576007915061495e565b69019127a1391ea2a0000081106125db576002915061495e565b69018bbbd9daf13f90000081106125f5576003915061495e565b69018650127cc3dc800000811061260f576000915061495e565b690180e44b1e96797000008110612629576005915061495e565b69017b7883c069166000008110612643576003915061495e565b6901760cbc623bb3500000811061265d576001915061495e565b690170a0f5040e504000008110612677576003915061495e565b69016b352da5e0ed3000008110612691576005915061495e565b690165c96647b38a20000081106126ab576007915061495e565b6901605d9ee9862710000081106126c5576006915061495e565b69015da7bb3a6f7588000081106126df576002915061495e565b69015af1d78b58c400000081106126f9576001915061495e565b6901583bf3dc42127800008110612713576000915061495e565b69015586102d2b60f00000811061272d576004915061495e565b690152d02c7e14af6800008110612747576003915061495e565b6901501a48cefdfde000008110612761576002915061495e565b69014d64651fe74c580000811061277b576000915061495e565b69014aae8170d09ad000008110612795576003915061495e565b690147f89dc1b9e948000081106127af576007915061495e565b6901969368974c05b0000081106127c9576007915061495e565b69019127a1391ea2a0000081106127e3576002915061495e565b69018bbbd9daf13f90000081106127fd576003915061495e565b69018650127cc3dc8000008110612817576000915061495e565b690180e44b1e96797000008110612831576005915061495e565b69017b7883c06916600000811061284b576003915061495e565b6901760cbc623bb35000008110612865576001915061495e565b690170a0f5040e50400000811061287f576003915061495e565b69016b352da5e0ed3000008110612899576005915061495e565b690165c96647b38a20000081106128b3576007915061495e565b6901605d9ee9862710000081106128cd576006915061495e565b69015da7bb3a6f7588000081106128e7576002915061495e565b69015af1d78b58c40000008110612901576001915061495e565b6901583bf3dc4212780000811061291b576000915061495e565b69015586102d2b60f000008110612935576004915061495e565b690152d02c7e14af680000811061294f576003915061495e565b6901501a48cefdfde000008110612969576002915061495e565b69014d64651fe74c5800008110612983576000915061495e565b69014aae8170d09ad00000811061299d576003915061495e565b690a968163f0a57b40000081106129b7576000915061495e565b690a2a15d09519be00000081106129d1576008915061495e565b6909bdaa3d398e00c0000081106129eb576005915061495e565b6909513ea9de02438000008110612a05576003915061495e565b6908e4d3168276864000008110612a1f576004915061495e565b690878678326eac90000008110612a39576005915061495e565b69080bfbefcb5f0bc000008110612a53576003915061495e565b69079f905c6fd34e8000008110612a6d576004915061495e565b69073324c91447914000008110612a87576003915061495e565b6906c6b935b8bbd40000008110612aa1576005915061495e565b69065a4da25d3016c000008110612abb576007915061495e565b6905b7ac4553de7ae000008110612ad5576006915061495e565b690581767ba6189c4000008110612aef576002915061495e565b69054b40b1f852bda000008110612b09576005915061495e565b6905150ae84a8cdf0000008110612b23576002915061495e565b6904ded51e9cc7006000008110612b3d576004915061495e565b6904a89f54ef0121c000008110612b57576003915061495e565b690472698b413b432000008110612b71576002915061495e565b69043c33c19375648000008110612b8b576004915061495e565b690405fdf7e5af85e000008110612ba5576003915061495e565b6903cfc82e37e9a74000008110612bbf576008915061495e565b6903b4ad496106b7f000008110612bd9576007915061495e565b69039992648a23c8a000008110612bf3576002915061495e565b69037e777fb340d95000008110612c0d576003915061495e565b6903635c9adc5dea0000008110612c27576001915061495e565b69034841b6057afab000008110612c41576005915061495e565b69032d26d12e980b6000008110612c5b576003915061495e565b6903120bec57b51c1000008110612c75576004915061495e565b6902f6f10780d22cc000008110612c8f576003915061495e565b6902dbd622a9ef3d7000008110612ca9576005915061495e565b6902c0bb3dd30c4e2000008110612cc3576007915061495e565b6902a5a058fc295ed000008110612cdd576006915061495e565b69029812e690b7e72800008110612cf7576002915061495e565b69028a857425466f8000008110612d11576003915061495e565b69027cf801b9d4f7d800008110612d2b576001915061495e565b69026f6a8f4e63803000008110612d45576004915061495e565b690261dd1ce2f2088800008110612d5f576005915061495e565b6902544faa778090e000008110612d79576003915061495e565b690246c2380c0f193800008110612d93576000915061495e565b69023934c5a09da19000008110612dad576003915061495e565b69022ba753352c29e800008110612dc7576004915061495e565b69021e19e0c9bab24000008110612de1576007915061495e565b69021b63fd1aa400b800008110612dfb576002915061495e565b690218ae196b8d4f3000008110612e15576003915061495e565b690215f835bc769da800008110612e2f576000915061495e565b69021342520d5fec2000008110612e49576005915061495e565b6902108c6e5e493a9800008110612e63576003915061495e565b690200491843c1116800008110612e7d576002915061495e565b6901fd933494aa5fe000008110612e97576004915061495e565b6901ed4fde7a2236b000008110612eb1576005915061495e565b6901ea99facb0b852800008110612ecb576006915061495e565b6901da56a4b0835bf800008110612ee5576007915061495e565b6901d7a0c1016caa7000008110612eff576003915061495e565b6901ccc9324511e45000008110612f19576002915061495e565b6901ca134e95fb32c800008110612f33576000915061495e565b6901bf3bbfd9a06ca800008110612f4d576004915061495e565b6901bc85dc2a89bb2000008110612f67576003915061495e565b6901b1ae4d6e2ef50000008110612f81576002915061495e565b6901aef869bf18437800008110612f9b576004915061495e565b6901a420db02bd7d5800008110612fb5576003915061495e565b6901a16af753a6cbd000008110612fcf576005915061495e565b6901969368974c05b000008110612fe9576007915061495e565b69019127a1391ea2a000008110613003576002915061495e565b69018bbbd9daf13f900000811061301d576003915061495e565b69018650127cc3dc8000008110613037576000915061495e565b690180e44b1e96797000008110613051576005915061495e565b69017b7883c06916600000811061306b576003915061495e565b6901760cbc623bb35000008110613085576001915061495e565b690170a0f5040e50400000811061309f576003915061495e565b69016b352da5e0ed30000081106130b9576005915061495e565b690165c96647b38a20000081106130d3576007915061495e565b6901605d9ee9862710000081106130ed576006915061495e565b69015da7bb3a6f758800008110613107576002915061495e565b69015af1d78b58c40000008110613121576001915061495e565b6901583bf3dc4212780000811061313b576000915061495e565b69015586102d2b60f000008110613155576004915061495e565b690152d02c7e14af680000811061316f576003915061495e565b6901501a48cefdfde000008110613189576002915061495e565b69014d64651fe74c58000081106131a3576000915061495e565b69014aae8170d09ad0000081106131bd576003915061495e565b690147f89dc1b9e948000081106131d7576007915061495e565b69014542ba12a337c0000081106131f1576005915061495e565b690143a264a9959a080000811061320b576006915061495e565b690142020f4087fc5000008110613225576003915061495e565b69014061b9d77a5e980000811061323f576002915061495e565b69013ec1646e6cc0e000008110613259576001915061495e565b69013d210f055f232800008110613273576004915061495e565b69013b80b99c5185700000811061328d576003915061495e565b690139e0643343e7b8000081106132a7576000915061495e565b690138400eca364a00000081106132c1576002915061495e565b6901369fb96128ac48000081106132db576004915061495e565b690134ff63f81b0e90000081106132f5576006915061495e565b690132498049045d080000811061330f576003915061495e565b69012f939c99edab8000008110613329576005915061495e565b69012cddb8ead6f9f800008110613343576000915061495e565b69012a27d53bc048700000811061335d576003915061495e565b69012771f18ca996e800008110613377576001915061495e565b690124bc0ddd92e56000008110613391576002915061495e565b690122062a2e7c33d8000081106133ab576004915061495e565b69011f50467f658250000081106133c5576000915061495e565b69011c9a62d04ed0c8000081106133df576005915061495e565b690119e47f21381f40000081106133f9576006915061495e565b690118cef0db2f0b7000008110613413576004915061495e565b690117b9629525f7a00000811061342d576002915061495e565b690116a3d44f1ce3d000008110613447576000915061495e565b6901158e460913d00000008110613461576002915061495e565b69011478b7c30abc300000811061347b576003915061495e565b69011363297d01a86000008110613495576002915061495e565b6901124d9b36f89490000081106134af576000915061495e565b690111380cf0ef80c0000081106134c9576002915061495e565b690110227eaae66cf0000081106134e3576006915061495e565b69010f0cf064dd5920000081106134fd576005915061495e565b69010c570cb5c6a79800008110613517576004915061495e565b690109a12906aff61000008110613531576003915061495e565b690106eb45579944880000811061354b576002915061495e565b6901043561a882930000008110613565576000915061495e565b6901017f7df96be1780000811061357f576001915061495e565b68fec99a4a552ff000008110613598576003915061495e565b68fc13b69b3e7e68000081106135b1576002915061495e565b68f95dd2ec27cce0000081106135ca576003915061495e565b68f6a7ef3d111b58000081106135e3576002915061495e565b68f3f20b8dfa69d0000081106135fc576005915061495e565b68e91a7cd19fa3b000008110613615576002915061495e565b68de42ee1544dd900000811061362e576003915061495e565b68d36b5f58ea177000008110613647576000915061495e565b68c893d09c8f515000008110613660576003915061495e565b68bdbc41e0348b3000008110613679576002915061495e565b68b2e4b323d9c51000008110613692576004915061495e565b68a80d24677efef0000081106136ab576001915061495e565b689d3595ab2438d0000081106136c4576000915061495e565b68925e06eec972b0000081106136dd576004915061495e565b68878678326eac90000081106136f6576003915061495e565b68821ab0d44149800000811061370f576004915061495e565b687caee97613e67000008110613728576005915061495e565b6877432217e6836000008110613741576000915061495e565b6871d75ab9b920500000811061375a576002915061495e565b686c6b935b8bbd4000008110613773576003915061495e565b6866ffcbfd5e5a300000811061378c576000915061495e565b686194049f30f720000081106137a5576003915061495e565b685c283d41039410000081106137be576005915061495e565b6856bc75e2d63100000081106137d7576004915061495e565b685150ae84a8cdf0000081106137f0576005915061495e565b684e9acad5921c6800008110613809576002915061495e565b684be4e7267b6ae000008110613822576003915061495e565b68492f037764b9580000811061383b576002915061495e565b6846791fc84e07d000008110613854576000915061495e565b6843c33c193756480000811061386d576001915061495e565b68410d586a20a4c000008110613886576002915061495e565b683e5774bb09f3380000811061389f576001915061495e565b683ba1910bf341b0000081106138b8576000915061495e565b6838ebad5cdc9028000081106138d1576005915061495e565b683635c9adc5dea0000081106138ea576004915061495e565b6835ab028ac154b800008110613903576001915061495e565b6835203b67bccad00000811061391c576002915061495e565b6834957444b840e800008110613935576000915061495e565b68340aad21b3b7000000811061394e576003915061495e565b68337fe5feaf2d1800008110613967576001915061495e565b6832f51edbaaa33000008110613980576002915061495e565b68326a57b8a6194800008110613999576001915061495e565b6831df9095a18f60000081106139b2576000915061495e565b683154c9729d0578000081106139cb576002915061495e565b6830ca024f987b90000081106139e4576003915061495e565b682fb474098f67c0000081106139fd576002915061495e565b682e9ee5c38653f000008110613a16576001915061495e565b682d89577d7d402000008110613a2f576000915061495e565b682c73c937742c5000008110613a48576002915061495e565b682b5e3af16b188000008110613a61576003915061495e565b682a48acab6204b000008110613a7a576001915061495e565b6829331e6558f0e000008110613a93576000915061495e565b68281d901f4fdd1000008110613aac576002915061495e565b68270801d946c94000008110613ac5576003915061495e565b6825f273933db57000008110613ade576004915061495e565b6824dce54d34a1a000008110613af7576001915061495e565b6823c757072b8dd000008110613b10576003915061495e565b6822b1c8c1227a0000008110613b29576002915061495e565b68219c3a7b19663000008110613b42576000915061495e565b682086ac3510526000008110613b5b576003915061495e565b681f711def073e9000008110613b74576002915061495e565b681e5b8fa8fe2ac000008110613b8d576001915061495e565b681d460162f516f000008110613ba6576000915061495e565b681c30731cec032000008110613bbf576002915061495e565b681b1ae4d6e2ef5000008110613bd8576004915061495e565b681a901db3de656800008110613bf1576001915061495e565b681a055690d9db8000008110613c0a576003915061495e565b68197a8f6dd5519800008110613c23576000915061495e565b6818efc84ad0c7b000008110613c3c576003915061495e565b6818650127cc3dc800008110613c55576001915061495e565b6817da3a04c7b3e000008110613c6e576002915061495e565b68174f72e1c329f800008110613c87576001915061495e565b6816c4abbebea01000008110613ca0576000915061495e565b681639e49bba162800008110613cb9576002915061495e565b6815af1d78b58c4000008110613cd2576003915061495e565b6815245655b1025800008110613ceb576002915061495e565b6814998f32ac787000008110613d04576001915061495e565b68140ec80fa7ee8800008110613d1d576000915061495e565b68138400eca364a000008110613d36576002915061495e565b6812f939c99edab800008110613d4f576003915061495e565b68126e72a69a50d000008110613d68576001915061495e565b6811e3ab8395c6e800008110613d81576000915061495e565b681158e460913d0000008110613d9a576002915061495e565b6810ce1d3d8cb31800008110613db3576001915061495e565b681043561a88293000008110613dcc576003915061495e565b680fb88ef7839f4800008110613de5576001915061495e565b680f2dc7d47f156000008110613dfe576003915061495e565b680ea300b17a8b7800008110613e17576002915061495e565b680e18398e76019000008110613e30576000915061495e565b680d8d726b7177a800008110613e49576001915061495e565b680d02ab486cedc000008110613e62576002915061495e565b680c77e4256863d800008110613e7b576001915061495e565b680bed1d0263d9f000008110613e94576000915061495e565b680b6255df5f500800008110613ead576001915061495e565b680ad78ebc5ac62000008110613ec6576002915061495e565b680a4cc799563c3800008110613edf576001915061495e565b6809c2007651b25000008110613ef8576003915061495e565b68093739534d286800008110613f11576000915061495e565b6808ac7230489e8000008110613f2a576003915061495e565b680821ab0d44149800008110613f43576001915061495e565b680796e3ea3f8ab000008110613f5c576002915061495e565b68070c1cc73b00c800008110613f75576001915061495e565b68068155a43676e000008110613f8e576000915061495e565b6805f68e8131ecf800008110613fa7576002915061495e565b68056bc75e2d631000008110613fc0576003915061495e565b68055de6a779bbac00008110613fd9576002915061495e565b68055005f0c6144800008110613ff2576001915061495e565b680542253a126ce40000811061400b576000915061495e565b68053444835ec58000008110614024576002915061495e565b68052663ccab1e1c0000811061403d576003915061495e565b6805188315f776b800008110614056576001915061495e565b68050aa25f43cf540000811061406f576000915061495e565b6804fcc1a89027f000008110614088576002915061495e565b6804eee0f1dc808c000081106140a1576003915061495e565b6804e1003b28d928000081106140ba576002915061495e565b6804d31f847531c4000081106140d3576001915061495e565b6804c53ecdc18a60000081106140ec576003915061495e565b6804b75e170de2fc00008110614105576002915061495e565b6804a97d605a3b980000811061411e576000915061495e565b68049b9ca9a6943400008110614137576001915061495e565b68048dbbf2f2ecd000008110614150576002915061495e565b68047fdb3c3f456c00008110614169576001915061495e565b680471fa858b9e0800008110614182576000915061495e565b68046419ced7f6a40000811061419b576001915061495e565b6804563918244f40000081106141b4576003915061495e565b680448586170a7dc000081106141cd576001915061495e565b68043a77aabd0078000081106141e6576003915061495e565b68042c96f4095914000081106141ff576002915061495e565b68041eb63d55b1b000008110614218576000915061495e565b680410d586a20a4c00008110614231576001915061495e565b680402f4cfee62e80000811061424a576002915061495e565b6803f514193abb8400008110614263576001915061495e565b6803e733628714200000811061427c576000915061495e565b6803d952abd36cbc00008110614295576001915061495e565b6803cb71f51fc558000081106142ae576002915061495e565b6803bd913e6c1df4000081106142c7576001915061495e565b6803afb087b87690000081106142e0576003915061495e565b6803a1cfd104cf2c000081106142f9576000915061495e565b680393ef1a5127c800008110614312576003915061495e565b6803860e639d80640000811061432b576001915061495e565b6803782dace9d90000008110614344576002915061495e565b68036a4cf636319c0000811061435d576001915061495e565b68035c6c3f828a3800008110614376576000915061495e565b68034e8b88cee2d40000811061438f576002915061495e565b680340aad21b3b70000081106143a8576003915061495e565b680332ca1b67940c000081106143c1576001915061495e565b680324e964b3eca8000081106143da576003915061495e565b68031708ae004544000081106143f3576002915061495e565b68030927f74c9de00000811061440c576000915061495e565b6802fb474098f67c00008110614425576001915061495e565b6802ed6689e54f180000811061443e576002915061495e565b6802df85d331a7b400008110614457576001915061495e565b6802d1a51c7e005000008110614470576000915061495e565b6802c3c465ca58ec00008110614489576002915061495e565b6802b5e3af16b188000081106144a2576003915061495e565b6802a802f8630a24000081106144bb576002915061495e565b68029a2241af62c0000081106144d4576001915061495e565b68028c418afbbb5c000081106144ed576000915061495e565b68027e60d44813f800008110614506576002915061495e565b680270801d946c940000811061451f576003915061495e565b6802629f66e0c53000008110614538576001915061495e565b680254beb02d1dcc00008110614551576000915061495e565b680246ddf97976680000811061456a576002915061495e565b680238fd42c5cf0400008110614583576001915061495e565b68022b1c8c1227a00000811061459c576003915061495e565b68021d3bd55e803c000081106145b5576001915061495e565b68020f5b1eaad8d8000081106145ce576003915061495e565b6802017a67f73174000081106145e7576002915061495e565b6801f399b1438a1000008110614600576000915061495e565b6801e5b8fa8fe2ac00008110614619576001915061495e565b6801d7d843dc3b4800008110614632576002915061495e565b6801c9f78d2893e40000811061464b576001915061495e565b6801bc16d674ec8000008110614664576000915061495e565b6801ae361fc1451c0000811061467d576001915061495e565b6801a055690d9db800008110614696576002915061495e565b68019274b259f654000081106146af576001915061495e565b68018493fba64ef0000081106146c8576003915061495e565b680176b344f2a78c000081106146e1576000915061495e565b680168d28e3f0028000081106146fa576003915061495e565b68015af1d78b58c400008110614713576001915061495e565b68014d1120d7b1600000811061472c576002915061495e565b68013f306a2409fc00008110614745576001915061495e565b6801314fb37062980000811061475e576000915061495e565b6801236efcbcbb3400008110614777576002915061495e565b6801158e460913d000008110614790576003915061495e565b680107ad8f556c6c000081106147a9576002915061495e565b67f9ccd8a1c508000081106147c1576001915061495e565b67ebec21ee1da4000081106147d9576000915061495e565b67de0b6b3a7640000081106147f1576002915061495e565b67d02ab486cedc00008110614809576003915061495e565b67c249fdd3277800008110614821576001915061495e565b67b469471f801400008110614839576000915061495e565b67a688906bd8b000008110614851576002915061495e565b6798a7d9b8314c00008110614869576001915061495e565b678ac7230489e800008110614881576003915061495e565b677ce66c50e28400008110614899576001915061495e565b676f05b59d3b20000081106148b1576003915061495e565b676124fee993bc000081106148c9576002915061495e565b6753444835ec58000081106148e1576000915061495e565b674563918244f4000081106148f9576001915061495e565b673782dace9d9000008110614911576002915061495e565b6729a2241af62c00008110614929576001915061495e565b671bc16d674ec800008110614941576000915061495e565b670de0b6b3a76400008110614959576002915061495e565b600191505b5090565b600581565b600054600160a060020a031681565b600a81565b60016020819052600091825260409091208054918101546002820154600383015460049093015491929091600160a060020a031685565b600281565b600080838311156149c757600080fd5b50509003905600a165627a7a7230582079922dcbfe36d8242c65de510c50d3cd40ecbed57c0c14cad108c8a2c262efc00029
Contract_Creation_Code_ARM:



Contract Adress: 0x59bf73063bb645f3df40d9b05a117be6344e1eda
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetFactory.sol
interface ISetFactory {
    /* ============ External Functions ============ */
    /**
     * Exchange components for Set tokens
     *
     * @param  _set          Address of the Set to issue
     * @param  _quantity     Number of tokens to issue
     */
    function issue(
        address _set,
        uint256 _quantity
    )
        external;
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (ISetFactory);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Balance of token for a specified address
    *
    * @param who  The address
    * @return uint256 Balance of address
    */
    function balanceOf(
        address who
    )
        external
        view
        returns (uint256);
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.factory().issue(set, fitMintAmount);
        set.transfer(msg.sender, set.balanceOf(this));
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610a6d806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b506100706109bb565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff6109d316565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff6109f016565b9063ffffffff610a1e16565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b8a600160a060020a031663c45a01556040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b5051604080517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018890529151919092169163867904b491604480830192600092919082900301818387803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b5050604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038f16935063a9059cbb9250339184916370a08231916024808201926020929091908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915251604480830192600092919082900301818387803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b5050506000303111159050610769576040513390303180156108fc02916000818181858888f19350505050158015610767573d6000803e3d6000fd5b505b600094505b88518510156109ae57888581518110151561078557fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b1580156107f357600080fd5b505af1158015610807573d6000803e3d6000fd5b505050506040513d602081101561081d57600080fd5b505111156109a357604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561089157600080fd5b505af11580156108a5573d6000803e3d6000fd5b505050506040513d60208110156108bb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d602081101561093457600080fd5b505115156109a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b60019094019361076e565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000828201838110156109e557600080fd5b8091505b5092915050565b600080831515610a0357600091506109e9565b50828202828482811515610a1357fe5b04146109e557600080fd5b600080808311610a2d57600080fd5b8284811515610a3857fe5b049493505050505600a165627a7a7230582072f07da822ac037337ccc7be06096c41ea628c695bf3d0498a9224dbb8c129490029
Contract_Creation_Code_ARM:



Contract Adress: 0x0a7f20c58c3014e1dfb7f9d460d8bc2202f7bf1f
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (address);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.mint(msg.sender, fitMintAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610903806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b50610070610851565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff61086916565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff61088616565b9063ffffffff6108b416565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038d16916340c10f1991604480830192600092919082900301818387803b1580156105ad57600080fd5b505af11580156105c1573d6000803e3d6000fd5b50505060003031111590506105ff576040513390303180156108fc02916000818181858888f193505050501580156105fd573d6000803e3d6000fd5b505b600094505b885185101561084457888581518110151561061b57fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b505050506040513d60208110156106b357600080fd5b5051111561083957604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561072757600080fd5b505af115801561073b573d6000803e3d6000fd5b505050506040513d602081101561075157600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b505050506040513d60208110156107ca57600080fd5b5051151561083957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190940193610604565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008282018381101561087b57600080fd5b8091505b5092915050565b600080831515610899576000915061087f565b508282028284828115156108a957fe5b041461087b57600080fd5b6000808083116108c357600080fd5b82848115156108ce57fe5b049493505050505600a165627a7a72305820d341b91ee0ca9e493e91914ba74126a94615b536c8d5bf35054679fd8762e96a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xcb089b8ae76b5df461d40e957603f7a59aea9e0d
Contract Name: Arroundtoken
Contract_Source_Code: 
pragma solidity 0.5.0;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
 * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract ERC20 is IERC20 {
    using SafeMath for uint256;
    mapping (address => uint256) internal _balances;
    mapping (address => mapping (address => uint256)) private _allowed;
    uint256 internal _totalSupply;
    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }
    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * Beware that changing an allowance with this method brings the risk that someone may use both the old
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    /**
     * @dev Transfer tokens from one address to another
     * @param from address The address which you want to send tokens from
     * @param to address The address which you want to transfer to
     * @param value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param addedValue The amount of tokens to increase the allowance by.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
     * @dev Decrease the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To decrement
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param subtractedValue The amount of tokens to decrease the allowance by.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
    * @dev Transfer token for a specified addresses
    * @param from The address to transfer from.
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
    */
    constructor() public {
        owner = msg.sender;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
    _;
    }
}
contract Claimable is Ownable {
    address public pendingOwner;
    /**
     * @dev Modifier throws if called by any account other than the pendingOwner.
     */
    modifier onlyPendingOwner() {
        require(msg.sender == pendingOwner);
        _;
    }
    /**
     * @dev Allows the current owner to set the pendingOwner address.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) onlyOwner public {
        pendingOwner = newOwner;
    }
    /**
     * @dev Allows the pendingOwner address to finalize the transfer.
     */
    function claimOwnership() onlyPendingOwner public {
        emit OwnershipTransferred(owner, pendingOwner);
        owner = pendingOwner;
        pendingOwner = address(0);
    }
}
/**
 * @title Arroundtoken
 * @dev The Arroundtoken contract is ERC20-compatible token processing contract
 * with additional  features like multiTransfer and reclaimTokens
 *
 */
contract Arroundtoken is ERC20, Claimable {
    using SafeMath for uint256;
    uint64 public constant TDE_FINISH = 1542326400;//!!!!Check before deploy
    // 1542326400  GMT: 16 November 2018 г., 00:00:00
    // 1542326399  GMT: 15 November 2018 г., 23:59:59
    //////////////////////
    // State var       ///
    //////////////////////
    string  public name;
    string  public symbol;
    uint8   public decimals;
    address public accTDE;
    address public accFoundCDF;
    address public accFoundNDF1;
    address public accFoundNDF2;
    address public accFoundNDF3;
    address public accTeam;
    address public accBounty;
    // Implementation of frozen funds
    mapping(address => uint64) public frozenAccounts;
    //////////////
    // EVENTS    //
    ///////////////
    event NewFreeze(address _acc, uint64 _timestamp);
    event BatchDistrib(uint8 cnt, uint256 batchAmount);
    /**
     * @param _accTDE - main address for token distribution
     * @param _accFoundCDF  - address for CDF Found tokens (WP)
     * @param _accFoundNDF1 - address for NDF Found tokens (WP)
     * @param _accFoundNDF2 - address for NDF Found tokens (WP)
     * @param _accFoundNDF3 - address for NDF Found tokens (WP)
     * @param _accTeam - address for team tokens, will frozzen by one year
     * @param _accBounty - address for bounty tokens 
     * @param _initialSupply - subj
     */  
    constructor (
        address _accTDE, 
        address _accFoundCDF,
        address _accFoundNDF1,
        address _accFoundNDF2,
        address _accFoundNDF3,
        address _accTeam,
        address _accBounty, 
        uint256 _initialSupply
    )
    public 
    {
        require(_accTDE       != address(0));
        require(_accFoundCDF  != address(0));
        require(_accFoundNDF1 != address(0));
        require(_accFoundNDF2 != address(0));
        require(_accFoundNDF3 != address(0));
        require(_accTeam      != address(0));
        require(_accBounty    != address(0));
        require(_initialSupply > 0);
        name           = "Arround";
        symbol         = "ARR";
        decimals       = 18;
        accTDE         = _accTDE;
        accFoundCDF    = _accFoundCDF;
        accFoundNDF1   = _accFoundNDF1;
        accFoundNDF2   = _accFoundNDF2;
        accFoundNDF3   = _accFoundNDF3;
        accTeam        = _accTeam;
        accBounty      = _accBounty;
        _totalSupply   = _initialSupply * (10 ** uint256(decimals));// All ARR tokens in the world
       //Initial token distribution
        _balances[_accTDE]       = 1104000000 * (10 ** uint256(decimals)); // TDE,      36.8%=28.6+8.2 
        _balances[_accFoundCDF]  = 1251000000 * (10 ** uint256(decimals)); // CDF,      41.7%
        _balances[_accFoundNDF1] =  150000000 * (10 ** uint256(decimals)); // 0.50*NDF, 10.0%
        _balances[_accFoundNDF2] =  105000000 * (10 ** uint256(decimals)); // 0.35*NDF, 10.0%
        _balances[_accFoundNDF3] =   45000000 * (10 ** uint256(decimals)); // 0.15*NDF, 10.0%
        _balances[_accTeam]      =  300000000 * (10 ** uint256(decimals)); // team,     10.0%
        _balances[_accBounty]    =   45000000 * (10 ** uint256(decimals)); // Bounty,    1.5%
        require(  _totalSupply ==  3000000000 * (10 ** uint256(decimals)), "Total Supply exceeded!!!");
        emit Transfer(address(0), _accTDE,       1104000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundCDF,  1251000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF1,  150000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF2,  105000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF3,   45000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accTeam,       300000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accBounty,      45000000 * (10 ** uint256(decimals)));
        //initisl freeze
        frozenAccounts[_accTeam]      = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF2] = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF3] = TDE_FINISH + 63158400; //+(3600*24*365)*2 +3600*24(leap year 2020)
        emit NewFreeze(_accTeam,        TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF2,   TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF3,   TDE_FINISH + 63158400);
    }
    modifier onlyTokenKeeper() {
        require(
            msg.sender == accTDE || 
            msg.sender == accFoundCDF ||
            msg.sender == accFoundNDF1 ||
            msg.sender == accBounty
        );
        _;
    }
    function() external { } 
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transfer(address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.transfer(_to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[_from] < now);
        return super.transferFrom(_from, _to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function approve(address _spender, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.approve(_spender, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function increaseAllowance(address _spender, uint _addedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.increaseAllowance(_spender, _addedValue);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function decreaseAllowance(address _spender, uint _subtractedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.decreaseAllowance(_spender, _subtractedValue);
    }
    /**
     * @dev Batch transfer function. Allow to save up 50% of gas
     */
    function multiTransfer(address[] calldata  _investors, uint256[] calldata   _value )  
        external 
        onlyTokenKeeper 
        returns (uint256 _batchAmount)
    {
        require(_investors.length <= 255); //audit recommendation
        require(_value.length == _investors.length);
        uint8      cnt = uint8(_investors.length);
        uint256 amount = 0;
        for (uint i=0; i<cnt; i++){
            amount = amount.add(_value[i]);
            require(_investors[i] != address(0));
            _balances[_investors[i]] = _balances[_investors[i]].add(_value[i]);
            emit Transfer(msg.sender, _investors[i], _value[i]);
        }
        require(amount <= _balances[msg.sender]);
        _balances[msg.sender] = _balances[msg.sender].sub(amount);
        emit BatchDistrib(cnt, amount);
        return amount;
    }
    /**
     * @dev Owner can claim any tokens that transfered to this contract address
     */
    function reclaimToken(ERC20 token) external onlyOwner {
        require(address(token) != address(0));
        uint256 balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
    }
}
  //***************************************************************
  // Based on best practice of https://github.com/Open Zeppelin/zeppelin-solidity
  // Adapted and amended by IBERGroup; 
  // Code released under the MIT License(see git root).
  ////**************************************************************
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"reclaimToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_investors","type":"address[]"},{"name":"_value","type":"uint256[]"}],"name":"multiTransfer","outputs":[{"name":"_batchAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF3","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TDE_FINISH","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF1","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundCDF","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTDE","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccounts","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF2","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accBounty","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_accTDE","type":"address"},{"name":"_accFoundCDF","type":"address"},{"name":"_accFoundNDF1","type":"address"},{"name":"_accFoundNDF2","type":"address"},{"name":"_accFoundNDF3","type":"address"},{"name":"_accTeam","type":"address"},{"name":"_accBounty","type":"address"},{"name":"_initialSupply","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_acc","type":"address"},{"indexed":false,"name":"_timestamp","type":"uint64"}],"name":"NewFreeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"cnt","type":"uint8"},{"indexed":false,"name":"batchAmount","type":"uint256"}],"name":"BatchDistrib","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0x44B173CbdFC9946963D871c3f8b680d6A7085e2c
Contract Name: lottery
Contract_Source_Code: 
pragma solidity 0.4.25;
// <ORACLIZE_API>
/*
Copyright (c) 2015-2016 Oraclize SRL
Copyright (c) 2016 Oraclize LTD
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary
pragma solidity >=0.4.18;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version
contract OraclizeI {
    address public cbAddress;
    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);
    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);
    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);
    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);
    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);
    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);
    function getPrice(string _datasource) public returns (uint _dsprice);
    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);
    function setProofType(byte _proofType) external;
    function setCustomGasPrice(uint _gasPrice) external;
    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);
}
contract OraclizeAddrResolverI {
    function getAddress() public returns (address _addr);
}
/*
Begin solidity-cborutils
https://github.com/smartcontractkit/solidity-cborutils
MIT License
Copyright (c) 2018 SmartContract ChainLink, Ltd.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
library Buffer {
    struct buffer {
        bytes buf;
        uint capacity;
    }
    function init(buffer memory buf, uint _capacity) internal pure {
        uint capacity = _capacity;
        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);
        // Allocate space for the buffer data
        buf.capacity = capacity;
        assembly {
            let ptr := mload(0x40)
            mstore(buf, ptr)
            mstore(ptr, 0)
            mstore(0x40, add(ptr, capacity))
        }
    }
    function resize(buffer memory buf, uint capacity) private pure {
        bytes memory oldbuf = buf.buf;
        init(buf, capacity);
        append(buf, oldbuf);
    }
    function max(uint a, uint b) private pure returns(uint) {
        if(a > b) {
            return a;
        }
        return b;
    }
    /**
     * @dev Appends a byte array to the end of the buffer. Resizes if doing so
     *      would exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {
        if(data.length + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, data.length) * 2);
        }
        uint dest;
        uint src;
        uint len = data.length;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Start address = buffer address + buffer length + sizeof(buffer length)
            dest := add(add(bufptr, buflen), 32)
            // Update buffer length
            mstore(bufptr, add(buflen, mload(data)))
            src := add(data, 32)
        }
        // Copy word-length chunks while possible
        for(; len >= 32; len -= 32) {
            assembly {
                mstore(dest, mload(src))
            }
            dest += 32;
            src += 32;
        }
        // Copy remaining bytes
        uint mask = 256 ** (32 - len) - 1;
        assembly {
            let srcpart := and(mload(src), not(mask))
            let destpart := and(mload(dest), mask)
            mstore(dest, or(destpart, srcpart))
        }
        return buf;
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, uint8 data) internal pure {
        if(buf.buf.length + 1 > buf.capacity) {
            resize(buf, buf.capacity * 2);
        }
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length)
            let dest := add(add(bufptr, buflen), 32)
            mstore8(dest, data)
            // Update buffer length
            mstore(bufptr, add(buflen, 1))
        }
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {
        if(len + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, len) * 2);
        }
        uint mask = 256 ** len - 1;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length) + len
            let dest := add(add(bufptr, buflen), len)
            mstore(dest, or(and(mload(dest), not(mask)), data))
            // Update buffer length
            mstore(bufptr, add(buflen, len))
        }
        return buf;
    }
}
library CBOR {
    using Buffer for Buffer.buffer;
    uint8 private constant MAJOR_TYPE_INT = 0;
    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
    uint8 private constant MAJOR_TYPE_BYTES = 2;
    uint8 private constant MAJOR_TYPE_STRING = 3;
    uint8 private constant MAJOR_TYPE_ARRAY = 4;
    uint8 private constant MAJOR_TYPE_MAP = 5;
    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {
        if(value <= 23) {
            buf.append(uint8((major << 5) | value));
        } else if(value <= 0xFF) {
            buf.append(uint8((major << 5) | 24));
            buf.appendInt(value, 1);
        } else if(value <= 0xFFFF) {
            buf.append(uint8((major << 5) | 25));
            buf.appendInt(value, 2);
        } else if(value <= 0xFFFFFFFF) {
            buf.append(uint8((major << 5) | 26));
            buf.appendInt(value, 4);
        } else if(value <= 0xFFFFFFFFFFFFFFFF) {
            buf.append(uint8((major << 5) | 27));
            buf.appendInt(value, 8);
        }
    }
    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {
        buf.append(uint8((major << 5) | 31));
    }
    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {
        encodeType(buf, MAJOR_TYPE_INT, value);
    }
    function encodeInt(Buffer.buffer memory buf, int value) internal pure {
        if(value >= 0) {
            encodeType(buf, MAJOR_TYPE_INT, uint(value));
        } else {
            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));
        }
    }
    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {
        encodeType(buf, MAJOR_TYPE_BYTES, value.length);
        buf.append(value);
    }
    function encodeString(Buffer.buffer memory buf, string value) internal pure {
        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);
        buf.append(bytes(value));
    }
    function startArray(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);
    }
    function startMap(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);
    }
    function endSequence(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);
    }
}
/*
End solidity-cborutils
 */
contract usingOraclize {
    uint constant day = 60*60*24;
    uint constant week = 60*60*24*7;
    uint constant month = 60*60*24*30;
    byte constant proofType_NONE = 0x00;
    byte constant proofType_TLSNotary = 0x10;
    byte constant proofType_Ledger = 0x30;
    byte constant proofType_Android = 0x40;
    byte constant proofType_Native = 0xF0;
    byte constant proofStorage_IPFS = 0x01;
    uint8 constant networkID_auto = 0;
    uint8 constant networkID_mainnet = 1;
    uint8 constant networkID_testnet = 2;
    uint8 constant networkID_morden = 2;
    uint8 constant networkID_consensys = 161;
    OraclizeAddrResolverI OAR;
    OraclizeI oraclize;
    modifier oraclizeAPI {
        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))
            oraclize_setNetwork(networkID_auto);
        if(address(oraclize) != OAR.getAddress())
            oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    modifier coupon(string code){
        oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    function oraclize_setNetwork(uint8 networkID) internal returns(bool){
      return oraclize_setNetwork();
      networkID; // silence the warning and remain backwards compatible
    }
    function oraclize_setNetwork() internal returns(bool){
        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet
            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
            oraclize_setNetworkName("eth_mainnet");
            return true;
        }
        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet
            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
            oraclize_setNetworkName("eth_ropsten3");
            return true;
        }
        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet
            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
            oraclize_setNetworkName("eth_kovan");
            return true;
        }
        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet
            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
            oraclize_setNetworkName("eth_rinkeby");
            return true;
        }
        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge
            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
            return true;
        }
        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide
            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
            return true;
        }
        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity
            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
            return true;
        }
        return false;
    }
    function __callback(bytes32 myid, string result) public {
        __callback(myid, result, new bytes(0));
    }
    function __callback(bytes32 myid, string result, bytes proof) public {
      return;
      myid; result; proof; // Silence compiler warnings
    }
    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource);
    }
    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource, gaslimit);
    }
    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(0, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(timestamp, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(0, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_cbAddress() oraclizeAPI internal returns (address){
        return oraclize.cbAddress();
    }
    function oraclize_setProof(byte proofP) oraclizeAPI internal {
        return oraclize.setProofType(proofP);
    }
    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {
        return oraclize.setCustomGasPrice(gasPrice);
    }
    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){
        return oraclize.randomDS_getSessionPubKeyHash();
    }
    function getCodeSize(address _addr) constant internal returns(uint _size) {
        assembly {
            _size := extcodesize(_addr)
        }
    }
    function parseAddr(string _a) internal pure returns (address){
        bytes memory tmp = bytes(_a);
        uint160 iaddr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i=2; i<2+2*20; i+=2){
            iaddr *= 256;
            b1 = uint160(tmp[i]);
            b2 = uint160(tmp[i+1]);
            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;
            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;
            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;
            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;
            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;
            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;
            iaddr += (b1*16+b2);
        }
        return address(iaddr);
    }
    function strCompare(string _a, string _b) internal pure returns (int) {
        bytes memory a = bytes(_a);
        bytes memory b = bytes(_b);
        uint minLength = a.length;
        if (b.length < minLength) minLength = b.length;
        for (uint i = 0; i < minLength; i ++)
            if (a[i] < b[i])
                return -1;
            else if (a[i] > b[i])
                return 1;
        if (a.length < b.length)
            return -1;
        else if (a.length > b.length)
            return 1;
        else
            return 0;
    }
    function indexOf(string _haystack, string _needle) internal pure returns (int) {
        bytes memory h = bytes(_haystack);
        bytes memory n = bytes(_needle);
        if(h.length < 1 || n.length < 1 || (n.length > h.length))
            return -1;
        else if(h.length > (2**128 -1))
            return -1;
        else
        {
            uint subindex = 0;
            for (uint i = 0; i < h.length; i ++)
            {
                if (h[i] == n[0])
                {
                    subindex = 1;
                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])
                    {
                        subindex++;
                    }
                    if(subindex == n.length)
                        return int(i);
                }
            }
            return -1;
        }
    }
    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _be = bytes(_e);
        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
        bytes memory babcde = bytes(abcde);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];
        return string(babcde);
    }
    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {
        return strConcat(_a, _b, _c, _d, "");
    }
    function strConcat(string _a, string _b, string _c) internal pure returns (string) {
        return strConcat(_a, _b, _c, "", "");
    }
    function strConcat(string _a, string _b) internal pure returns (string) {
        return strConcat(_a, _b, "", "", "");
    }
    // parseInt
    function parseInt(string _a) internal pure returns (uint) {
        return parseInt(_a, 0);
    }
    // parseInt(parseFloat*10^_b)
    function parseInt(string _a, uint _b) internal pure returns (uint) {
        bytes memory bresult = bytes(_a);
        uint mint = 0;
        bool decimals = false;
        for (uint i=0; i<bresult.length; i++){
            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){
                if (decimals){
                   if (_b == 0) break;
                    else _b--;
                }
                mint *= 10;
                mint += uint(bresult[i]) - 48;
            } else if (bresult[i] == 46) decimals = true;
        }
        if (_b > 0) mint *= 10**_b;
        return mint;
    }
    function uint2str(uint i) internal pure returns (string){
        if (i == 0) return "0";
        uint j = i;
        uint len;
        while (j != 0){
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (i != 0){
            bstr[k--] = byte(48 + i % 10);
            i /= 10;
        }
        return string(bstr);
    }
    using CBOR for Buffer.buffer;
    function stra2cbor(string[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeString(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    function ba2cbor(bytes[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeBytes(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    string oraclize_network_name;
    function oraclize_setNetworkName(string _network_name) internal {
        oraclize_network_name = _network_name;
    }
    function oraclize_getNetworkName() internal view returns (string) {
        return oraclize_network_name;
    }
    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){
        require((_nbytes > 0) && (_nbytes <= 32));
        // Convert from seconds to ledger timer ticks
        _delay *= 10;
        bytes memory nbytes = new bytes(1);
        nbytes[0] = byte(_nbytes);
        bytes memory unonce = new bytes(32);
        bytes memory sessionKeyHash = new bytes(32);
        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
        assembly {
            mstore(unonce, 0x20)
            // the following variables can be relaxed
            // check relaxed random contract under ethereum-examples repo
            // for an idea on how to override and replace comit hash vars
            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))
            mstore(sessionKeyHash, 0x20)
            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)
        }
        bytes memory delay = new bytes(32);
        assembly {
            mstore(add(delay, 0x20), _delay)
        }
        bytes memory delay_bytes8 = new bytes(8);
        copyBytes(delay, 24, 8, delay_bytes8, 0);
        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];
        bytes32 queryId = oraclize_query("random", args, _customGasLimit);
        bytes memory delay_bytes8_left = new bytes(8);
        assembly {
            let x := mload(add(delay_bytes8, 0x20))
            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))
        }
        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));
        return queryId;
    }
    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {
        oraclize_randomDS_args[queryId] = commitment;
    }
    mapping(bytes32=>bytes32) oraclize_randomDS_args;
    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;
    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){
        bool sigok;
        address signer;
        bytes32 sigr;
        bytes32 sigs;
        bytes memory sigr_ = new bytes(32);
        uint offset = 4+(uint(dersig[3]) - 0x20);
        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);
        bytes memory sigs_ = new bytes(32);
        offset += 32 + 2;
        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);
        assembly {
            sigr := mload(add(sigr_, 32))
            sigs := mload(add(sigs_, 32))
        }
        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);
        if (address(keccak256(pubkey)) == signer) return true;
        else {
            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);
            return (address(keccak256(pubkey)) == signer);
        }
    }
    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {
        bool sigok;
        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)
        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);
        copyBytes(proof, sig2offset, sig2.length, sig2, 0);
        bytes memory appkey1_pubkey = new bytes(64);
        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);
        bytes memory tosign2 = new bytes(1+65+32);
        tosign2[0] = byte(1); //role
        copyBytes(proof, sig2offset-65, 65, tosign2, 1);
        bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);
        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);
        if (sigok == false) return false;
        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)
        bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
        bytes memory tosign3 = new bytes(1+65);
        tosign3[0] = 0xFE;
        copyBytes(proof, 3, 65, tosign3, 1);
        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);
        copyBytes(proof, 3+65, sig3.length, sig3, 0);
        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);
        return sigok;
    }
    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        require((_proof[0] == "L") && (_proof[1] == "P") && (_proof[2] == 1));
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        require(proofVerified);
        _;
    }
    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        if ((_proof[0] != "L")||(_proof[1] != "P")||(_proof[2] != 1)) return 1;
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        if (proofVerified == false) return 2;
        return 0;
    }
    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){
        bool match_ = true;
        require(prefix.length == n_random_bytes);
        for (uint256 i=0; i< n_random_bytes; i++) {
            if (content[i] != prefix[i]) match_ = false;
        }
        return match_;
    }
    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){
        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)
        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;
        bytes memory keyhash = new bytes(32);
        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);
        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;
        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);
        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);
        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)
        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;
        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.
        // This is to verify that the computed args match with the ones specified in the query.
        bytes memory commitmentSlice1 = new bytes(8+1+32);
        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);
        bytes memory sessionPubkey = new bytes(64);
        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;
        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);
        bytes32 sessionPubkeyHash = sha256(sessionPubkey);
        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match
            delete oraclize_randomDS_args[queryId];
        } else return false;
        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)
        bytes memory tosign1 = new bytes(32+8+1+32);
        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);
        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;
        // verify if sessionPubkeyHash was verified already, if not.. let's do it!
        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){
            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);
        }
        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {
        uint minLength = length + toOffset;
        // Buffer too small
        require(to.length >= minLength); // Should be a better way?
        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables
        uint i = 32 + fromOffset;
        uint j = 32 + toOffset;
        while (i < (32 + fromOffset + length)) {
            assembly {
                let tmp := mload(add(from, i))
                mstore(add(to, j), tmp)
            }
            i += 32;
            j += 32;
        }
        return to;
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    // Duplicate Solidity's ecrecover, but catching the CALL return value
    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {
        // We do our own memory management here. Solidity uses memory offset
        // 0x40 to store the current end of memory. We write past it (as
        // writes are memory extensions), but don't update the offset so
        // Solidity will reuse it. The memory used here is only needed for
        // this context.
        // FIXME: inline assembly can't access return values
        bool ret;
        address addr;
        assembly {
            let size := mload(0x40)
            mstore(size, hash)
            mstore(add(size, 32), v)
            mstore(add(size, 64), r)
            mstore(add(size, 96), s)
            // NOTE: we can reuse the request memory because we deal with
            //       the return code
            ret := call(3000, 1, 0, size, 128, size, 32)
            addr := mload(size)
        }
        return (ret, addr);
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {
        bytes32 r;
        bytes32 s;
        uint8 v;
        if (sig.length != 65)
          return (false, 0);
        // The signature format is a compact form of:
        //   {bytes32 r}{bytes32 s}{uint8 v}
        // Compact means, uint8 is not padded to 32 bytes.
        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            // Here we are loading the last 32 bytes. We exploit the fact that
            // 'mload' will pad with zeroes if we overread.
            // There is no 'mload8' to do this, but that would be nicer.
            v := byte(0, mload(add(sig, 96)))
            // Alternative solution:
            // 'byte' is not working due to the Solidity parser, so lets
            // use the second best option, 'and'
            // v := and(mload(add(sig, 65)), 255)
        }
        // albeit non-transactional signatures are not specified by the YP, one would expect it
        // to match the YP range of [27, 28]
        //
        // geth uses [0, 1] and some clients have followed. This might change, see:
        //  https://github.com/ethereum/go-ethereum/issues/2053
        if (v < 27)
          v += 27;
        if (v != 27 && v != 28)
            return (false, 0);
        return safer_ecrecover(hash, v, r, s);
    }
    function safeMemoryCleaner() internal pure {
        assembly {
            let fmem := mload(0x40)
            codecopy(fmem, codesize, sub(msize, fmem))
        }
    }
}
// </ORACLIZE_API>
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
contract SafeMath {
/**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
  */
  constructor() public {
    owner = msg.sender;
  }
  /**
    * @dev Throws if called by any account other than the owner.
  */
  modifier onlyOwner() {
    require(msg.sender == owner, "sender is not owner");
    _;
  }
  /**
    * @dev Allows the current owner to transfer control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
  */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0), "newOwner addres is zero");
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
contract lottery is Ownable, usingOraclize, SafeMath {
  /*
    * checks only Drawer address is calling
  */
  modifier onlyDrawer() {
    require(msg.sender == drawerAddress || msg.sender == owner, "sender is not drawerAddress");
    _;
  }
  /*
    * checks address is zero or not.
  */
  modifier isAddressZero {
    require(msg.sender != address(0), "new address is zero");
    _;
  }
  struct Game {
    uint endTime;
    uint ticketPrice;
    uint accumJackpotAmounts;
    bytes winningNumbers;
    bytes32 queryId;
    Ticket[] tickets;
    string hashString;
    mapping (byte => bool) winNumMapping;
    mapping (address => uint) playerTicketCount;
    mapping (uint => uint) winPlayersCount;
    mapping (uint => bool) winners;
  }
  struct Ticket {
    uint256 time;
    address player;
    bytes   numbers;
  }
  address public adminAddress;
  address public drawerAddress;
  address public feeAddress;
  bool public gameStatus;
  uint public adminFee;
  uint public gameNumber;
  uint public numbersStart;
  uint public numbersCount;
  uint public numbersCountMax;
  uint public ticketPrice;
  uint public prizeStart;
  uint public prizeNumCount;
  uint[] public winPercent;
  uint public orclizeGasPrice;
  mapping (uint => Game) public games;
  // For Players Event
  event LogBuyTicket(uint _time, address _player, bytes _numbers, uint _count, uint _ticketTotalCount);
  // For Owner Event
  event LogEndGameBegin(bool _success);
  event LogEndGameSuccess(bool _success);
  event LogEndGameFail(bool _success);
  event LogStartNewGame(bool _start, uint _gameNumber, bytes _winNumbers);
  constructor() public payable {
    // sets the Ledger authenticity proof in the constructor
    oraclize_setProof(proofType_Ledger);
    // Lottery numbers range ( numbersStart <= gameNumbers <= numbersCountMax)
    numbersStart = 1;
    numbersCount = 5;
    numbersCountMax = 25;
    ticketPrice = .01 ether;
    winPercent = [0, 0, 0, 20, 20, 60];
    prizeStart = 3;   //winPercent Index start
    prizeNumCount = 3;
    // operator`s fee 10%
    adminAddress = msg.sender;
    drawerAddress = 0xd36C57086c9fC2d06C3009207F0d4D818CAc4F63;
    feeAddress = 0x798F4A40dc6C45a812f1549402E3D9E5BA5fc9a5;
    adminFee = 10;
    gameStatus = true;
    games[gameNumber].ticketPrice = ticketPrice;
    // oraclize paramaters
    orclizeGasPrice = 400000;
  }
  /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/
  function setAdminAddress(address _admin) public onlyOwner isAddressZero {
    adminAddress = _admin;
  }
  function setDrawerAddress(address _drawer) public onlyOwner isAddressZero {
    drawerAddress = _drawer;
  }
  function setFeeAddress(address _feeAddr) public onlyOwner isAddressZero {
    feeAddress = _feeAddr;
  }
  function setAdminFee(uint _fee) public onlyOwner isAddressZero {
    require(_fee >= 0, "Fee is under 0");
    adminFee = _fee;
  }
  function setTicketPrice(uint _price) public onlyOwner isAddressZero {
    require(_price >= 0, "Price is under 0");
    ticketPrice = _price;
  }
  function kill() public onlyOwner isAddressZero {
    selfdestruct(owner);
  }
  function startGame(uint _carryOverJackpot, uint[] _totalWinCount) external onlyDrawer {
    // Set game win players count.
    for(uint i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < _totalWinCount[i]) {
        games[gameNumber].winPlayersCount[i] = _totalWinCount[i];
      }
    }
    // Start New Game.
    gameNumber++;
    games[gameNumber].ticketPrice = ticketPrice;
    games[gameNumber].accumJackpotAmounts = _carryOverJackpot;
    gameStatus = true;
    emit LogStartNewGame(gameStatus, gameNumber-1, games[gameNumber-1].winningNumbers);
  }
  function endGame() external onlyDrawer {
    gameStatus = false;
    uint numberOfBytes = 28; // number of random bytes we want the datasource to return
    uint delay = 0; // number of seconds to wait before the execution takes place
    uint callbackGas = orclizeGasPrice; // amount of gas we want Oraclize to set for the callback function
    // this function internally generates the correct oraclize_query and returns its queryId
    games[gameNumber].queryId = oraclize_newRandomDSQuery(delay, numberOfBytes, callbackGas);
    emit LogEndGameBegin(true);
  }
  function buyTicket(bytes _ticketNumber, uint _ticketCount) external payable {
    require(gameStatus, "game is processing sth");
    require(_ticketCount > 0, "ticket count should be not under 0");
    require(msg.value == mul(ticketPrice, _ticketCount), "ticket price is not equal");
    require(_ticketNumber.length == mul(numbersCount, _ticketCount), "ticket number`s length is not match");
    bytes memory pickNumbers = new bytes(numbersCount);
    for(uint i = 0; i < _ticketCount; i++) {
      for(uint j = 0; j < numbersCount; j++) {
        pickNumbers[j] = _ticketNumber[j + (numbersCount * i)];
        require(checkPickNumbers(pickNumbers[j]), "player`s pick number is wrong");
      }
      require(checkDuplicates(pickNumbers), "Lottery Numbers are duplicated");
      games[gameNumber].tickets.push(Ticket(block.timestamp, msg.sender, pickNumbers));
      games[gameNumber].playerTicketCount[msg.sender]++;
    }
    emit LogBuyTicket(block.timestamp, msg.sender, _ticketNumber, _ticketCount, games[gameNumber].tickets.length);
  }
  function getGameHistory(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint accumJackpot,
      uint ticketCount,
      uint adminFee,
      uint[] winningPercent,
      uint[] winPlayersCount,
      uint[] winNumbers
  ) {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    winNumbers = new uint[](numbersCount);
    winningPercent = new uint[](numbersCount + 1);
    winPlayersCount = new uint[](numbersCount + 1);
    uint numbersIndex;
    // save endtime and jackpot.
    endTime = games[_gameNumber].endTime;
    ticketCount = tickets.length;
    winningPercent = winPercent;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    adminFee = adminFee;
    // save game win numbers.
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        winNumbers[numbersIndex++] = i;
      }
    }
    // save game winners
    for(i = prizeStart; i < numbersCount + 1; i++) {
      winPlayersCount[i] = games[_gameNumber].winPlayersCount[i];
    }
  }
  function getPlayerAllTickets(address _player, uint _start, uint _end) external view 
    returns (
      uint[] winNumbers,
      uint[] myTickets
    )
  {
    require(_player != address(0),"address should be not 0");
    winNumbers = new uint[]((_end - _start) * numbersCount);
    uint winNumbersIndex;
    uint playerTicketIndex;
    uint playerTicketCount;
    // get all game win numbers.
    for(uint i = _start; i < _end; i++) {
      playerTicketCount += games[i].playerTicketCount[_player];
      for(uint j = 1; j < numbersCountMax + 1; j++) {
        if(games[i].winNumMapping[byte(j)]) {
          winNumbers[winNumbersIndex++] = j;
        }
      }
    }
    // get all player tickets.
    // numbersCount + 1 for gameNumber
    myTickets = new uint[](playerTicketCount * (numbersCount + 1));
    for(i = _start; i < _end; i++) {
      for(j = 0; j < games[i].tickets.length; j++) {
        if(games[i].tickets[j].player == _player) {
          // set Game Number
          myTickets[playerTicketIndex++] = i;
          // set Player Numbers
          for(uint k = 0; k < numbersCount; k++) {
            myTickets[playerTicketIndex++] = uint(games[i].tickets[j].numbers[k]);
          }
        }
      }
    }
  }
  function getPlayerTickets(address _player, uint _gameNumber) external view 
    returns (
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(_player != address(0),"address should be not 0");
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    numbers = new uint[](games[_gameNumber].playerTicketCount[_player] * numbersCount);
    time = new uint[](games[_gameNumber].playerTicketCount[_player]);
    uint timeIndex;
    uint numbersIndex;
    for(uint i = 0; i < tickets.length; i++) {
      if(tickets[i].player == _player) {
        time[timeIndex++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameWinners(uint _gameNumber) 
    external 
    view 
    returns (
      address[] player,
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    uint length;
    for(uint i = prizeStart; i < numbersCount + 1; i++){
      length += games[_gameNumber].winPlayersCount[i];
    }
    Ticket[] memory tickets = games[_gameNumber].tickets;
    player = new address[](length);
    time = new uint[](length);
    numbers = new uint[](length * numbersCount);
    uint index;
    uint numbersIndex;
    for(i = 0; i < tickets.length; i++) {
      if(games[_gameNumber].winners[i]) {
        player[index] = tickets[i].player;
        time[index++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameDetails(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint ticketPrice,
      uint ticketCount,
      uint accumJackpot,
      uint[] gameReward,
      uint[] numbers
    ) 
  {
    require(_gameNumber >= 0, "Game Number should be over 0");
    numbers = new uint[](numbersCount);
    gameReward = new uint[](numbersCount + 1);
    uint index;
    endTime = games[_gameNumber].endTime;
    ticketPrice = games[_gameNumber].ticketPrice;
    ticketCount = games[_gameNumber].tickets.length;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    gameReward = winPercent;
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        numbers[index++] = i;
      }
    }
  }
  function __callback(bytes32 _queryId, string _result, bytes _proof) public
  {
    require(msg.sender == oraclize_cbAddress(), "Should be eqaul to request");
    if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) == 0) {
      if(games[gameNumber].queryId == _queryId) {
        games[gameNumber].endTime = block.timestamp;
        uint jackpot = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice);// + games[gameNumber].accumJackpotAmounts;
        // send ethereum for operation cost.
        if(jackpot > 0) {
          feeAddress.transfer((jackpot * adminFee) / 100);
        }
        games[gameNumber].hashString = _result;
        games[gameNumber].winningNumbers = generateRandom(games[gameNumber].hashString, numbersCount, numbersCountMax);
        for (uint i = 0; i < games[gameNumber].winningNumbers.length; i++) {
          games[gameNumber].winNumMapping[games[gameNumber].winningNumbers[i]] = true;
        }
        emit LogEndGameSuccess(true);
      }
    }
    else {
      emit LogEndGameFail(false);
    }
  }
  function getGameDrawInfos() external view 
    returns (
      uint carryOverJackpot,
      uint totalTicketCount,
      uint totalWinPlayersCount,
      uint[] totalWinCount,
      uint[] playersAmounts
    ) 
  {
    uint jackpotAmounts = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice) + games[gameNumber].accumJackpotAmounts;
    jackpotAmounts -= ((games[gameNumber].tickets.length * games[gameNumber].ticketPrice) * adminFee) / 100;
    totalWinCount = new uint[](numbersCount + 1);
    playersAmounts = new uint[](numbersCount + 1);
    uint winNumberCount;
    uint sendedJackpotAmounts;
    // 1. pick win players.
    for(uint i = 0; i < games[gameNumber].tickets.length; i++) {
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if( games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])] ) {
          winNumberCount++;
        }
      }
      // 2. Win players counting.
      if(prizeStart <= winNumberCount) {
        totalWinCount[winNumberCount]++;
        totalWinPlayersCount++;
      }
      winNumberCount = 0;
    }
    // 3. calculate winners prizes.
    for(i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < totalWinCount[i]) {
        playersAmounts[i] = (jackpotAmounts * winPercent[i] / 100) / totalWinCount[i];
        sendedJackpotAmounts += (jackpotAmounts * winPercent[i] / 100);
      }
    }
    // 4. Set to carry over jackpot amounts.
    carryOverJackpot = jackpotAmounts - sendedJackpotAmounts;
    // 5. Set Total Ticket Count.
    totalTicketCount = games[gameNumber].tickets.length;
  }
  function getWinners(uint _start, uint _end) external view 
    returns (
      uint[] index,
      uint[] winCount
    ) 
  {
    uint ticketIndex;
    uint winNumberCount;
    index = new uint[](getWinnersCount(_start, _end));
    winCount = new uint[](getWinnersCount(_start, _end));
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // set winners
      if(prizeStart <= winNumberCount) {
        index[ticketIndex] = i;
        winCount[ticketIndex++] = winNumberCount;
      }
      winNumberCount = 0;
    }
  }
  function () public payable {
  }
  function sendRewardToPlayers(uint[] _winnerIndex, uint[] _winReward) external onlyDrawer {
    require(_winnerIndex.length > 0, "winner index is empty");
    require(_winReward.length > 0, "win numbers count is empty");
    for(uint i = 0; i < _winnerIndex.length; i++) {
      games[gameNumber].winners[_winnerIndex[i]] = true;
      games[gameNumber].tickets[_winnerIndex[i]].player.transfer(_winReward[i]);
    }
  }
  function generateRandom(string _stringHash, uint numbersCount, uint numbersCountMax) 
    internal
    pure 
    returns (
      bytes
    ) 
  {
    bytes32 random = keccak256(_stringHash);
    bytes memory allNumbers = new bytes(numbersCountMax);
    bytes memory winNumbers = new bytes(numbersCount);
    for (uint i = 0; i < numbersCountMax; i++) {
      allNumbers[i] = byte(i + 1);
    }
    for (i = 0; i < numbersCount; i++) {
      uint n = numbersCountMax - i;
      uint r = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % n;
      winNumbers[i] = allNumbers[r];
      allNumbers[r] = allNumbers[n - 1];
    }
    return winNumbers;
  }
  function getWinnersCount(uint _start, uint _end) internal view returns (uint ret) 
  {
    uint winNumberCount;
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // increase winner players count
      if(prizeStart <= winNumberCount) {
        ret++;
      }
      winNumberCount = 0;
    }
  }
  function checkPickNumbers(byte _number) internal returns (bool) {
    if(numbersStart <= uint(_number) && uint(_number) <= numbersCountMax) {
      return true;
    } else {
      return false;
    }
  }
  function checkDuplicates(bytes _array) internal pure returns (bool) {
    for (uint i = 0; i < _array.length - 1; i++) {
      for (uint j = i + 1; j < _array.length; j++) {
        if (_array[i] == _array[j]) return false;
      }
    }
    return true;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"games","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"accumJackpotAmounts","type":"uint256"},{"name":"winningNumbers","type":"bytes"},{"name":"queryId","type":"bytes32"},{"name":"hashString","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ticketPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"}],"name":"setTicketPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameDetails","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"gameReward","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameWinners","outputs":[{"name":"player","type":"address[]"},{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"myid","type":"bytes32"},{"name":"result","type":"string"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getWinners","outputs":[{"name":"index","type":"uint256[]"},{"name":"winCount","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_admin","type":"address"}],"name":"setAdminAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"drawerAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_winnerIndex","type":"uint256[]"},{"name":"_winReward","type":"uint256[]"}],"name":"sendRewardToPlayers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_queryId","type":"bytes32"},{"name":"_result","type":"string"},{"name":"_proof","type":"bytes"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feeAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"winPercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_ticketNumber","type":"bytes"},{"name":"_ticketCount","type":"uint256"}],"name":"buyTicket","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getGameDrawInfos","outputs":[{"name":"carryOverJackpot","type":"uint256"},{"name":"totalTicketCount","type":"uint256"},{"name":"totalWinPlayersCount","type":"uint256"},{"name":"totalWinCount","type":"uint256[]"},{"name":"playersAmounts","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"endGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"gameStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"numbersStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"orclizeGasPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_feeAddr","type":"address"}],"name":"setFeeAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_fee","type":"uint256"}],"name":"setAdminFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getPlayerAllTickets","outputs":[{"name":"winNumbers","type":"uint256[]"},{"name":"myTickets","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_gameNumber","type":"uint256"}],"name":"getPlayerTickets","outputs":[{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameHistory","outputs":[{"name":"endTime","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"adminFee","type":"uint256"},{"name":"winningPercent","type":"uint256[]"},{"name":"winPlayersCount","type":"uint256[]"},{"name":"winNumbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_drawer","type":"address"}],"name":"setDrawerAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_carryOverJackpot","type":"uint256"},{"name":"_totalWinCount","type":"uint256[]"}],"name":"startGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"gameNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeNumCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCountMax","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_time","type":"uint256"},{"indexed":false,"name":"_player","type":"address"},{"indexed":false,"name":"_numbers","type":"bytes"},{"indexed":false,"name":"_count","type":"uint256"},{"indexed":false,"name":"_ticketTotalCount","type":"uint256"}],"name":"LogBuyTicket","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameBegin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameFail","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_start","type":"bool"},{"indexed":false,"name":"_gameNumber","type":"uint256"},{"indexed":false,"name":"_winNumbers","type":"bytes"}],"name":"LogStartNewGame","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0xa85ded59ef1824154615bf2a88d136d1356839ac
Contract Name: Lottery
Contract_Source_Code: 
pragma solidity ^0.4.24;
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}
contract Lottery {
    using SafeMath for uint256;
    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%
    uint256[] public DAILY_INTEREST = [111, 133, 222, 333, 444];        // 1.11%, 2.22%, 3.33%, 4.44%
    uint256 public MARKETING_AND_TEAM_FEE = 1000;                       // 10%
    uint256 public referralPercents = 1000;                             // 10%
    uint256 constant public MAX_DIVIDEND_RATE = 25000;                  // 250%
    uint256 constant public MINIMUM_DEPOSIT = 100 finney;               // 0.1 eth
    uint256 public wave = 0;
    struct Deposit {
        uint256 amount;
        uint256 interest;
        uint256 withdrawedRate;
    }
    struct User {
        address referrer;
        uint256 referralAmount;
        uint256 firstTime;
        uint256 lastPayment;
        Deposit[] deposits;
        uint256 referBonus;
    }
    address public marketingAndTeam = 0xFaea7fa229C29526698657e7Ab7063E20581A50c; // need to change
    address public owner = 0x4e3e605b9f7b333e413E1CD9E577f2eba447f876;
    mapping(uint256 => mapping(address => User)) public users;
    event InvestorAdded(address indexed investor);
    event ReferrerAdded(address indexed investor, address indexed referrer);
    event DepositAdded(address indexed investor, uint256 indexed depositsCount, uint256 amount);
    event UserDividendPayed(address indexed investor, uint256 dividend);
    event DepositDividendPayed(address indexed investor, uint256 indexed index, uint256 deposit, uint256 totalPayed, uint256 dividend);
    event FeePayed(address indexed investor, uint256 amount);
    event BalanceChanged(uint256 balance);
    event NewWave();
    function() public payable {
        if(msg.value == 0) {
            // Dividends
            withdrawDividends();
            return;
        }
        // Deposit
        doInvest();
    }
    function withdrawDividends() internal {
        uint256 dividendsSum = getDividends(msg.sender);
        require(dividendsSum > 0);
        if (address(this).balance <= dividendsSum) {
            wave = wave.add(1);
            dividendsSum = address(this).balance;
            emit NewWave();
        }
        msg.sender.transfer(dividendsSum);
        emit UserDividendPayed(msg.sender, dividendsSum);
        emit BalanceChanged(address(this).balance);
    }
    function getDividends(address wallet) internal returns(uint256 sum) {
        User storage user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawRate = dividendRate(msg.sender, i);
            user.deposits[i].withdrawedRate = user.deposits[i].withdrawedRate.add(withdrawRate);
            sum = sum.add(user.deposits[i].amount.mul(withdrawRate).div(ONE_HUNDRED_PERCENTS));
            emit DepositDividendPayed(
                msg.sender,
                i,
                user.deposits[i].amount,
                user.deposits[i].amount.mul(user.deposits[i].withdrawedRate.div(ONE_HUNDRED_PERCENTS)),
                user.deposits[i].amount.mul(withdrawRate.div(ONE_HUNDRED_PERCENTS))
            );
        }
        user.lastPayment = now;
        sum = sum.add(user.referBonus);
        user.referBonus = 0;
    }
    function dividendRate(address wallet, uint256 index) internal view returns(uint256 rate) {
        User memory user = users[wave][wallet];
        uint256 duration = now.sub(user.lastPayment);
        rate = user.deposits[index].interest.mul(duration).div(1 days);
        uint256 leftRate = MAX_DIVIDEND_RATE.sub(user.deposits[index].withdrawedRate);
        rate = min(rate, leftRate);
    }
    function doInvest() internal {
        uint256 investment = msg.value;
        require (investment >= MINIMUM_DEPOSIT);
        User storage user = users[wave][msg.sender];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(msg.sender);
        }
        // Add referral if possible
        if (user.referrer == address(0) && msg.data.length == 20 && user.firstTime == now) {
            address newReferrer = _bytesToAddress(msg.data);
            if (newReferrer != address(0) && newReferrer != msg.sender && users[wave][newReferrer].firstTime > 0) {
                user.referrer = newReferrer;
                emit ReferrerAdded(msg.sender, newReferrer);
            }
        }
        // Referrers fees
        if (user.referrer != address(0)) {
            uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
            users[wave][user.referrer].referralAmount = users[wave][user.referrer].referralAmount.add(investment);
            users[wave][user.referrer].referBonus = users[wave][user.referrer].referBonus.add(refAmount);
        }
        // Reinvest
        investment = investment.add(getDividends(msg.sender));
        // Create deposit
        user.deposits.push(Deposit({
            amount: investment,
            interest: getUserInterest(msg.sender),
            withdrawedRate: 0
        }));
        emit DepositAdded(msg.sender, user.deposits.length, investment);
        // Marketing and Team fee
        uint256 marketingAndTeamFee = msg.value.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
        marketingAndTeam.transfer(marketingAndTeamFee);
        emit FeePayed(msg.sender, marketingAndTeamFee);
        emit BalanceChanged(address(this).balance);
    }
    function getUserInterest(address wallet) public view returns (uint256) {
        User memory user = users[wave][wallet];
        if (user.referralAmount < 1 ether) {
            if(user.referrer == address(0)) return DAILY_INTEREST[0];
            return DAILY_INTEREST[1];
        } else if (user.referralAmount < 10 ether) {
            return DAILY_INTEREST[2];
        } else if (user.referralAmount < 20 ether) {
            return DAILY_INTEREST[3];
        } else {
            return DAILY_INTEREST[4];
        }
    }
    function _bytesToAddress(bytes data) private pure returns(address addr) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            addr := mload(add(data, 20)) 
        }
    }
    function min(uint256 a, uint256 b) internal pure returns(uint256) {
        if(a < b) return a;
        return b;
    }
    function dividendsSumForUser(address wallet) external view returns(uint256 dividendsSum) {
        User memory user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawAmount = user.deposits[i].amount.mul(dividendRate(wallet, i)).div(ONE_HUNDRED_PERCENTS);
            dividendsSum = dividendsSum.add(withdrawAmount);
        }
        dividendsSum = dividendsSum.add(user.referBonus);
        dividendsSum = min(dividendsSum, address(this).balance);
    }
    function changeInterest(uint256[] interestList) external {
        require(address(msg.sender) == owner);
        DAILY_INTEREST = interestList;
    }
    function changeTeamFee(uint256 feeRate) external {
        require(address(msg.sender) == owner);
        MARKETING_AND_TEAM_FEE = feeRate;
    }
    function virtualInvest(address from, uint256 amount) public {
        require(address(msg.sender) == owner);
        User storage user = users[wave][from];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(from);
        }
        // Reinvest
        amount = amount.add(getDividends(from));
        user.deposits.push(Deposit({
            amount: amount,
            interest: getUserInterest(from),
            withdrawedRate: 0
        }));
        emit DepositAdded(from, user.deposits.length, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"feeRate","type":"uint256"}],"name":"changeTeamFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"marketingAndTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"DAILY_INTEREST","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"wave","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"amount","type":"uint256"}],"name":"virtualInvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"ONE_HUNDRED_PERCENTS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MARKETING_AND_TEAM_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"address"}],"name":"users","outputs":[{"name":"referrer","type":"address"},{"name":"referralAmount","type":"uint256"},{"name":"firstTime","type":"uint256"},{"name":"lastPayment","type":"uint256"},{"name":"referBonus","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"getUserInterest","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MAX_DIVIDEND_RATE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"referralPercents","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"interestList","type":"uint256[]"}],"name":"changeInterest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"dividendsSumForUser","outputs":[{"name":"dividendsSum","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MINIMUM_DEPOSIT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"}],"name":"InvestorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"referrer","type":"address"}],"name":"ReferrerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"depositsCount","type":"uint256"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"DepositAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"UserDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"index","type":"uint256"},{"indexed":false,"name":"deposit","type":"uint256"},{"indexed":false,"name":"totalPayed","type":"uint256"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"DepositDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"FeePayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"balance","type":"uint256"}],"name":"BalanceChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"NewWave","type":"event"}]
Contract_Creation_Code_16:
608060405260a060405190810160405280606f61ffff168152602001608561ffff16815260200160de61ffff16815260200161014d61ffff1681526020016101bc61ffff1681525060009060056200005992919062000129565b506103e86001556103e8600255600060035573faea7fa229c29526698657e7ab7063e20581a50c600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550734e3e605b9f7b333e413e1cd9e577f2eba447f876600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200012257600080fd5b50620001a9565b8280548282559060005260206000209081019282156200016e579160200282015b828111156200016d578251829061ffff169055916020019190600101906200014a565b5b5090506200017d919062000181565b5090565b620001a691905b80821115620001a257600081600090555060010162000188565b5090565b90565b611d1580620001b96000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063072419f4146100fc5780630947140f1461012957806331ddcc57146101805780636fe15b44146101c15780637247a50d146101ec57806375272043146102395780638da5cb5b14610264578063a1215b3e146102bb578063b9d02df4146102e6578063bf8853c61461038f578063d0056f89146103e6578063e623f34714610411578063ea727ba21461043c578063ebe4c0d114610477578063f19451d8146104ce575b60003414156100f1576100ec6104f9565b6100fa565b6100f961067e565b5b005b34801561010857600080fd5b5061012760048036038101908080359060200190929190505050610e32565b005b34801561013557600080fd5b5061013e610e98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018c57600080fd5b506101ab60048036038101908080359060200190929190505050610ebe565b6040518082815260200191505060405180910390f35b3480156101cd57600080fd5b506101d6610ee1565b6040518082815260200191505060405180910390f35b3480156101f857600080fd5b50610237600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ee7565b005b34801561024557600080fd5b5061024e6110e9565b6040518082815260200191505060405180910390f35b34801561027057600080fd5b506102796110ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c757600080fd5b506102d0611115565b6040518082815260200191505060405180910390f35b3480156102f257600080fd5b5061033160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111b565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561039b57600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117e565b6040518082815260200191505060405180910390f35b3480156103f257600080fd5b506103fb611405565b6040518082815260200191505060405180910390f35b34801561041d57600080fd5b5061042661140b565b6040518082815260200191505060405180910390f35b34801561044857600080fd5b50610475600480360381019080803590602001908201803590602001919091929391929390505050611411565b005b34801561048357600080fd5b506104b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611483565b6040518082815260200191505060405180910390f35b3480156104da57600080fd5b506104e36116b5565b6040518082815260200191505060405180910390f35b6000610504336116c1565b905060008111151561051557600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311115156105985761054b600160035461196790919063ffffffff16565b6003819055503073ffffffffffffffffffffffffffffffffffffffff163190507f2fc830d94028b298fd4b7dbe301cdf47799bd13849d7ca4b6f47f199560adc0d60405160405180910390a15b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105de573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f5e93d015f6a0a56fff61b5083f27af603f38199c6135fdc2bccf87274d40696c826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a150565b600080600080600034945067016345785d8a000085101515156106a057600080fd5b60066000600354815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600084600201541415610757574284600201819055504284600301819055503373ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156107bb575060146000369050145b80156107ca5750428460020154145b1561097b5761080b6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611983565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561087657503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156108d75750600060066000600354815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154115b1561097a57828460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fec49a3c8c4ae06c18160fe86119c381c9d213ac3e052ff35b594da8687b193c760405160405180910390a35b5b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c13576109fe6127106109f06002548861199190919063ffffffff16565b6119c990919063ffffffff16565b9150610a8c8560066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610b958260066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055505b610c2e610c1f336116c1565b8661196790919063ffffffff16565b945083600401606060405190810160405280878152602001610c4f3361117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505083600401805490503373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808876040518082815260200191505060405180910390a3610d24612710610d166001543461199190919063ffffffff16565b6119c990919063ffffffff16565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d8e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2899dc8c12def1caa9accb64257cf2fd9f960f21bb27a560a757eae3c2ec43c1826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a15050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8e57600080fd5b8060018190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481101515610ecd57fe5b906000526020600020016000915090505481565b60035481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4557600080fd5b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600201541415610ffc574281600201819055504281600301819055508273ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b611017611008846116c1565b8361196790919063ffffffff16565b9150806004016060604051908101604052808481526020016110388661117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505080600401805490508373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808846040518082815260200191505060405180910390a3505050565b61271081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060050154905085565b6000611188611c2a565b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156112d057838290600052602060002090600302016060604051908101604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061127f565b5050505081526020016005820154815250509050670de0b6b3a76400008160200151101561137457600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156113525760008081548110151561134057fe5b906000526020600020015491506113ff565b6000600181548110151561136257fe5b906000526020600020015491506113ff565b678ac7230489e80000816020015110156113aa576000600281548110151561139857fe5b906000526020600020015491506113ff565b6801158e460913d00000816020015110156113e157600060038154811015156113cf57fe5b906000526020600020015491506113ff565b600060048154811015156113f157fe5b906000526020600020015491505b50919050565b6161a881565b60025481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146d57600080fd5b81816000919061147e929190611c77565b505050565b600061148d611c2a565b60008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156115d8578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611587565b5050505081526020016005820154815250509250600091505b8260800151518210156116715761164d61271061163f61161188866119df565b86608001518681518110151561162357fe5b906020019060200201516000015161199190919063ffffffff16565b6119c990919063ffffffff16565b9050611662818561196790919063ffffffff16565b935081806001019250506115f1565b6116888360a001518561196790919063ffffffff16565b93506116ab843073ffffffffffffffffffffffffffffffffffffffff1631611bf5565b9350505050919050565b67016345785d8a000081565b60008060008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091505b82600401805490508210156119335761173933836119df565b905061177081846004018481548110151561175057fe5b90600052602060002090600302016002015461196790919063ffffffff16565b836004018381548110151561178157fe5b9060005260206000209060030201600201819055506117f16117e26127106117d48487600401878154811015156117b457fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119c990919063ffffffff16565b8561196790919063ffffffff16565b9350813373ffffffffffffffffffffffffffffffffffffffff167ffaa4a63f8135e85684de273912ecf6efae3d807cffdf88015c5aa4112801919d856004018581548110151561183d57fe5b9060005260206000209060030201600001546118ba611889612710896004018981548110151561186957fe5b9060005260206000209060030201600201546119c990919063ffffffff16565b886004018881548110151561189a57fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119036118d2612710886119c990919063ffffffff16565b89600401898154811015156118e357fe5b90600052602060002090600302016000015461199190919063ffffffff16565b60405180848152602001838152602001828152602001935050505060405180910390a38180600101925050611720565b42836003018190555061195383600501548561196790919063ffffffff16565b935060008360050181905550505050919050565b6000818301905082811015151561197a57fe5b80905092915050565b600060148201519050919050565b6000808314156119a457600090506119c3565b81830290508183828115156119b557fe5b041415156119bf57fe5b8090505b92915050565b600081838115156119d657fe5b04905092915050565b60006119e9611c2a565b60008060066000600354815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611b34578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611ae3565b5050505081526020016005820154815250509250611b5f836060015142611c1190919063ffffffff16565b9150611ba862015180611b9a84866080015189815181101515611b7e57fe5b906020019060200201516020015161199190919063ffffffff16565b6119c990919063ffffffff16565b9350611bde836080015186815181101515611bbf57fe5b90602001906020020151604001516161a8611c1190919063ffffffff16565b9050611bea8482611bf5565b935050505092915050565b600081831015611c0757829050611c0b565b8190505b92915050565b6000828211151515611c1f57fe5b818303905092915050565b60c060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215611cb3579160200282015b82811115611cb2578235825591602001919060010190611c97565b5b509050611cc09190611cc4565b5090565b611ce691905b80821115611ce2576000816000905550600101611cca565b5090565b905600a165627a7a72305820f7010d9778e88ad863a848d2c836dfddfa7da5967844f1d95debca0d6cde105b0029
Contract_Creation_Code_ARM:



Contract Adress: 0x5c479108c6ea493b39c4e52bcd6e827e792dd293
Contract Name: Doneth
Contract_Source_Code: 
pragma solidity ^0.4.15;
/**
 * @title Doneth (Doneth)
 * @dev Doneth is a contract that allows shared access to funds
 * in the form of Ether and ERC20 tokens. It is especially relevant
 * to donation based projects. The admins of the contract determine 
 * who is a member, and each member gets a number of shares. The 
 * number of shares each member has determines how much Ether/ERC20 
 * the member can withdraw from the contract.
 */
/*
 * Ownable
 *
 * Base contract with an owner.
 * Provides onlyOwner modifier, which prevents function from running
 * if it is called by anyone other than the owner.
 */
contract Ownable {
    address public owner;
    function Ownable() {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}
contract Doneth is Ownable {
    using SafeMath for uint256;  
    // Name of the contract
    string public name;
    // Sum of all shares allocated to members
    uint256 public totalShares;
    // Sum of all withdrawals done by members
    uint256 public totalWithdrawn;
    // Block number of when the contract was created
    uint256 public genesisBlockNumber;
    // Number of decimal places for floating point division
    uint256 constant public PRECISION = 18;
    // Variables for shared expense allocation
    uint256 public sharedExpense;
    uint256 public sharedExpenseWithdrawn;
    // Used to keep track of members
    mapping(address => Member) public members;
    address[] public memberKeys;
    struct Member {
        bool exists;
        bool admin;
        uint256 shares;
        uint256 withdrawn;
        string memberName;
        mapping(address => uint256) tokensWithdrawn;
    }
    // Used to keep track of ERC20 tokens used and how much withdrawn
    mapping(address => Token) public tokens;
    address[] public tokenKeys;
    struct Token {
        bool exists;
        uint256 totalWithdrawn;
    }
    function Doneth(string _contractName, string _founderName) {
        if (bytes(_contractName).length > 21) revert();
        if (bytes(_founderName).length > 21) revert();
        name = _contractName;
        genesisBlockNumber = block.number;
        addMember(msg.sender, 1, true, _founderName);
    }
    event Deposit(address from, uint value);
    event Withdraw(address from, uint value, uint256 newTotalWithdrawn);
    event TokenWithdraw(address from, uint value, address token, uint amount);
    event AddShare(address who, uint256 addedShares, uint256 newTotalShares);
    event RemoveShare(address who, uint256 removedShares, uint256 newTotalShares);
    event ChangePrivilege(address who, bool oldValue, bool newValue);
    event ChangeContractName(string oldValue, string newValue);
    event ChangeMemberName(address who, string oldValue, string newValue);
    event ChangeSharedExpense(uint256 contractBalance, uint256 oldValue, uint256 newValue);
    event WithdrawSharedExpense(address from, address to, uint value, uint256 newSharedExpenseWithdrawn);
    // Fallback function accepts Ether from donators
    function () public payable {
        Deposit(msg.sender, msg.value);
    }
    modifier onlyAdmin() { 
        if (msg.sender != owner && !members[msg.sender].admin) revert();   
        _;
    }
    modifier onlyExisting(address who) { 
        if (!members[who].exists) revert(); 
        _;
    }
    // Series of getter functions for contract data
    function getMemberCount() public constant returns(uint) {
        return memberKeys.length;
    }
    function getMemberAtKey(uint key) public constant returns(address) {
        return memberKeys[key];
    }
    function getBalance() public constant returns(uint256 balance) {
        return this.balance;
    }
    function getContractInfo() public constant returns(string, address, uint256, uint256, uint256) {
        return (string(name), owner, genesisBlockNumber, totalShares, totalWithdrawn);
    }
    function returnMember(address _address) public constant onlyExisting(_address) returns(bool admin, uint256 shares, uint256 withdrawn, string memberName) {
      Member memory m = members[_address];
      return (m.admin, m.shares, m.withdrawn, m.memberName);
    }
    function checkERC20Balance(address token) public constant returns(uint256) {
        uint256 balance = ERC20(token).balanceOf(address(this));
        if (!tokens[token].exists && balance > 0) {
            tokens[token].exists = true;
        }
        return balance;
    }
    // Function to add members to the contract 
    function addMember(address who, uint256 shares, bool admin, string memberName) public onlyAdmin() {
        // Don't allow the same member to be added twice
        if (members[who].exists) revert();
        if (bytes(memberName).length > 21) revert();
        Member memory newMember;
        newMember.exists = true;
        newMember.admin = admin;
        newMember.memberName = memberName;
        members[who] = newMember;
        memberKeys.push(who);
        addShare(who, shares);
    }
    function updateMember(address who, uint256 shares, bool isAdmin, string name) public onlyAdmin() {
        if (sha3(members[who].memberName) != sha3(name)) changeMemberName(who, name);
        if (members[who].admin != isAdmin) changeAdminPrivilege(who, isAdmin);
        if (members[who].shares != shares) allocateShares(who, shares);
    }
    // Only owner, admin or member can change member's name
    function changeMemberName(address who, string newName) public onlyExisting(who) {
        if (msg.sender != who && msg.sender != owner && !members[msg.sender].admin) revert();
        if (bytes(newName).length > 21) revert();
        ChangeMemberName(who, members[who].memberName, newName);
        members[who].memberName = newName;
    }
    function changeAdminPrivilege(address who, bool newValue) public onlyAdmin() {
        ChangePrivilege(who, members[who].admin, newValue);
        members[who].admin = newValue; 
    }
    // Only admins and owners can change the contract name
    function changeContractName(string newName) public onlyAdmin() {
        if (bytes(newName).length > 21) revert();
        ChangeContractName(name, newName);
        name = newName;
    }
    // Shared expense allocation allows admins to withdraw an amount to be used for shared
    // expenses. Shared expense allocation subtracts from the total balance of the contract. 
    // Only owner can change this amount.
    function changeSharedExpenseAllocation(uint256 newAllocation) public onlyOwner() {
        if (newAllocation < sharedExpenseWithdrawn) revert();
        if (newAllocation.sub(sharedExpenseWithdrawn) > this.balance) revert();
        ChangeSharedExpense(this.balance, sharedExpense, newAllocation);
        sharedExpense = newAllocation;
    }
    // Set share amount explicitly by calculating difference then adding or removing accordingly
    function allocateShares(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        uint256 currentShares = members[who].shares;
        if (amount == currentShares) revert();
        if (amount > currentShares) {
            addShare(who, amount.sub(currentShares));
        } else {
            removeShare(who, currentShares.sub(amount));
        }
    }
    // Increment the number of shares for a member
    function addShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        totalShares = totalShares.add(amount);
        members[who].shares = members[who].shares.add(amount);
        AddShare(who, amount, members[who].shares);
    }
    // Decrement the number of shares for a member
    function removeShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {
        totalShares = totalShares.sub(amount);
        members[who].shares = members[who].shares.sub(amount);
        RemoveShare(who, amount, members[who].shares);
    }
    // Function for a member to withdraw Ether from the contract proportional
    // to the amount of shares they have. Calculates the totalWithdrawableAmount
    // in Ether based on the member's share and the Ether balance of the contract,
    // then subtracts the amount of Ether that the member has already previously
    // withdrawn.
    function withdraw(uint256 amount) public onlyExisting(msg.sender) {
        uint256 newTotal = calculateTotalWithdrawableAmount(msg.sender);
        if (amount > newTotal.sub(members[msg.sender].withdrawn)) revert();
        members[msg.sender].withdrawn = members[msg.sender].withdrawn.add(amount);
        totalWithdrawn = totalWithdrawn.add(amount);
        msg.sender.transfer(amount);
        Withdraw(msg.sender, amount, totalWithdrawn);
    }
    // Withdrawal function for ERC20 tokens
    function withdrawToken(uint256 amount, address token) public onlyExisting(msg.sender) {
        uint256 newTotal = calculateTotalWithdrawableTokenAmount(msg.sender, token);
        if (amount > newTotal.sub(members[msg.sender].tokensWithdrawn[token])) revert();
        members[msg.sender].tokensWithdrawn[token] = members[msg.sender].tokensWithdrawn[token].add(amount);
        tokens[token].totalWithdrawn = tokens[token].totalWithdrawn.add(amount);
        ERC20(token).transfer(msg.sender, amount);
        TokenWithdraw(msg.sender, amount, token, tokens[token].totalWithdrawn);
    }
    // Withdraw from shared expense allocation. Total withdrawable is calculated as 
    // sharedExpense minus sharedExpenseWithdrawn. Only Admin can withdraw from shared expense.
    function withdrawSharedExpense(uint256 amount, address to) public onlyAdmin() {
        if (amount > calculateTotalExpenseWithdrawableAmount()) revert();
        sharedExpenseWithdrawn = sharedExpenseWithdrawn.add(amount);
        to.transfer(amount);
        WithdrawSharedExpense(msg.sender, to, amount, sharedExpenseWithdrawn);
    }
    // Converts from shares to Eth.
    // Ex: 2 shares, 4 total shares, 40 Eth balance
    // 40 Eth / 4 total shares = 10 eth per share * 2 shares = 20 Eth to cash out
    function calculateTotalWithdrawableAmount(address who) public constant onlyExisting(who) returns (uint256) {
        // Total balance to calculate share from = 
        // contract balance + totalWithdrawn - sharedExpense + sharedExpenseWithdrawn
        uint256 balanceSum = this.balance.add(totalWithdrawn);
        balanceSum = balanceSum.sub(sharedExpense);
        balanceSum = balanceSum.add(sharedExpenseWithdrawn);
        // Need to use parts-per notation to compute percentages for lack of floating point division
        uint256 ethPerSharePPN = balanceSum.percent(totalShares, PRECISION); 
        uint256 ethPPN = ethPerSharePPN.mul(members[who].shares);
        uint256 ethVal = ethPPN.div(10**PRECISION); 
        return ethVal;
    }
    function calculateTotalWithdrawableTokenAmount(address who, address token) public constant returns(uint256) {
        uint256 balanceSum = checkERC20Balance(token).add(tokens[token].totalWithdrawn);
        // Need to use parts-per notation to compute percentages for lack of floating point division
        uint256 tokPerSharePPN = balanceSum.percent(totalShares, PRECISION); 
        uint256 tokPPN = tokPerSharePPN.mul(members[who].shares);
        uint256 tokVal = tokPPN.div(10**PRECISION); 
        return tokVal;
    }
    function calculateTotalExpenseWithdrawableAmount() public constant returns(uint256) {
        return sharedExpense.sub(sharedExpenseWithdrawn);
    }
    // Used for testing
    function delegatePercent(uint256 a, uint256 b, uint256 c) public constant returns (uint256) {
        return a.percent(b, c);
    }
}
/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public constant returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public constant returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal constant returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    function sub(uint256 a, uint256 b) internal constant returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
    // Using from SO: https://stackoverflow.com/questions/42738640/division-in-ethereum-solidity/42739843#42739843
    // Adapted to use SafeMath and uint256.
    function percent(uint256 numerator, uint256 denominator, uint256 precision) internal constant returns(uint256 quotient) {
        // caution, check safe-to-multiply here
        uint256 _numerator = mul(numerator, 10 ** (precision+1));
        // with rounding of last digit
        uint256 _quotient = (div(_numerator, denominator) + 5) / 10;
        return (_quotient);
    }
}
Contract_ABI:
[{"constant":true,"inputs":[],"name":"genesisBlockNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"members","outputs":[{"name":"exists","type":"bool"},{"name":"admin","type":"bool"},{"name":"shares","type":"uint256"},{"name":"withdrawn","type":"uint256"},{"name":"memberName","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"newName","type":"string"}],"name":"changeMemberName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newAllocation","type":"uint256"}],"name":"changeSharedExpenseAllocation","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"},{"name":"to","type":"address"}],"name":"withdrawSharedExpense","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"},{"name":"token","type":"address"}],"name":"calculateTotalWithdrawableTokenAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"tokenKeys","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"who","type":"address"}],"name":"calculateTotalWithdrawableAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalShares","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"calculateTotalExpenseWithdrawableAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalWithdrawn","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"addShare","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"shares","type":"uint256"},{"name":"admin","type":"bool"},{"name":"memberName","type":"string"}],"name":"addMember","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sharedExpenseWithdrawn","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getContractInfo","outputs":[{"name":"","type":"string"},{"name":"","type":"address"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"delegatePercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"newValue","type":"bool"}],"name":"changeAdminPrivilege","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"returnMember","outputs":[{"name":"admin","type":"bool"},{"name":"shares","type":"uint256"},{"name":"withdrawn","type":"uint256"},{"name":"memberName","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"allocateShares","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"getMemberCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"token","type":"address"}],"name":"checkERC20Balance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sharedExpense","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"PRECISION","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newName","type":"string"}],"name":"changeContractName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"key","type":"uint256"}],"name":"getMemberAtKey","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"},{"name":"token","type":"address"}],"name":"withdrawToken","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"amount","type":"uint256"}],"name":"removeShare","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"tokens","outputs":[{"name":"exists","type":"bool"},{"name":"totalWithdrawn","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"memberKeys","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"who","type":"address"},{"name":"shares","type":"uint256"},{"name":"isAdmin","type":"bool"},{"name":"name","type":"string"}],"name":"updateMember","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_contractName","type":"string"},{"name":"_founderName","type":"string"}],"payable":false,"type":"constructor"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"newTotalWithdrawn","type":"uint256"}],"name":"Withdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"token","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"TokenWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"addedShares","type":"uint256"},{"indexed":false,"name":"newTotalShares","type":"uint256"}],"name":"AddShare","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"removedShares","type":"uint256"},{"indexed":false,"name":"newTotalShares","type":"uint256"}],"name":"RemoveShare","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"oldValue","type":"bool"},{"indexed":false,"name":"newValue","type":"bool"}],"name":"ChangePrivilege","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"oldValue","type":"string"},{"indexed":false,"name":"newValue","type":"string"}],"name":"ChangeContractName","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"who","type":"address"},{"indexed":false,"name":"oldValue","type":"string"},{"indexed":false,"name":"newValue","type":"string"}],"name":"ChangeMemberName","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"contractBalance","type":"uint256"},{"indexed":false,"name":"oldValue","type":"uint256"},{"indexed":false,"name":"newValue","type":"uint256"}],"name":"ChangeSharedExpense","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"newSharedExpenseWithdrawn","type":"uint256"}],"name":"WithdrawSharedExpense","type":"event"}]
Contract_Creation_Code_16:
606060405234156200001057600080fd5b60405162003f3d38038062003f3d833981016040528080518201919060200180518201919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6015825111156200008a57600080fd5b6015815111156200009a57600080fd5b8160019080519060200190620000b292919062000646565b5043600481905550620000dd3360018084620000e66401000000000262001cab176401000000009004565b5b5050620007fb565b620000f0620006cd565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156200019b5750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b15620001a657600080fd5b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156200020157600080fd5b6015825111156200021157600080fd5b60018160000190151590811515815250508281602001901515908115158152505081816080018190525080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010155606082015181600201556080820151816003019080519060200190620002ed92919062000709565b509050506008805480600101828162000307919062000790565b916000526020600020900160005b87909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003778585620003806401000000000262001a28176401000000009004565b5b5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156200042b5750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b156200043657600080fd5b81600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615156200049357600080fd5b620004b8826002546200062664010000000002620034a5179091906401000000009004565b6002819055506200052382600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546200062664010000000002620034a5179091906401000000009004565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f0d0d4d1bc5a254e66ec692f9d1a4452fed4b59a3a1ba48b1a991838e5c7c4b8a8383600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5b505b5050565b60008082840190508381101515156200063b57fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200068957805160ff1916838001178555620006ba565b82800160010185558215620006ba579182015b82811115620006b95782518255916020019190600101906200069c565b5b509050620006c99190620007bf565b5090565b60a060405190810160405280600015158152602001600015158152602001600081526020016000815260200162000703620007e7565b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200074c57805160ff19168380011785556200077d565b828001600101855582156200077d579182015b828111156200077c5782518255916020019190600101906200075f565b5b5090506200078c9190620007bf565b5090565b815481835581811511620007ba57818360005260206000209182019101620007b99190620007bf565b5b505050565b620007e491905b80821115620007e0576000816000905550600101620007c6565b5090565b90565b602060405190810160405280600081525090565b613732806200080b6000396000f300606060405236156101b5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630356fe3a1461022457806306fdde031461024d57806308ae4b0c146102dc5780630d6d1437146103cf57806312065fe01461044b5780631468fc261461047457806324e2ca92146104975780632e1a7d4d146104d95780632f0ae513146104fc578063346692b714610568578063389435e8146105cb5780633a98ef39146106185780634a914e8c146106415780634b3197131461066a57806350f4f9f8146106935780635ea40983146106d55780636e2fd470146107655780637cc1f8671461078e5780637d22f4311461086557806380056b5b146108ae57806385dcbb5a146108f25780638da5cb5b146109be5780638e2a647014610a13578063997072f714610a555780639b3bc6fb14610a7e5780639d21328f14610acb578063aaf5eb6814610af4578063ad3cd88314610b1d578063aec8fae814610b7a578063be4b177214610bdd578063c06474e014610c1f578063e486033914610c61578063f2fde38b14610cb9578063f504b08914610cf2578063fac2548b14610d55575b5b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b005b341561022f57600080fd5b610237610de5565b6040518082815260200191505060405180910390f35b341561025857600080fd5b610260610deb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a15780820151818401525b602081019050610285565b50505050905090810190601f1680156102ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102e757600080fd5b610313600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e89565b604051808615151515815260200185151515158152602001848152602001838152602001806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156103bc5780601f10610391576101008083540402835291602001916103bc565b820191906000526020600020905b81548152906001019060200180831161039f57829003601f168201915b5050965050505050505060405180910390f35b34156103da57600080fd5b610449600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ed8565b005b341561045657600080fd5b61045e611229565b6040518082815260200191505060405180910390f35b341561047f57600080fd5b6104956004808035906020019091905050611249565b005b34156104a257600080fd5b6104d7600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611357565b005b34156104e457600080fd5b6104fa6004808035906020019091905050611529565b005b341561050757600080fd5b610552600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611765565b6040518082815260200191505060405180910390f35b341561057357600080fd5b6105896004808035906020019091905050611864565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105d657600080fd5b610602600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118a4565b6040518082815260200191505060405180910390f35b341561062357600080fd5b61062b6119fd565b6040518082815260200191505060405180910390f35b341561064c57600080fd5b610654611a03565b6040518082815260200191505060405180910390f35b341561067557600080fd5b61067d611a22565b6040518082815260200191505060405180910390f35b341561069e57600080fd5b6106d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611a28565b005b34156106e057600080fd5b610763600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035151590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611cab565b005b341561077057600080fd5b610778611f25565b6040518082815260200191505060405180910390f35b341561079957600080fd5b6107a1611f2b565b60405180806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b838110156108265780820151818401525b60208101905061080a565b50505050905090810190601f1680156108535780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b341561087057600080fd5b6108986004808035906020019091908035906020019091908035906020019091905050612014565b6040518082815260200191505060405180910390f35b34156108b957600080fd5b6108f0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050612035565b005b34156108fd57600080fd5b610929600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612212565b604051808515151515815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109805780820151818401525b602081019050610964565b50505050905090810190601f1680156109ad5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34156109c957600080fd5b6109d16123e6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a1e57600080fd5b610a53600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061240b565b005b3415610a6057600080fd5b610a686125be565b6040518082815260200191505060405180910390f35b3415610a8957600080fd5b610ab5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506125cc565b6040518082815260200191505060405180910390f35b3415610ad657600080fd5b610ade612757565b6040518082815260200191505060405180910390f35b3415610aff57600080fd5b610b0761275d565b6040518082815260200191505060405180910390f35b3415610b2857600080fd5b610b78600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612762565b005b3415610b8557600080fd5b610b9b6004808035906020019091905050612969565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610be857600080fd5b610c1d600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506129af565b005b3415610c2a57600080fd5b610c5f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612e1f565b005b3415610c6c57600080fd5b610c98600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506130a2565b60405180831515151581526020018281526020019250505060405180910390f35b3415610cc457600080fd5b610cf0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506130d3565b005b3415610cfd57600080fd5b610d1360048080359060200190919050506131aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d6057600080fd5b610de3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035151590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506131ea565b005b60045481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e815780601f10610e5657610100808354040283529160200191610e81565b820191906000526020600020905b815481529060010190602001808311610e6457829003601f168201915b505050505081565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff169080600101549080600201549080600301905085565b81600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515610f3457600080fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610fbd57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b80156110165750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b1561102057600080fd5b60158251111561102f57600080fd5b7f154ad3f744d3641de12f5e012773b0126c47d1ffda727e5a61a2e6db8bb2cb5583600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030184604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156111535780601f1061112857610100808354040283529160200191611153565b820191906000526020600020905b81548152906001019060200180831161113657829003601f168201915b5050838103825284818151815260200191508051906020019080838360005b8381101561118e5780820151818401525b602081019050611172565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a181600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190611221929190613553565b505b5b505050565b60003073ffffffffffffffffffffffffffffffffffffffff163190505b90565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112a457600080fd5b6006548110156112b357600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16316112e06006548361348b90919063ffffffff16565b11156112eb57600080fd5b7f5b3ea9617f529540e1c3e0beb0e01c060418c2d1fe48d369afe3d47beaa037cf3073ffffffffffffffffffffffffffffffffffffffff16316005548360405180848152602001838152602001828152602001935050505060405180910390a1806005819055505b5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156114015750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b1561140b57600080fd5b611413611a03565b82111561141f57600080fd5b611434826006546134a590919063ffffffff16565b6006819055508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561147a57600080fd5b7f223162e752821eb7bd44782f73723defb6e3a087a9afc4d3d4af13783f7b6aca338284600654604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15b5b5050565b600033600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151561158757600080fd5b611590336118a4565b91506115e7600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201548361348b90919063ffffffff16565b8311156115f357600080fd5b61164883600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546134a590919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506116a3836003546134a590919063ffffffff16565b6003819055503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015156116e957600080fd5b7ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5683384600354604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5b505050565b60008060008060006117ca600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546117bc886125cc565b6134a590919063ffffffff16565b93506117e46002546012866134c49092919063ffffffff16565b925061183b600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548461350390919063ffffffff16565b91506118546012600a0a8361353790919063ffffffff16565b90508094505b5050505092915050565b600a8181548110151561187357fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600085600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151561190857600080fd5b6119346003543073ffffffffffffffffffffffffffffffffffffffff16316134a590919063ffffffff16565b945061194b6005548661348b90919063ffffffff16565b9450611962600654866134a590919063ffffffff16565b945061197c6002546012876134c49092919063ffffffff16565b93506119d3600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548561350390919063ffffffff16565b92506119ec6012600a0a8461353790919063ffffffff16565b91508195505b5b5050505050919050565b60025481565b6000611a1c60065460055461348b90919063ffffffff16565b90505b90565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611ad25750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b15611adc57600080fd5b81600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515611b3857600080fd5b611b4d826002546134a590919063ffffffff16565b600281905550611ba882600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546134a590919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f0d0d4d1bc5a254e66ec692f9d1a4452fed4b59a3a1ba48b1a991838e5c7c4b8a8383600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5b505b5050565b611cb36135d3565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611d5d5750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b15611d6757600080fd5b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611dc157600080fd5b601582511115611dd057600080fd5b60018160000190151590811515815250508281602001901515908115158152505081816080018190525080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010155606082015181600201556080820151816003019080519060200190611eaa92919061360d565b5090505060088054806001018281611ec2919061368d565b916000526020600020900160005b87909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611f1c8585611a28565b5b5b5050505050565b60065481565b611f336136b9565b60008060008060016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600454600254600354848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ffb5780601f10611fd057610100808354040283529160200191611ffb565b820191906000526020600020905b815481529060010190602001808311611fde57829003601f168201915b50505050509450945094509450945094505b9091929394565b600061202b8383866134c49092919063ffffffff16565b90505b9392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156120df5750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b156120e957600080fd5b7eb763075216b1778fecb2719c6d2040ed88fdbe6092a9597de5df9d175c968a82600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1683604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200182151515158152602001935050505060405180910390a180600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055505b5b5050565b600080600061221f6136b9565b6122276135d3565b85600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151561228357600080fd5b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123b15780601f10612386576101008083540402835291602001916123b1565b820191906000526020600020905b81548152906001019060200180831161239457829003601f168201915b5050505050815250509150816020015182604001518360600151846080015180905095509550955095505b5b50509193509193565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156124b75750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b156124c157600080fd5b82600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151561251d57600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015491508183141561256f57600080fd5b81831115612598576125938461258e848661348b90919063ffffffff16565b611a28565b6125b5565b6125b4846125af858561348b90919063ffffffff16565b612e1f565b5b5b5b505b505050565b600060088054905090505b90565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561267257600080fd5b6102c65a03f1151561268357600080fd5b505050604051805190509050600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580156126ec5750600081115b1561274d576001600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505b8091505b50919050565b60055481565b601281565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561280c5750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b1561281657600080fd5b60158151111561282557600080fd5b7f7244709f741ec5f1d637fd5a891de308c779d1023c0f3128595bb88bf571ef886001826040518080602001806020018381038352858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156128d65780601f106128ab576101008083540402835291602001916128d6565b820191906000526020600020905b8154815290600101906020018083116128b957829003601f168201915b5050838103825284818151815260200191508051906020019080838360005b838110156129115780820151818401525b6020810190506128f5565b50505050905090810190601f16801561293e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18060019080519060200190612963929190613553565b505b5b50565b600060088281548110151561297a57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b600033600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515612a0d57600080fd5b612a173384611765565b9150612aab600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361348b90919063ffffffff16565b841115612ab757600080fd5b612b4984600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134a590919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c2184600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546134a590919063ffffffff16565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515612d1257600080fd5b6102c65a03f11515612d2357600080fd5b50505060405180519050507fffdaa1b8f229c4f9a0c79b712224a2ad8d3aa3c483c23a125f4b9c179870938d338585600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a15b5b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015612ec95750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b15612ed357600080fd5b81600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515612f2f57600080fd5b612f448260025461348b90919063ffffffff16565b600281905550612f9f82600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461348b90919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507f67d4e98c6b70fdfbb7305797bbb30889a736b9773c74f9557683ffacbd22d5a88383600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5b505b5050565b60096020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561312e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156131a557806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b6008818154811015156131b957fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156132945750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16155b1561329e57600080fd5b806040518082805190602001908083835b6020831015156132d557805182525b6020820191506020810190506020830392506132af565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160405180828054600181600116156101000203166002900480156133a35780601f106133815761010080835404028352918201916133a3565b820191906000526020600020905b81548152906001019060200180831161338f575b50509150506040518091039020600019161415156133c6576133c58482610ed8565b5b811515600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16151514151561342d5761342c8483612035565b5b82600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414151561348357613482848461240b565b5b5b5b50505050565b600082821115151561349957fe5b81830390505b92915050565b60008082840190508381101515156134b957fe5b8091505b5092915050565b60008060006134d98660018601600a0a613503565b9150600a60056134e98488613537565b018115156134f357fe5b0490508092505b50509392505050565b60008082840290506000841480613524575082848281151561352157fe5b04145b151561352c57fe5b8091505b5092915050565b600080828481151561354557fe5b0490508091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061359457805160ff19168380011785556135c2565b828001600101855582156135c2579182015b828111156135c15782518255916020019190600101906135a6565b5b5090506135cf91906136cd565b5090565b60a06040519081016040528060001515815260200160001515815260200160008152602001600081526020016136076136f2565b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061364e57805160ff191683800117855561367c565b8280016001018555821561367c579182015b8281111561367b578251825591602001919060010190613660565b5b50905061368991906136cd565b5090565b8154818355818115116136b4578183600052602060002091820191016136b391906136cd565b5b505050565b602060405190810160405280600081525090565b6136ef91905b808211156136eb5760008160009055506001016136d3565b5090565b90565b6020604051908101604052806000815250905600a165627a7a723058209eddc0ee0a43d82b85a6a543811daca073566780a88c5abfeeb48f0f21f0d7300029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004636173610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046361736100000000000000000000000000000000000000000000000000000000
Contract_Creation_Code_ARM:



Contract Adress: 0x52d0ade3dcfe93213edbe59e518a1fb9e2fd9c3f
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function trade(
        address src,
        uint srcAmount,
        address dest,
        address destAddress,
        uint maxDestAmount,
        uint minConversionRate,
        address walletId
    )
        public
        payable
        returns(uint);
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    function buy(
        ISetToken set,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
        payable
    {
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 fitAmount = uint(-1);
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.allowance(this, set) == 0) {
                require(token.approve(set, uint256(-1)), "Approve failed");
            }
            uint256 amount = token.balanceOf(this).div(units[i]);
            if (amount < fitAmount) {
                fitAmount = amount;
            }
        }
        set.mint(msg.sender, fitAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    function sell(
        ISetToken set,
        uint256 amount,
        bytes callDatas,
        uint[] starts // including 0 and LENGTH values
    )
        public
    {
        set.burn(msg.sender, amount);
        change(callDatas, starts);
        address[] memory components = set.getComponents();
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (uint i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function change(bytes callDatas, uint[] starts) public payable { // starts should include 0 and callDatas.length
        for (uint i = 0; i < starts.length - 1; i++) {
            require(address(this).externalCall(0, callDatas, starts[i], starts[i + 1] - starts[i]));
        }
    }
    function sendEthValue(address target, bytes data, uint256 value) external {
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function sendEthProportion(address target, bytes data, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        // solium-disable-next-line security/no-call-value
        require(target.call.value(value)(data));
    }
    function approveTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        if (fromToken.allowance(this, target) != 0) {
             fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function approveTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        if (fromToken.allowance(this, target) != 0) {
            fromToken.approve(target, 0);
        }
        fromToken.approve(target, amount);
        require(target.call(data));
    }
    function transferTokenAmount(address target, bytes data, IERC20 fromToken, uint256 amount) external {
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            require(target.call(data));
        }
    }
    function transferTokenProportion(address target, bytes data, IERC20 fromToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        require(fromToken.transfer(target, amount));
        if (data.length != 0) {
            // solium-disable-next-line security/no-low-level-calls
            require(target.call(data));
        }
    }
    function transferTokenProportionToOrigin(IERC20 token, uint256 mul, uint256 div) external {
        uint256 amount = token.balanceOf(this).mul(mul).div(div);
        // solium-disable-next-line security/no-tx-origin
        require(token.transfer(tx.origin, amount));
    }
    // Kyber Network
    function kyberSendEthProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 value = address(this).balance.mul(mul).div(div);
        kyber.trade.value(value)(
            fromToken,
            value,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenAmount(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 amount) external {
        if (fromToken.allowance(this, kyber) == 0) {
            fromToken.approve(kyber, uint256(-1));
        }
        kyber.trade(
            fromToken,
            amount,
            toToken,
            this,
            1 << 255,
            0,
            0
        );
    }
    function kyberApproveTokenProportion(IKyberNetworkProxy kyber, IERC20 fromToken, address toToken, uint256 mul, uint256 div) external {
        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);
        this.kyberApproveTokenAmount(kyber, fromToken, toToken, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportionToOrigin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"approveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"sendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"amount","type":"uint256"},{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"sell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberSendEthProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"kyberApproveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"approveTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"value","type":"uint256"}],"name":"sendEthValue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"target","type":"address"},{"name":"data","type":"bytes"},{"name":"fromToken","type":"address"},{"name":"mul","type":"uint256"},{"name":"div","type":"uint256"}],"name":"transferTokenProportion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"callDatas","type":"bytes"},{"name":"starts","type":"uint256[]"}],"name":"change","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"kyber","type":"address"},{"name":"fromToken","type":"address"},{"name":"toToken","type":"address"},{"name":"amount","type":"uint256"}],"name":"kyberApproveTokenAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50611c87806100206000396000f3006080604052600436106100ab5763ffffffff60e060020a6000350416631396a25481146100ba5780633143b224146100e15780633669f27b14610174578063846f1185146101aa57806386a45c15146101dd5780638721fbe91461027f5780639a509aff146102b2578063bed31bc7146102e8578063d04c6c181461031b578063d2e9236b14610354578063d91bd1b014610384578063dc0ba228146103bd578063dc3193f914610442575b323314156100b857600080fd5b005b3480156100c657600080fd5b506100b8600160a060020a0360043516602435604435610472565b60408051602060046024803582810135601f81018590048502860185019096528585526100b8958335600160a060020a0316953695604494919390910191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105c49650505050505050565b34801561018057600080fd5b506100b8600160a060020a0360048035821691602480359081019201359060443516606435610cb9565b3480156101b657600080fd5b506100b860048035600160a060020a03169060248035908101910135604435606435610ea4565b3480156101e957600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100b8948235600160a060020a0316946024803595369594606494920191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610f019650505050505050565b34801561028b57600080fd5b506100b8600160a060020a03600435811690602435811690604435166064356084356112b3565b3480156102be57600080fd5b506100b8600160a060020a03600480358216916024803590810192013590604435166064356113b0565b3480156102f457600080fd5b506100b8600160a060020a036004358116906024358116906044351660643560843561148b565b34801561032757600080fd5b506100b8600160a060020a036004803582169160248035908101920135906044351660643560843561158b565b34801561036057600080fd5b506100b860048035600160a060020a031690602480359081019101356044356117d7565b34801561039057600080fd5b506100b8600160a060020a0360048035821691602480359081019201359060443516606435608435611813565b6040805160206004803580820135601f81018490048402850184019095528484526100b8943694929360249392840191908190840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506119559650505050505050565b34801561044e57600080fd5b506100b8600160a060020a03600435811690602435811690604435166064356119df565b600061051b8261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b50519063ffffffff611bdb16565b9063ffffffff611c1416565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152326004820152602481018390529051919250600160a060020a0386169163a9059cbb916044808201926020929091908290030181600087803b15801561058757600080fd5b505af115801561059b573d6000803e3d6000fd5b505050506040513d60208110156105b157600080fd5b505115156105be57600080fd5b50505050565b6060806000806000806105d78888611955565b88600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561065257600080fd5b81019080805164010000000081111561066a57600080fd5b8201602081018481111561067d57600080fd5b815185602082028301116401000000008211171561069a57600080fd5b5050929190505050955088600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561071f57600080fd5b81019080805164010000000081111561073757600080fd5b8201602081018481111561074a57600080fd5b815185602082028301116401000000008211171561076757600080fd5b50909850600019975060009650505050505b85518310156109dc57858381518110151561079057fe5b60209081029091018101516040805160e160020a636eb1769f028152306004820152600160a060020a038d8116602483015291519295509085169263dd62ed3e926044808401938290030181600087803b1580156107ed57600080fd5b505af1158015610801573d6000803e3d6000fd5b505050506040513d602081101561081757600080fd5b5051151561092557604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152600019602483015291519184169163095ea7b3916044808201926020929091908290030181600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d60208110156108b657600080fd5b5051151561092557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f417070726f7665206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b6109c3858481518110151561093657fe5b60209081029091018101516040805160e060020a6370a0823102815230600482015290519192600160a060020a038716926370a082319260248082019392918290030181600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b505050506040513d60208110156109b557600080fd5b50519063ffffffff611c1416565b9050838110156109d1578093505b600190920191610779565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038b16916340c10f1991604480830192600092919082900301818387803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b5050506000303111159050610a95576040513390303180156108fc02916000818181858888f19350505050158015610a93573d6000803e3d6000fd5b505b600092505b8551831015610cae578583815181101515610ab157fe5b60209081029091018101516040805160e060020a6370a082310281523060048201529051919450600092600160a060020a038616926370a0823192602480820193929182900301818787803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b50511115610ca3576040805160e060020a6370a082310281523060048201529051600160a060020a0384169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050506040513d6020811015610bbb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610c0a57600080fd5b505af1158015610c1e573d6000803e3d6000fd5b505050506040513d6020811015610c3457600080fd5b50511515610ca357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190920191610a9a565b505050505050505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03878116602483015291519184169163dd62ed3e916044808201926020929091908290030181600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d6020811015610d3857600080fd5b505115610dd05781600160a060020a031663095ea7b38660006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050506040513d6020811015610dcd57600080fd5b50505b81600160a060020a031663095ea7b386836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b505050506040513d6020811015610e5d57600080fd5b5050604051600160a060020a0386169085908590808383808284378201915050925050506000604051808303816000865af19150501515610e9d57600080fd5b5050505050565b6000610ebb8261050f30318663ffffffff611bdb16565b905085600160a060020a03168186866040518083838082843782019150509250505060006040518083038185875af1925050501515610ef957600080fd5b505050505050565b606060008086600160a060020a0316639dc29fac33886040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015610f6957600080fd5b505af1158015610f7d573d6000803e3d6000fd5b50505050610f8b8585611955565b86600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610fc957600080fd5b505af1158015610fdd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561100657600080fd5b81019080805164010000000081111561101e57600080fd5b8201602081018481111561103157600080fd5b815185602082028301116401000000008211171561104e57600080fd5b50909650505060003031111591506110919050576040513390303180156108fc02916000818181858888f1935050505015801561108f573d6000803e3d6000fd5b505b600091505b82518210156112aa5782828151811015156110ad57fe5b60209081029091018101516040805160e060020a6370a082310281523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505050506040513d602081101561112f57600080fd5b5051111561129f576040805160e060020a6370a082310281523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561118d57600080fd5b505af11580156111a1573d6000803e3d6000fd5b505050506040513d60208110156111b757600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561120657600080fd5b505af115801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b5051151561129f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190910190611096565b50505050505050565b60006112ca8261050f30318663ffffffff611bdb16565b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820184905287811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c483015291519293509088169163cb3c28c791849160e480830192602092919082900301818588803b15801561137b57600080fd5b505af115801561138f573d6000803e3d6000fd5b50505050506040513d60208110156113a657600080fd5b5050505050505050565b81600160a060020a031663a9059cbb86836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d602081101561143d57600080fd5b5051151561144a57600080fd5b8215610e9d5784600160a060020a03168484604051808383808284378201915050925050506000604051808303816000865af19150501515610e9d57600080fd5b60006114f08261050f8588600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b604080517fdc3193f9000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152888116602483015287166044820152606481018390529051919250309163dc3193f99160848082019260009290919082900301818387803b15801561156b57600080fd5b505af115801561157f573d6000803e3d6000fd5b50505050505050505050565b60006115f08261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b6040805160e160020a636eb1769f028152306004820152600160a060020a038a8116602483015291519293509086169163dd62ed3e916044808201926020929091908290030181600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b505050506040513d602081101561167257600080fd5b50511561170a5783600160a060020a031663095ea7b38860006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156116dd57600080fd5b505af11580156116f1573d6000803e3d6000fd5b505050506040513d602081101561170757600080fd5b50505b83600160a060020a031663095ea7b388836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561176d57600080fd5b505af1158015611781573d6000803e3d6000fd5b505050506040513d602081101561179757600080fd5b5050604051600160a060020a0388169087908790808383808284378201915050925050506000604051808303816000865af191505015156112aa57600080fd5b83600160a060020a03168184846040518083838082843782019150509250505060006040518083038185875af19250505015156105be57600080fd5b60006118788261050f8587600160a060020a03166370a08231306040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104d757600080fd5b905083600160a060020a031663a9059cbb88836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b505050506040513d602081101561190757600080fd5b5051151561191457600080fd5b84156112aa5786600160a060020a03168686604051808383808284378201915050925050506000604051808303816000865af191505015156112aa57600080fd5b60005b60018251038110156119da576119c7600084848481518110151561197857fe5b90602001906020020151858581518110151561199057fe5b9060200190602002015186866001018151811015156119ab57fe5b602090810290910101513094939291900363ffffffff611c3716565b15156119d257600080fd5b600101611958565b505050565b6040805160e160020a636eb1769f028152306004820152600160a060020a03868116602483015291519185169163dd62ed3e916044808201926020929091908290030181600087803b158015611a3457600080fd5b505af1158015611a48573d6000803e3d6000fd5b505050506040513d6020811015611a5e57600080fd5b50511515611b0057604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152600019602483015291519185169163095ea7b3916044808201926020929091908290030181600087803b158015611ad357600080fd5b505af1158015611ae7573d6000803e3d6000fd5b505050506040513d6020811015611afd57600080fd5b50505b604080517fcb3c28c7000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301526024820184905284811660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905292519087169263cb3c28c79260e480820193602093909283900390910190829087803b158015611bb157600080fd5b505af1158015611bc5573d6000803e3d6000fd5b505050506040513d6020811015610ef957600080fd5b600080831515611bee5760009150611c0d565b50828202828482811515611bfe57fe5b0414611c0957600080fd5b8091505b5092915050565b600080808311611c2357600080fd5b8284811515611c2e57fe5b04949350505050565b600060405160208501600082858784018a8c6187965a03f1989750505050505050505600a165627a7a72305820dc80b9fa54b1ab4d4df2701cfae7cd7531c4972bb288c49f90da23411a0ca8b50029
Contract_Creation_Code_ARM:



Contract Adress: 0x59bf73063bb645f3df40d9b05a117be6344e1eda
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetFactory.sol
interface ISetFactory {
    /* ============ External Functions ============ */
    /**
     * Exchange components for Set tokens
     *
     * @param  _set          Address of the Set to issue
     * @param  _quantity     Number of tokens to issue
     */
    function issue(
        address _set,
        uint256 _quantity
    )
        external;
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (ISetFactory);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Balance of token for a specified address
    *
    * @param who  The address
    * @return uint256 Balance of address
    */
    function balanceOf(
        address who
    )
        external
        view
        returns (uint256);
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.factory().issue(set, fitMintAmount);
        set.transfer(msg.sender, set.balanceOf(this));
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610a6d806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b506100706109bb565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff6109d316565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff6109f016565b9063ffffffff610a1e16565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b8a600160a060020a031663c45a01556040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b5051604080517f867904b4000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018890529151919092169163867904b491604480830192600092919082900301818387803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b5050604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038f16935063a9059cbb9250339184916370a08231916024808201926020929091908290030181600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d60208110156106c957600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915251604480830192600092919082900301818387803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b5050506000303111159050610769576040513390303180156108fc02916000818181858888f19350505050158015610767573d6000803e3d6000fd5b505b600094505b88518510156109ae57888581518110151561078557fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b1580156107f357600080fd5b505af1158015610807573d6000803e3d6000fd5b505050506040513d602081101561081d57600080fd5b505111156109a357604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561089157600080fd5b505af11580156108a5573d6000803e3d6000fd5b505050506040513d60208110156108bb57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b505050506040513d602081101561093457600080fd5b505115156109a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b60019094019361076e565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000828201838110156109e557600080fd5b8091505b5092915050565b600080831515610a0357600091506109e9565b50828202828482811515610a1357fe5b04146109e557600080fd5b600080808311610a2d57600080fd5b8284811515610a3857fe5b049493505050505600a165627a7a7230582072f07da822ac037337ccc7be06096c41ea628c695bf3d0498a9224dbb8c129490029
Contract_Creation_Code_ARM:



Contract Adress: 0x0a7f20c58c3014e1dfb7f9d460d8bc2202f7bf1f
Contract Name: SetBuyer
Contract_Source_Code: 
pragma solidity ^0.4.24;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender)
    external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value)
    external returns (bool);
  function transferFrom(address from, address to, uint256 value)
    external returns (bool);
  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );
  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}
// File: openzeppelin-solidity/contracts/math/SafeMath.sol
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
// File: contracts/ExternalCall.sol
library ExternalCall {
    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol
    // call has been separated into its own function in order to take advantage
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.
    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
            result := call(
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)
                destination,
                value,
                add(d, dataOffset),
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem
                x,
                0                  // Output is ignored, therefore the output size is zero
            )
        }
    }
}
// File: contracts/ISetToken.sol
/*
    Copyright 2018 Set Labs Inc.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
pragma solidity ^0.4.24;
/**
 * @title ISetToken
 * @author Set Protocol
 *
 * The ISetToken interface provides a light-weight, structured way to interact with the
 * SetToken contract from another contract.
 */
interface ISetToken {
    /* ============ External Functions ============ */
    /*
     * Get factory address
     *
     * @return  address       Factory address
     */
    function factory()
        external
        view
        returns (address);
    /*
     * Get natural unit of Set
     *
     * @return  uint256       Natural unit of Set
     */
    function naturalUnit()
        external
        view
        returns (uint256);
    /*
     * Get addresses of all components in the Set
     *
     * @return  componentAddresses       Array of component tokens
     */
    function getComponents()
        external
        view
        returns(address[]);
    /*
     * Get units of all tokens in Set
     *
     * @return  units       Array of component units
     */
    function getUnits()
        external
        view
        returns(uint256[]);
    /*
     * Checks to make sure token is component of Set
     *
     * @param  _tokenAddress     Address of token being checked
     * @return  bool             True if token is component of Set
     */
    function tokenIsComponent(
        address _tokenAddress
    )
        external
        view
        returns (bool);
    /*
     * Mint set token for given address.
     * Can only be called by authorized contracts.
     *
     * @param  _issuer      The address of the issuing account
     * @param  _quantity    The number of sets to attribute to issuer
     */
    function mint(
        address _issuer,
        uint256 _quantity
    )
        external;
    /*
     * Burn set token for given address
     * Can only be called by authorized contracts
     *
     * @param  _from        The address of the redeeming account
     * @param  _quantity    The number of sets to burn from redeemer
     */
    function burn(
        address _from,
        uint256 _quantity
    )
        external;
    /**
    * Transfer token for a specified address
    *
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(
        address to,
        uint256 value
    )
        external;
}
// File: contracts/SetBuyer.sol
contract IKyberNetworkProxy {
    function tradeWithHint(
        address src,
        uint256 srcAmount,
        address dest,
        address destAddress,
        uint256 maxDestAmount,
        uint256 minConversionRate,
        address walletId,
        bytes hint
    )
        public
        payable
        returns(uint);
    function getExpectedRate(
        address source,
        address dest,
        uint srcQty
    )
        public
        view
        returns (
            uint expectedPrice,
            uint slippagePrice
        );
}
contract SetBuyer {
    using SafeMath for uint256;
    using ExternalCall for address;
    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    function buy(
        ISetToken set,
        IKyberNetworkProxy kyber
    )
        public
        payable
    {
        address[] memory components = set.getComponents();
        uint256[] memory units = set.getUnits();
        uint256 weightSum = 0;
        uint256[] memory weight = new uint256[](components.length);
        for (uint i = 0; i < components.length; i++) {
            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);
            weightSum = weightSum.add(weight[i]);
        }
        uint256 fitMintAmount = uint256(-1);
        for (i = 0; i < components.length; i++) {
            uint256 amount = msg.value.mul(weight[i]).div(weightSum);
            uint256 received = kyber.tradeWithHint.value(amount)(
                ETHER_ADDRESS,
                amount,
                components[i],
                this,
                1 << 255,
                0,
                0,
                ""
            );
            if (received / units[i] < fitMintAmount) {
                fitMintAmount = received / units[i];
            }
        }
        set.mint(msg.sender, fitMintAmount);
        if (address(this).balance > 0) {
            msg.sender.transfer(address(this).balance);
        }
        for (i = 0; i < components.length; i++) {
            IERC20 token = IERC20(components[i]);
            if (token.balanceOf(this) > 0) {
                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
            }
        }
    }
    function() public payable {
        require(tx.origin != msg.sender);
    }
    // function sell(
    //     ISetToken set,
    //     uint256 amount,
    //     bytes callDatas,
    //     uint[] starts // including 0 and LENGTH values
    // )
    //     public
    // {
    //     set.burn(msg.sender, amount);
    //     change(callDatas, starts);
    //     address[] memory components = set.getComponents();
    //     if (address(this).balance > 0) {
    //         msg.sender.transfer(address(this).balance);
    //     }
    //     for (uint i = 0; i < components.length; i++) {
    //         IERC20 token = IERC20(components[i]);
    //         if (token.balanceOf(this) > 0) {
    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");
    //         }
    //     }
    // }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"set","type":"address"},{"name":"kyber","type":"address"}],"name":"buy","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"ETHER_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"}]
Contract_Creation_Code_16:
608060405234801561001057600080fd5b50610903806100206000396000f3006080604052600436106100325763ffffffff60e060020a600035041663ad7fadc58114610041578063cf1d21c01461005b575b3233141561003f57600080fd5b005b61003f600160a060020a036004358116906024351661008c565b34801561006757600080fd5b50610070610851565b60408051600160a060020a039092168252519081900360200190f35b6060806000606060008060008060008a600160a060020a03166399d50d5d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561011657600080fd5b81019080805164010000000081111561012e57600080fd5b8201602081018481111561014157600080fd5b815185602082028301116401000000008211171561015e57600080fd5b505092919050505098508a600160a060020a031663027aa9f56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156101a657600080fd5b505af11580156101ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101e357600080fd5b8101908080516401000000008111156101fb57600080fd5b8201602081018481111561020e57600080fd5b815185602082028301116401000000008211171561022b57600080fd5b50509291905050509750600096508851604051908082528060200260200182016040528015610264578160200160208202803883390190505b509550600094505b88518510156103935789600160a060020a031663809a9e558a8781518110151561029257fe5b9060200190602002015173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8b898151811015156102bf57fe5b602090810290910101516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201528151606480830193928290030181600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d604081101561034357600080fd5b5051865187908790811061035357fe5b6020908102909101015285516103869087908790811061036f57fe5b60209081029091010151889063ffffffff61086916565b965060019094019361026c565b6000199350600094505b8851851015610546576103de876103d288888151811015156103bb57fe5b60209081029091010151349063ffffffff61088616565b9063ffffffff6108b416565b925089600160a060020a03166329589f618473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee868d8a81518110151561041457fe5b60209081029091018101516040805160e060020a63ffffffff8916028152600160a060020a0395861660048201526024810194909452931660448301523060648301527f80000000000000000000000000000000000000000000000000000000000000006084830152600060a4830181905260c4830181905261010060e48401526101048301529151610144808301939282900301818588803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b50505050506040513d60208110156104e557600080fd5b5051885190925084908990879081106104fa57fe5b906020019060200201518381151561050e57fe5b04101561053b57878581518110151561052357fe5b906020019060200201518281151561053757fe5b0493505b60019094019361039d565b604080517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a038d16916340c10f1991604480830192600092919082900301818387803b1580156105ad57600080fd5b505af11580156105c1573d6000803e3d6000fd5b50505060003031111590506105ff576040513390303180156108fc02916000818181858888f193505050501580156105fd573d6000803e3d6000fd5b505b600094505b885185101561084457888581518110151561061b57fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919350600092600160a060020a038516926370a0823192602480820193929182900301818787803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b505050506040513d60208110156106b357600080fd5b5051111561083957604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163a9059cbb91339184916370a08231916024808201926020929091908290030181600087803b15801561072757600080fd5b505af115801561073b573d6000803e3d6000fd5b505050506040513d602081101561075157600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b505050506040513d60208110156107ca57600080fd5b5051151561083957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b600190940193610604565b5050505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008282018381101561087b57600080fd5b8091505b5092915050565b600080831515610899576000915061087f565b508282028284828115156108a957fe5b041461087b57600080fd5b6000808083116108c357600080fd5b82848115156108ce57fe5b049493505050505600a165627a7a72305820d341b91ee0ca9e493e91914ba74126a94615b536c8d5bf35054679fd8762e96a0029
Contract_Creation_Code_ARM:



Contract Adress: 0xcb089b8ae76b5df461d40e957603f7a59aea9e0d
Contract Name: Arroundtoken
Contract_Source_Code: 
pragma solidity 0.5.0;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}
/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
 * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract ERC20 is IERC20 {
    using SafeMath for uint256;
    mapping (address => uint256) internal _balances;
    mapping (address => mapping (address => uint256)) private _allowed;
    uint256 internal _totalSupply;
    /**
    * @dev Total number of tokens in existence
    */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    /**
    * @dev Gets the balance of the specified address.
    * @param owner The address to query the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param owner address The address which owns the funds.
     * @param spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }
    /**
    * @dev Transfer token for a specified address
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * Beware that changing an allowance with this method brings the risk that someone may use both the old
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    /**
     * @dev Transfer tokens from one address to another
     * @param from address The address which you want to send tokens from
     * @param to address The address which you want to transfer to
     * @param value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }
    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param addedValue The amount of tokens to increase the allowance by.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
     * @dev Decrease the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed_[_spender] == 0. To decrement
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     * @param spender The address which will spend the funds.
     * @param subtractedValue The amount of tokens to decrease the allowance by.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
    /**
    * @dev Transfer token for a specified addresses
    * @param from The address to transfer from.
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    */
    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
}
/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
    */
    constructor() public {
        owner = msg.sender;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
    _;
    }
}
contract Claimable is Ownable {
    address public pendingOwner;
    /**
     * @dev Modifier throws if called by any account other than the pendingOwner.
     */
    modifier onlyPendingOwner() {
        require(msg.sender == pendingOwner);
        _;
    }
    /**
     * @dev Allows the current owner to set the pendingOwner address.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) onlyOwner public {
        pendingOwner = newOwner;
    }
    /**
     * @dev Allows the pendingOwner address to finalize the transfer.
     */
    function claimOwnership() onlyPendingOwner public {
        emit OwnershipTransferred(owner, pendingOwner);
        owner = pendingOwner;
        pendingOwner = address(0);
    }
}
/**
 * @title Arroundtoken
 * @dev The Arroundtoken contract is ERC20-compatible token processing contract
 * with additional  features like multiTransfer and reclaimTokens
 *
 */
contract Arroundtoken is ERC20, Claimable {
    using SafeMath for uint256;
    uint64 public constant TDE_FINISH = 1542326400;//!!!!Check before deploy
    // 1542326400  GMT: 16 November 2018 г., 00:00:00
    // 1542326399  GMT: 15 November 2018 г., 23:59:59
    //////////////////////
    // State var       ///
    //////////////////////
    string  public name;
    string  public symbol;
    uint8   public decimals;
    address public accTDE;
    address public accFoundCDF;
    address public accFoundNDF1;
    address public accFoundNDF2;
    address public accFoundNDF3;
    address public accTeam;
    address public accBounty;
    // Implementation of frozen funds
    mapping(address => uint64) public frozenAccounts;
    //////////////
    // EVENTS    //
    ///////////////
    event NewFreeze(address _acc, uint64 _timestamp);
    event BatchDistrib(uint8 cnt, uint256 batchAmount);
    /**
     * @param _accTDE - main address for token distribution
     * @param _accFoundCDF  - address for CDF Found tokens (WP)
     * @param _accFoundNDF1 - address for NDF Found tokens (WP)
     * @param _accFoundNDF2 - address for NDF Found tokens (WP)
     * @param _accFoundNDF3 - address for NDF Found tokens (WP)
     * @param _accTeam - address for team tokens, will frozzen by one year
     * @param _accBounty - address for bounty tokens 
     * @param _initialSupply - subj
     */  
    constructor (
        address _accTDE, 
        address _accFoundCDF,
        address _accFoundNDF1,
        address _accFoundNDF2,
        address _accFoundNDF3,
        address _accTeam,
        address _accBounty, 
        uint256 _initialSupply
    )
    public 
    {
        require(_accTDE       != address(0));
        require(_accFoundCDF  != address(0));
        require(_accFoundNDF1 != address(0));
        require(_accFoundNDF2 != address(0));
        require(_accFoundNDF3 != address(0));
        require(_accTeam      != address(0));
        require(_accBounty    != address(0));
        require(_initialSupply > 0);
        name           = "Arround";
        symbol         = "ARR";
        decimals       = 18;
        accTDE         = _accTDE;
        accFoundCDF    = _accFoundCDF;
        accFoundNDF1   = _accFoundNDF1;
        accFoundNDF2   = _accFoundNDF2;
        accFoundNDF3   = _accFoundNDF3;
        accTeam        = _accTeam;
        accBounty      = _accBounty;
        _totalSupply   = _initialSupply * (10 ** uint256(decimals));// All ARR tokens in the world
       //Initial token distribution
        _balances[_accTDE]       = 1104000000 * (10 ** uint256(decimals)); // TDE,      36.8%=28.6+8.2 
        _balances[_accFoundCDF]  = 1251000000 * (10 ** uint256(decimals)); // CDF,      41.7%
        _balances[_accFoundNDF1] =  150000000 * (10 ** uint256(decimals)); // 0.50*NDF, 10.0%
        _balances[_accFoundNDF2] =  105000000 * (10 ** uint256(decimals)); // 0.35*NDF, 10.0%
        _balances[_accFoundNDF3] =   45000000 * (10 ** uint256(decimals)); // 0.15*NDF, 10.0%
        _balances[_accTeam]      =  300000000 * (10 ** uint256(decimals)); // team,     10.0%
        _balances[_accBounty]    =   45000000 * (10 ** uint256(decimals)); // Bounty,    1.5%
        require(  _totalSupply ==  3000000000 * (10 ** uint256(decimals)), "Total Supply exceeded!!!");
        emit Transfer(address(0), _accTDE,       1104000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundCDF,  1251000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF1,  150000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF2,  105000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accFoundNDF3,   45000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accTeam,       300000000 * (10 ** uint256(decimals)));
        emit Transfer(address(0), _accBounty,      45000000 * (10 ** uint256(decimals)));
        //initisl freeze
        frozenAccounts[_accTeam]      = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF2] = TDE_FINISH + 31536000; //+3600*24*365 sec
        frozenAccounts[_accFoundNDF3] = TDE_FINISH + 63158400; //+(3600*24*365)*2 +3600*24(leap year 2020)
        emit NewFreeze(_accTeam,        TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF2,   TDE_FINISH + 31536000);
        emit NewFreeze(_accFoundNDF3,   TDE_FINISH + 63158400);
    }
    modifier onlyTokenKeeper() {
        require(
            msg.sender == accTDE || 
            msg.sender == accFoundCDF ||
            msg.sender == accFoundNDF1 ||
            msg.sender == accBounty
        );
        _;
    }
    function() external { } 
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transfer(address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.transfer(_to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {
        require(frozenAccounts[_from] < now);
        return super.transferFrom(_from, _to, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function approve(address _spender, uint256 _value) public  returns (bool) {
        require(frozenAccounts[msg.sender] < now);
        return super.approve(_spender, _value);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function increaseAllowance(address _spender, uint _addedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.increaseAllowance(_spender, _addedValue);
    }
    /**
     * @dev Returns standart ERC20 result with frozen accounts check
     */
    function decreaseAllowance(address _spender, uint _subtractedValue) public  returns (bool success) {
        require(frozenAccounts[msg.sender] < now);
        return super.decreaseAllowance(_spender, _subtractedValue);
    }
    /**
     * @dev Batch transfer function. Allow to save up 50% of gas
     */
    function multiTransfer(address[] calldata  _investors, uint256[] calldata   _value )  
        external 
        onlyTokenKeeper 
        returns (uint256 _batchAmount)
    {
        require(_investors.length <= 255); //audit recommendation
        require(_value.length == _investors.length);
        uint8      cnt = uint8(_investors.length);
        uint256 amount = 0;
        for (uint i=0; i<cnt; i++){
            amount = amount.add(_value[i]);
            require(_investors[i] != address(0));
            _balances[_investors[i]] = _balances[_investors[i]].add(_value[i]);
            emit Transfer(msg.sender, _investors[i], _value[i]);
        }
        require(amount <= _balances[msg.sender]);
        _balances[msg.sender] = _balances[msg.sender].sub(amount);
        emit BatchDistrib(cnt, amount);
        return amount;
    }
    /**
     * @dev Owner can claim any tokens that transfered to this contract address
     */
    function reclaimToken(ERC20 token) external onlyOwner {
        require(address(token) != address(0));
        uint256 balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
    }
}
  //***************************************************************
  // Based on best practice of https://github.com/Open Zeppelin/zeppelin-solidity
  // Adapted and amended by IBERGroup; 
  // Code released under the MIT License(see git root).
  ////**************************************************************
Contract_ABI:
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"reclaimToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_investors","type":"address[]"},{"name":"_value","type":"uint256[]"}],"name":"multiTransfer","outputs":[{"name":"_batchAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF3","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TDE_FINISH","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF1","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundCDF","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTDE","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"frozenAccounts","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accFoundNDF2","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accBounty","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"accTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_accTDE","type":"address"},{"name":"_accFoundCDF","type":"address"},{"name":"_accFoundNDF1","type":"address"},{"name":"_accFoundNDF2","type":"address"},{"name":"_accFoundNDF3","type":"address"},{"name":"_accTeam","type":"address"},{"name":"_accBounty","type":"address"},{"name":"_initialSupply","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_acc","type":"address"},{"indexed":false,"name":"_timestamp","type":"uint64"}],"name":"NewFreeze","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"cnt","type":"uint8"},{"indexed":false,"name":"batchAmount","type":"uint256"}],"name":"BatchDistrib","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0x44B173CbdFC9946963D871c3f8b680d6A7085e2c
Contract Name: lottery
Contract_Source_Code: 
pragma solidity 0.4.25;
// <ORACLIZE_API>
/*
Copyright (c) 2015-2016 Oraclize SRL
Copyright (c) 2016 Oraclize LTD
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary
pragma solidity >=0.4.18;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version
contract OraclizeI {
    address public cbAddress;
    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);
    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);
    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);
    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);
    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);
    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);
    function getPrice(string _datasource) public returns (uint _dsprice);
    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);
    function setProofType(byte _proofType) external;
    function setCustomGasPrice(uint _gasPrice) external;
    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);
}
contract OraclizeAddrResolverI {
    function getAddress() public returns (address _addr);
}
/*
Begin solidity-cborutils
https://github.com/smartcontractkit/solidity-cborutils
MIT License
Copyright (c) 2018 SmartContract ChainLink, Ltd.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
library Buffer {
    struct buffer {
        bytes buf;
        uint capacity;
    }
    function init(buffer memory buf, uint _capacity) internal pure {
        uint capacity = _capacity;
        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);
        // Allocate space for the buffer data
        buf.capacity = capacity;
        assembly {
            let ptr := mload(0x40)
            mstore(buf, ptr)
            mstore(ptr, 0)
            mstore(0x40, add(ptr, capacity))
        }
    }
    function resize(buffer memory buf, uint capacity) private pure {
        bytes memory oldbuf = buf.buf;
        init(buf, capacity);
        append(buf, oldbuf);
    }
    function max(uint a, uint b) private pure returns(uint) {
        if(a > b) {
            return a;
        }
        return b;
    }
    /**
     * @dev Appends a byte array to the end of the buffer. Resizes if doing so
     *      would exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {
        if(data.length + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, data.length) * 2);
        }
        uint dest;
        uint src;
        uint len = data.length;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Start address = buffer address + buffer length + sizeof(buffer length)
            dest := add(add(bufptr, buflen), 32)
            // Update buffer length
            mstore(bufptr, add(buflen, mload(data)))
            src := add(data, 32)
        }
        // Copy word-length chunks while possible
        for(; len >= 32; len -= 32) {
            assembly {
                mstore(dest, mload(src))
            }
            dest += 32;
            src += 32;
        }
        // Copy remaining bytes
        uint mask = 256 ** (32 - len) - 1;
        assembly {
            let srcpart := and(mload(src), not(mask))
            let destpart := and(mload(dest), mask)
            mstore(dest, or(destpart, srcpart))
        }
        return buf;
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function append(buffer memory buf, uint8 data) internal pure {
        if(buf.buf.length + 1 > buf.capacity) {
            resize(buf, buf.capacity * 2);
        }
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length)
            let dest := add(add(bufptr, buflen), 32)
            mstore8(dest, data)
            // Update buffer length
            mstore(bufptr, add(buflen, 1))
        }
    }
    /**
     * @dev Appends a byte to the end of the buffer. Resizes if doing so would
     * exceed the capacity of the buffer.
     * @param buf The buffer to append to.
     * @param data The data to append.
     * @return The original buffer.
     */
    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {
        if(len + buf.buf.length > buf.capacity) {
            resize(buf, max(buf.capacity, len) * 2);
        }
        uint mask = 256 ** len - 1;
        assembly {
            // Memory address of the buffer data
            let bufptr := mload(buf)
            // Length of existing buffer data
            let buflen := mload(bufptr)
            // Address = buffer address + buffer length + sizeof(buffer length) + len
            let dest := add(add(bufptr, buflen), len)
            mstore(dest, or(and(mload(dest), not(mask)), data))
            // Update buffer length
            mstore(bufptr, add(buflen, len))
        }
        return buf;
    }
}
library CBOR {
    using Buffer for Buffer.buffer;
    uint8 private constant MAJOR_TYPE_INT = 0;
    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
    uint8 private constant MAJOR_TYPE_BYTES = 2;
    uint8 private constant MAJOR_TYPE_STRING = 3;
    uint8 private constant MAJOR_TYPE_ARRAY = 4;
    uint8 private constant MAJOR_TYPE_MAP = 5;
    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {
        if(value <= 23) {
            buf.append(uint8((major << 5) | value));
        } else if(value <= 0xFF) {
            buf.append(uint8((major << 5) | 24));
            buf.appendInt(value, 1);
        } else if(value <= 0xFFFF) {
            buf.append(uint8((major << 5) | 25));
            buf.appendInt(value, 2);
        } else if(value <= 0xFFFFFFFF) {
            buf.append(uint8((major << 5) | 26));
            buf.appendInt(value, 4);
        } else if(value <= 0xFFFFFFFFFFFFFFFF) {
            buf.append(uint8((major << 5) | 27));
            buf.appendInt(value, 8);
        }
    }
    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {
        buf.append(uint8((major << 5) | 31));
    }
    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {
        encodeType(buf, MAJOR_TYPE_INT, value);
    }
    function encodeInt(Buffer.buffer memory buf, int value) internal pure {
        if(value >= 0) {
            encodeType(buf, MAJOR_TYPE_INT, uint(value));
        } else {
            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));
        }
    }
    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {
        encodeType(buf, MAJOR_TYPE_BYTES, value.length);
        buf.append(value);
    }
    function encodeString(Buffer.buffer memory buf, string value) internal pure {
        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);
        buf.append(bytes(value));
    }
    function startArray(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);
    }
    function startMap(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);
    }
    function endSequence(Buffer.buffer memory buf) internal pure {
        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);
    }
}
/*
End solidity-cborutils
 */
contract usingOraclize {
    uint constant day = 60*60*24;
    uint constant week = 60*60*24*7;
    uint constant month = 60*60*24*30;
    byte constant proofType_NONE = 0x00;
    byte constant proofType_TLSNotary = 0x10;
    byte constant proofType_Ledger = 0x30;
    byte constant proofType_Android = 0x40;
    byte constant proofType_Native = 0xF0;
    byte constant proofStorage_IPFS = 0x01;
    uint8 constant networkID_auto = 0;
    uint8 constant networkID_mainnet = 1;
    uint8 constant networkID_testnet = 2;
    uint8 constant networkID_morden = 2;
    uint8 constant networkID_consensys = 161;
    OraclizeAddrResolverI OAR;
    OraclizeI oraclize;
    modifier oraclizeAPI {
        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))
            oraclize_setNetwork(networkID_auto);
        if(address(oraclize) != OAR.getAddress())
            oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    modifier coupon(string code){
        oraclize = OraclizeI(OAR.getAddress());
        _;
    }
    function oraclize_setNetwork(uint8 networkID) internal returns(bool){
      return oraclize_setNetwork();
      networkID; // silence the warning and remain backwards compatible
    }
    function oraclize_setNetwork() internal returns(bool){
        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet
            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
            oraclize_setNetworkName("eth_mainnet");
            return true;
        }
        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet
            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
            oraclize_setNetworkName("eth_ropsten3");
            return true;
        }
        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet
            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
            oraclize_setNetworkName("eth_kovan");
            return true;
        }
        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet
            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
            oraclize_setNetworkName("eth_rinkeby");
            return true;
        }
        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge
            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
            return true;
        }
        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide
            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
            return true;
        }
        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity
            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
            return true;
        }
        return false;
    }
    function __callback(bytes32 myid, string result) public {
        __callback(myid, result, new bytes(0));
    }
    function __callback(bytes32 myid, string result, bytes proof) public {
      return;
      myid; result; proof; // Silence compiler warnings
    }
    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource);
    }
    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){
        return oraclize.getPrice(datasource, gaslimit);
    }
    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(0, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query.value(price)(timestamp, datasource, arg);
    }
    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(0, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);
    }
    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = stra2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        string[] memory dynargs = new string[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(0, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource);
        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN.value(price)(timestamp, datasource, args);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
        uint price = oraclize.getPrice(datasource, gaslimit);
        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
        bytes memory args = ba2cbor(argN);
        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](1);
        dynargs[0] = args[0];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](2);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](3);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](4);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs);
    }
    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(timestamp, datasource, dynargs, gaslimit);
    }
    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {
        bytes[] memory dynargs = new bytes[](5);
        dynargs[0] = args[0];
        dynargs[1] = args[1];
        dynargs[2] = args[2];
        dynargs[3] = args[3];
        dynargs[4] = args[4];
        return oraclize_query(datasource, dynargs, gaslimit);
    }
    function oraclize_cbAddress() oraclizeAPI internal returns (address){
        return oraclize.cbAddress();
    }
    function oraclize_setProof(byte proofP) oraclizeAPI internal {
        return oraclize.setProofType(proofP);
    }
    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {
        return oraclize.setCustomGasPrice(gasPrice);
    }
    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){
        return oraclize.randomDS_getSessionPubKeyHash();
    }
    function getCodeSize(address _addr) constant internal returns(uint _size) {
        assembly {
            _size := extcodesize(_addr)
        }
    }
    function parseAddr(string _a) internal pure returns (address){
        bytes memory tmp = bytes(_a);
        uint160 iaddr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i=2; i<2+2*20; i+=2){
            iaddr *= 256;
            b1 = uint160(tmp[i]);
            b2 = uint160(tmp[i+1]);
            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;
            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;
            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;
            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;
            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;
            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;
            iaddr += (b1*16+b2);
        }
        return address(iaddr);
    }
    function strCompare(string _a, string _b) internal pure returns (int) {
        bytes memory a = bytes(_a);
        bytes memory b = bytes(_b);
        uint minLength = a.length;
        if (b.length < minLength) minLength = b.length;
        for (uint i = 0; i < minLength; i ++)
            if (a[i] < b[i])
                return -1;
            else if (a[i] > b[i])
                return 1;
        if (a.length < b.length)
            return -1;
        else if (a.length > b.length)
            return 1;
        else
            return 0;
    }
    function indexOf(string _haystack, string _needle) internal pure returns (int) {
        bytes memory h = bytes(_haystack);
        bytes memory n = bytes(_needle);
        if(h.length < 1 || n.length < 1 || (n.length > h.length))
            return -1;
        else if(h.length > (2**128 -1))
            return -1;
        else
        {
            uint subindex = 0;
            for (uint i = 0; i < h.length; i ++)
            {
                if (h[i] == n[0])
                {
                    subindex = 1;
                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])
                    {
                        subindex++;
                    }
                    if(subindex == n.length)
                        return int(i);
                }
            }
            return -1;
        }
    }
    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _be = bytes(_e);
        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
        bytes memory babcde = bytes(abcde);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];
        return string(babcde);
    }
    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {
        return strConcat(_a, _b, _c, _d, "");
    }
    function strConcat(string _a, string _b, string _c) internal pure returns (string) {
        return strConcat(_a, _b, _c, "", "");
    }
    function strConcat(string _a, string _b) internal pure returns (string) {
        return strConcat(_a, _b, "", "", "");
    }
    // parseInt
    function parseInt(string _a) internal pure returns (uint) {
        return parseInt(_a, 0);
    }
    // parseInt(parseFloat*10^_b)
    function parseInt(string _a, uint _b) internal pure returns (uint) {
        bytes memory bresult = bytes(_a);
        uint mint = 0;
        bool decimals = false;
        for (uint i=0; i<bresult.length; i++){
            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){
                if (decimals){
                   if (_b == 0) break;
                    else _b--;
                }
                mint *= 10;
                mint += uint(bresult[i]) - 48;
            } else if (bresult[i] == 46) decimals = true;
        }
        if (_b > 0) mint *= 10**_b;
        return mint;
    }
    function uint2str(uint i) internal pure returns (string){
        if (i == 0) return "0";
        uint j = i;
        uint len;
        while (j != 0){
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (i != 0){
            bstr[k--] = byte(48 + i % 10);
            i /= 10;
        }
        return string(bstr);
    }
    using CBOR for Buffer.buffer;
    function stra2cbor(string[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeString(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    function ba2cbor(bytes[] arr) internal pure returns (bytes) {
        safeMemoryCleaner();
        Buffer.buffer memory buf;
        Buffer.init(buf, 1024);
        buf.startArray();
        for (uint i = 0; i < arr.length; i++) {
            buf.encodeBytes(arr[i]);
        }
        buf.endSequence();
        return buf.buf;
    }
    string oraclize_network_name;
    function oraclize_setNetworkName(string _network_name) internal {
        oraclize_network_name = _network_name;
    }
    function oraclize_getNetworkName() internal view returns (string) {
        return oraclize_network_name;
    }
    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){
        require((_nbytes > 0) && (_nbytes <= 32));
        // Convert from seconds to ledger timer ticks
        _delay *= 10;
        bytes memory nbytes = new bytes(1);
        nbytes[0] = byte(_nbytes);
        bytes memory unonce = new bytes(32);
        bytes memory sessionKeyHash = new bytes(32);
        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
        assembly {
            mstore(unonce, 0x20)
            // the following variables can be relaxed
            // check relaxed random contract under ethereum-examples repo
            // for an idea on how to override and replace comit hash vars
            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))
            mstore(sessionKeyHash, 0x20)
            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)
        }
        bytes memory delay = new bytes(32);
        assembly {
            mstore(add(delay, 0x20), _delay)
        }
        bytes memory delay_bytes8 = new bytes(8);
        copyBytes(delay, 24, 8, delay_bytes8, 0);
        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];
        bytes32 queryId = oraclize_query("random", args, _customGasLimit);
        bytes memory delay_bytes8_left = new bytes(8);
        assembly {
            let x := mload(add(delay_bytes8, 0x20))
            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))
            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))
        }
        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));
        return queryId;
    }
    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {
        oraclize_randomDS_args[queryId] = commitment;
    }
    mapping(bytes32=>bytes32) oraclize_randomDS_args;
    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;
    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){
        bool sigok;
        address signer;
        bytes32 sigr;
        bytes32 sigs;
        bytes memory sigr_ = new bytes(32);
        uint offset = 4+(uint(dersig[3]) - 0x20);
        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);
        bytes memory sigs_ = new bytes(32);
        offset += 32 + 2;
        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);
        assembly {
            sigr := mload(add(sigr_, 32))
            sigs := mload(add(sigs_, 32))
        }
        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);
        if (address(keccak256(pubkey)) == signer) return true;
        else {
            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);
            return (address(keccak256(pubkey)) == signer);
        }
    }
    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {
        bool sigok;
        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)
        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);
        copyBytes(proof, sig2offset, sig2.length, sig2, 0);
        bytes memory appkey1_pubkey = new bytes(64);
        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);
        bytes memory tosign2 = new bytes(1+65+32);
        tosign2[0] = byte(1); //role
        copyBytes(proof, sig2offset-65, 65, tosign2, 1);
        bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);
        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);
        if (sigok == false) return false;
        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)
        bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
        bytes memory tosign3 = new bytes(1+65);
        tosign3[0] = 0xFE;
        copyBytes(proof, 3, 65, tosign3, 1);
        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);
        copyBytes(proof, 3+65, sig3.length, sig3, 0);
        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);
        return sigok;
    }
    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        require((_proof[0] == "L") && (_proof[1] == "P") && (_proof[2] == 1));
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        require(proofVerified);
        _;
    }
    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){
        // Step 1: the prefix has to match 'LP\x01' (Ledger Proof version 1)
        if ((_proof[0] != "L")||(_proof[1] != "P")||(_proof[2] != 1)) return 1;
        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
        if (proofVerified == false) return 2;
        return 0;
    }
    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){
        bool match_ = true;
        require(prefix.length == n_random_bytes);
        for (uint256 i=0; i< n_random_bytes; i++) {
            if (content[i] != prefix[i]) match_ = false;
        }
        return match_;
    }
    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){
        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)
        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;
        bytes memory keyhash = new bytes(32);
        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);
        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;
        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);
        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);
        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)
        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;
        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.
        // This is to verify that the computed args match with the ones specified in the query.
        bytes memory commitmentSlice1 = new bytes(8+1+32);
        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);
        bytes memory sessionPubkey = new bytes(64);
        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;
        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);
        bytes32 sessionPubkeyHash = sha256(sessionPubkey);
        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match
            delete oraclize_randomDS_args[queryId];
        } else return false;
        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)
        bytes memory tosign1 = new bytes(32+8+1+32);
        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);
        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;
        // verify if sessionPubkeyHash was verified already, if not.. let's do it!
        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){
            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);
        }
        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {
        uint minLength = length + toOffset;
        // Buffer too small
        require(to.length >= minLength); // Should be a better way?
        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables
        uint i = 32 + fromOffset;
        uint j = 32 + toOffset;
        while (i < (32 + fromOffset + length)) {
            assembly {
                let tmp := mload(add(from, i))
                mstore(add(to, j), tmp)
            }
            i += 32;
            j += 32;
        }
        return to;
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    // Duplicate Solidity's ecrecover, but catching the CALL return value
    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {
        // We do our own memory management here. Solidity uses memory offset
        // 0x40 to store the current end of memory. We write past it (as
        // writes are memory extensions), but don't update the offset so
        // Solidity will reuse it. The memory used here is only needed for
        // this context.
        // FIXME: inline assembly can't access return values
        bool ret;
        address addr;
        assembly {
            let size := mload(0x40)
            mstore(size, hash)
            mstore(add(size, 32), v)
            mstore(add(size, 64), r)
            mstore(add(size, 96), s)
            // NOTE: we can reuse the request memory because we deal with
            //       the return code
            ret := call(3000, 1, 0, size, 128, size, 32)
            addr := mload(size)
        }
        return (ret, addr);
    }
    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license
    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {
        bytes32 r;
        bytes32 s;
        uint8 v;
        if (sig.length != 65)
          return (false, 0);
        // The signature format is a compact form of:
        //   {bytes32 r}{bytes32 s}{uint8 v}
        // Compact means, uint8 is not padded to 32 bytes.
        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            // Here we are loading the last 32 bytes. We exploit the fact that
            // 'mload' will pad with zeroes if we overread.
            // There is no 'mload8' to do this, but that would be nicer.
            v := byte(0, mload(add(sig, 96)))
            // Alternative solution:
            // 'byte' is not working due to the Solidity parser, so lets
            // use the second best option, 'and'
            // v := and(mload(add(sig, 65)), 255)
        }
        // albeit non-transactional signatures are not specified by the YP, one would expect it
        // to match the YP range of [27, 28]
        //
        // geth uses [0, 1] and some clients have followed. This might change, see:
        //  https://github.com/ethereum/go-ethereum/issues/2053
        if (v < 27)
          v += 27;
        if (v != 27 && v != 28)
            return (false, 0);
        return safer_ecrecover(hash, v, r, s);
    }
    function safeMemoryCleaner() internal pure {
        assembly {
            let fmem := mload(0x40)
            codecopy(fmem, codesize, sub(msize, fmem))
        }
    }
}
// </ORACLIZE_API>
/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
contract SafeMath {
/**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;
    return c;
  }
  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}
contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  /**
    * @dev The Ownable constructor sets the original `owner` of the contract to the sender
    * account.
  */
  constructor() public {
    owner = msg.sender;
  }
  /**
    * @dev Throws if called by any account other than the owner.
  */
  modifier onlyOwner() {
    require(msg.sender == owner, "sender is not owner");
    _;
  }
  /**
    * @dev Allows the current owner to transfer control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
  */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0), "newOwner addres is zero");
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}
contract lottery is Ownable, usingOraclize, SafeMath {
  /*
    * checks only Drawer address is calling
  */
  modifier onlyDrawer() {
    require(msg.sender == drawerAddress || msg.sender == owner, "sender is not drawerAddress");
    _;
  }
  /*
    * checks address is zero or not.
  */
  modifier isAddressZero {
    require(msg.sender != address(0), "new address is zero");
    _;
  }
  struct Game {
    uint endTime;
    uint ticketPrice;
    uint accumJackpotAmounts;
    bytes winningNumbers;
    bytes32 queryId;
    Ticket[] tickets;
    string hashString;
    mapping (byte => bool) winNumMapping;
    mapping (address => uint) playerTicketCount;
    mapping (uint => uint) winPlayersCount;
    mapping (uint => bool) winners;
  }
  struct Ticket {
    uint256 time;
    address player;
    bytes   numbers;
  }
  address public adminAddress;
  address public drawerAddress;
  address public feeAddress;
  bool public gameStatus;
  uint public adminFee;
  uint public gameNumber;
  uint public numbersStart;
  uint public numbersCount;
  uint public numbersCountMax;
  uint public ticketPrice;
  uint public prizeStart;
  uint public prizeNumCount;
  uint[] public winPercent;
  uint public orclizeGasPrice;
  mapping (uint => Game) public games;
  // For Players Event
  event LogBuyTicket(uint _time, address _player, bytes _numbers, uint _count, uint _ticketTotalCount);
  // For Owner Event
  event LogEndGameBegin(bool _success);
  event LogEndGameSuccess(bool _success);
  event LogEndGameFail(bool _success);
  event LogStartNewGame(bool _start, uint _gameNumber, bytes _winNumbers);
  constructor() public payable {
    // sets the Ledger authenticity proof in the constructor
    oraclize_setProof(proofType_Ledger);
    // Lottery numbers range ( numbersStart <= gameNumbers <= numbersCountMax)
    numbersStart = 1;
    numbersCount = 5;
    numbersCountMax = 25;
    ticketPrice = .01 ether;
    winPercent = [0, 0, 0, 20, 20, 60];
    prizeStart = 3;   //winPercent Index start
    prizeNumCount = 3;
    // operator`s fee 10%
    adminAddress = msg.sender;
    drawerAddress = 0xd36C57086c9fC2d06C3009207F0d4D818CAc4F63;
    feeAddress = 0x798F4A40dc6C45a812f1549402E3D9E5BA5fc9a5;
    adminFee = 10;
    gameStatus = true;
    games[gameNumber].ticketPrice = ticketPrice;
    // oraclize paramaters
    orclizeGasPrice = 400000;
  }
  /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/
  function setAdminAddress(address _admin) public onlyOwner isAddressZero {
    adminAddress = _admin;
  }
  function setDrawerAddress(address _drawer) public onlyOwner isAddressZero {
    drawerAddress = _drawer;
  }
  function setFeeAddress(address _feeAddr) public onlyOwner isAddressZero {
    feeAddress = _feeAddr;
  }
  function setAdminFee(uint _fee) public onlyOwner isAddressZero {
    require(_fee >= 0, "Fee is under 0");
    adminFee = _fee;
  }
  function setTicketPrice(uint _price) public onlyOwner isAddressZero {
    require(_price >= 0, "Price is under 0");
    ticketPrice = _price;
  }
  function kill() public onlyOwner isAddressZero {
    selfdestruct(owner);
  }
  function startGame(uint _carryOverJackpot, uint[] _totalWinCount) external onlyDrawer {
    // Set game win players count.
    for(uint i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < _totalWinCount[i]) {
        games[gameNumber].winPlayersCount[i] = _totalWinCount[i];
      }
    }
    // Start New Game.
    gameNumber++;
    games[gameNumber].ticketPrice = ticketPrice;
    games[gameNumber].accumJackpotAmounts = _carryOverJackpot;
    gameStatus = true;
    emit LogStartNewGame(gameStatus, gameNumber-1, games[gameNumber-1].winningNumbers);
  }
  function endGame() external onlyDrawer {
    gameStatus = false;
    uint numberOfBytes = 28; // number of random bytes we want the datasource to return
    uint delay = 0; // number of seconds to wait before the execution takes place
    uint callbackGas = orclizeGasPrice; // amount of gas we want Oraclize to set for the callback function
    // this function internally generates the correct oraclize_query and returns its queryId
    games[gameNumber].queryId = oraclize_newRandomDSQuery(delay, numberOfBytes, callbackGas);
    emit LogEndGameBegin(true);
  }
  function buyTicket(bytes _ticketNumber, uint _ticketCount) external payable {
    require(gameStatus, "game is processing sth");
    require(_ticketCount > 0, "ticket count should be not under 0");
    require(msg.value == mul(ticketPrice, _ticketCount), "ticket price is not equal");
    require(_ticketNumber.length == mul(numbersCount, _ticketCount), "ticket number`s length is not match");
    bytes memory pickNumbers = new bytes(numbersCount);
    for(uint i = 0; i < _ticketCount; i++) {
      for(uint j = 0; j < numbersCount; j++) {
        pickNumbers[j] = _ticketNumber[j + (numbersCount * i)];
        require(checkPickNumbers(pickNumbers[j]), "player`s pick number is wrong");
      }
      require(checkDuplicates(pickNumbers), "Lottery Numbers are duplicated");
      games[gameNumber].tickets.push(Ticket(block.timestamp, msg.sender, pickNumbers));
      games[gameNumber].playerTicketCount[msg.sender]++;
    }
    emit LogBuyTicket(block.timestamp, msg.sender, _ticketNumber, _ticketCount, games[gameNumber].tickets.length);
  }
  function getGameHistory(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint accumJackpot,
      uint ticketCount,
      uint adminFee,
      uint[] winningPercent,
      uint[] winPlayersCount,
      uint[] winNumbers
  ) {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    winNumbers = new uint[](numbersCount);
    winningPercent = new uint[](numbersCount + 1);
    winPlayersCount = new uint[](numbersCount + 1);
    uint numbersIndex;
    // save endtime and jackpot.
    endTime = games[_gameNumber].endTime;
    ticketCount = tickets.length;
    winningPercent = winPercent;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    adminFee = adminFee;
    // save game win numbers.
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        winNumbers[numbersIndex++] = i;
      }
    }
    // save game winners
    for(i = prizeStart; i < numbersCount + 1; i++) {
      winPlayersCount[i] = games[_gameNumber].winPlayersCount[i];
    }
  }
  function getPlayerAllTickets(address _player, uint _start, uint _end) external view 
    returns (
      uint[] winNumbers,
      uint[] myTickets
    )
  {
    require(_player != address(0),"address should be not 0");
    winNumbers = new uint[]((_end - _start) * numbersCount);
    uint winNumbersIndex;
    uint playerTicketIndex;
    uint playerTicketCount;
    // get all game win numbers.
    for(uint i = _start; i < _end; i++) {
      playerTicketCount += games[i].playerTicketCount[_player];
      for(uint j = 1; j < numbersCountMax + 1; j++) {
        if(games[i].winNumMapping[byte(j)]) {
          winNumbers[winNumbersIndex++] = j;
        }
      }
    }
    // get all player tickets.
    // numbersCount + 1 for gameNumber
    myTickets = new uint[](playerTicketCount * (numbersCount + 1));
    for(i = _start; i < _end; i++) {
      for(j = 0; j < games[i].tickets.length; j++) {
        if(games[i].tickets[j].player == _player) {
          // set Game Number
          myTickets[playerTicketIndex++] = i;
          // set Player Numbers
          for(uint k = 0; k < numbersCount; k++) {
            myTickets[playerTicketIndex++] = uint(games[i].tickets[j].numbers[k]);
          }
        }
      }
    }
  }
  function getPlayerTickets(address _player, uint _gameNumber) external view 
    returns (
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(_player != address(0),"address should be not 0");
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    Ticket[] memory tickets = games[_gameNumber].tickets;
    numbers = new uint[](games[_gameNumber].playerTicketCount[_player] * numbersCount);
    time = new uint[](games[_gameNumber].playerTicketCount[_player]);
    uint timeIndex;
    uint numbersIndex;
    for(uint i = 0; i < tickets.length; i++) {
      if(tickets[i].player == _player) {
        time[timeIndex++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameWinners(uint _gameNumber) 
    external 
    view 
    returns (
      address[] player,
      uint[] time, 
      uint[] numbers
    ) 
  {
    require(0 <= _gameNumber && _gameNumber <= gameNumber, "game number is error");
    uint length;
    for(uint i = prizeStart; i < numbersCount + 1; i++){
      length += games[_gameNumber].winPlayersCount[i];
    }
    Ticket[] memory tickets = games[_gameNumber].tickets;
    player = new address[](length);
    time = new uint[](length);
    numbers = new uint[](length * numbersCount);
    uint index;
    uint numbersIndex;
    for(i = 0; i < tickets.length; i++) {
      if(games[_gameNumber].winners[i]) {
        player[index] = tickets[i].player;
        time[index++] = tickets[i].time;
        for(uint k = 0; k < numbersCount; k++) {
          numbers[numbersIndex++] = uint(tickets[i].numbers[k]);
        }
      }
    }
  }
  function getGameDetails(uint _gameNumber) external view 
    returns (
      uint endTime,
      uint ticketPrice,
      uint ticketCount,
      uint accumJackpot,
      uint[] gameReward,
      uint[] numbers
    ) 
  {
    require(_gameNumber >= 0, "Game Number should be over 0");
    numbers = new uint[](numbersCount);
    gameReward = new uint[](numbersCount + 1);
    uint index;
    endTime = games[_gameNumber].endTime;
    ticketPrice = games[_gameNumber].ticketPrice;
    ticketCount = games[_gameNumber].tickets.length;
    accumJackpot = games[_gameNumber].accumJackpotAmounts;
    gameReward = winPercent;
    for(uint i = 1; i < numbersCountMax + 1; i++) {
      if(games[_gameNumber].winNumMapping[byte(i)]) {
        numbers[index++] = i;
      }
    }
  }
  function __callback(bytes32 _queryId, string _result, bytes _proof) public
  {
    require(msg.sender == oraclize_cbAddress(), "Should be eqaul to request");
    if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) == 0) {
      if(games[gameNumber].queryId == _queryId) {
        games[gameNumber].endTime = block.timestamp;
        uint jackpot = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice);// + games[gameNumber].accumJackpotAmounts;
        // send ethereum for operation cost.
        if(jackpot > 0) {
          feeAddress.transfer((jackpot * adminFee) / 100);
        }
        games[gameNumber].hashString = _result;
        games[gameNumber].winningNumbers = generateRandom(games[gameNumber].hashString, numbersCount, numbersCountMax);
        for (uint i = 0; i < games[gameNumber].winningNumbers.length; i++) {
          games[gameNumber].winNumMapping[games[gameNumber].winningNumbers[i]] = true;
        }
        emit LogEndGameSuccess(true);
      }
    }
    else {
      emit LogEndGameFail(false);
    }
  }
  function getGameDrawInfos() external view 
    returns (
      uint carryOverJackpot,
      uint totalTicketCount,
      uint totalWinPlayersCount,
      uint[] totalWinCount,
      uint[] playersAmounts
    ) 
  {
    uint jackpotAmounts = (games[gameNumber].tickets.length * games[gameNumber].ticketPrice) + games[gameNumber].accumJackpotAmounts;
    jackpotAmounts -= ((games[gameNumber].tickets.length * games[gameNumber].ticketPrice) * adminFee) / 100;
    totalWinCount = new uint[](numbersCount + 1);
    playersAmounts = new uint[](numbersCount + 1);
    uint winNumberCount;
    uint sendedJackpotAmounts;
    // 1. pick win players.
    for(uint i = 0; i < games[gameNumber].tickets.length; i++) {
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if( games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])] ) {
          winNumberCount++;
        }
      }
      // 2. Win players counting.
      if(prizeStart <= winNumberCount) {
        totalWinCount[winNumberCount]++;
        totalWinPlayersCount++;
      }
      winNumberCount = 0;
    }
    // 3. calculate winners prizes.
    for(i = prizeStart; i < numbersCount + 1; i++) {
      if(0 < totalWinCount[i]) {
        playersAmounts[i] = (jackpotAmounts * winPercent[i] / 100) / totalWinCount[i];
        sendedJackpotAmounts += (jackpotAmounts * winPercent[i] / 100);
      }
    }
    // 4. Set to carry over jackpot amounts.
    carryOverJackpot = jackpotAmounts - sendedJackpotAmounts;
    // 5. Set Total Ticket Count.
    totalTicketCount = games[gameNumber].tickets.length;
  }
  function getWinners(uint _start, uint _end) external view 
    returns (
      uint[] index,
      uint[] winCount
    ) 
  {
    uint ticketIndex;
    uint winNumberCount;
    index = new uint[](getWinnersCount(_start, _end));
    winCount = new uint[](getWinnersCount(_start, _end));
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // set winners
      if(prizeStart <= winNumberCount) {
        index[ticketIndex] = i;
        winCount[ticketIndex++] = winNumberCount;
      }
      winNumberCount = 0;
    }
  }
  function () public payable {
  }
  function sendRewardToPlayers(uint[] _winnerIndex, uint[] _winReward) external onlyDrawer {
    require(_winnerIndex.length > 0, "winner index is empty");
    require(_winReward.length > 0, "win numbers count is empty");
    for(uint i = 0; i < _winnerIndex.length; i++) {
      games[gameNumber].winners[_winnerIndex[i]] = true;
      games[gameNumber].tickets[_winnerIndex[i]].player.transfer(_winReward[i]);
    }
  }
  function generateRandom(string _stringHash, uint numbersCount, uint numbersCountMax) 
    internal
    pure 
    returns (
      bytes
    ) 
  {
    bytes32 random = keccak256(_stringHash);
    bytes memory allNumbers = new bytes(numbersCountMax);
    bytes memory winNumbers = new bytes(numbersCount);
    for (uint i = 0; i < numbersCountMax; i++) {
      allNumbers[i] = byte(i + 1);
    }
    for (i = 0; i < numbersCount; i++) {
      uint n = numbersCountMax - i;
      uint r = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % n;
      winNumbers[i] = allNumbers[r];
      allNumbers[r] = allNumbers[n - 1];
    }
    return winNumbers;
  }
  function getWinnersCount(uint _start, uint _end) internal view returns (uint ret) 
  {
    uint winNumberCount;
    for(uint i = _start; i < _end; i++) {
      // find winners
      for (uint k = 0; k < games[gameNumber].winningNumbers.length; k++) {
        if(games[gameNumber].winNumMapping[byte(games[gameNumber].tickets[i].numbers[k])]) {
          winNumberCount++;
        }
      }
      // increase winner players count
      if(prizeStart <= winNumberCount) {
        ret++;
      }
      winNumberCount = 0;
    }
  }
  function checkPickNumbers(byte _number) internal returns (bool) {
    if(numbersStart <= uint(_number) && uint(_number) <= numbersCountMax) {
      return true;
    } else {
      return false;
    }
  }
  function checkDuplicates(bytes _array) internal pure returns (bool) {
    for (uint i = 0; i < _array.length - 1; i++) {
      for (uint j = i + 1; j < _array.length; j++) {
        if (_array[i] == _array[j]) return false;
      }
    }
    return true;
  }
}
Contract_ABI:
[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"games","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"accumJackpotAmounts","type":"uint256"},{"name":"winningNumbers","type":"bytes"},{"name":"queryId","type":"bytes32"},{"name":"hashString","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ticketPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"}],"name":"setTicketPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameDetails","outputs":[{"name":"endTime","type":"uint256"},{"name":"ticketPrice","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"gameReward","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameWinners","outputs":[{"name":"player","type":"address[]"},{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"myid","type":"bytes32"},{"name":"result","type":"string"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getWinners","outputs":[{"name":"index","type":"uint256[]"},{"name":"winCount","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_admin","type":"address"}],"name":"setAdminAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"drawerAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_winnerIndex","type":"uint256[]"},{"name":"_winReward","type":"uint256[]"}],"name":"sendRewardToPlayers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_queryId","type":"bytes32"},{"name":"_result","type":"string"},{"name":"_proof","type":"bytes"}],"name":"__callback","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feeAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"winPercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_ticketNumber","type":"bytes"},{"name":"_ticketCount","type":"uint256"}],"name":"buyTicket","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getGameDrawInfos","outputs":[{"name":"carryOverJackpot","type":"uint256"},{"name":"totalTicketCount","type":"uint256"},{"name":"totalWinPlayersCount","type":"uint256"},{"name":"totalWinCount","type":"uint256[]"},{"name":"playersAmounts","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"endGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"gameStatus","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"numbersStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"orclizeGasPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_feeAddr","type":"address"}],"name":"setFeeAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_fee","type":"uint256"}],"name":"setAdminFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_start","type":"uint256"},{"name":"_end","type":"uint256"}],"name":"getPlayerAllTickets","outputs":[{"name":"winNumbers","type":"uint256[]"},{"name":"myTickets","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeStart","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_player","type":"address"},{"name":"_gameNumber","type":"uint256"}],"name":"getPlayerTickets","outputs":[{"name":"time","type":"uint256[]"},{"name":"numbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_gameNumber","type":"uint256"}],"name":"getGameHistory","outputs":[{"name":"endTime","type":"uint256"},{"name":"accumJackpot","type":"uint256"},{"name":"ticketCount","type":"uint256"},{"name":"adminFee","type":"uint256"},{"name":"winningPercent","type":"uint256[]"},{"name":"winPlayersCount","type":"uint256[]"},{"name":"winNumbers","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_drawer","type":"address"}],"name":"setDrawerAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_carryOverJackpot","type":"uint256"},{"name":"_totalWinCount","type":"uint256[]"}],"name":"startGame","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"gameNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"prizeNumCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"numbersCountMax","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_time","type":"uint256"},{"indexed":false,"name":"_player","type":"address"},{"indexed":false,"name":"_numbers","type":"bytes"},{"indexed":false,"name":"_count","type":"uint256"},{"indexed":false,"name":"_ticketTotalCount","type":"uint256"}],"name":"LogBuyTicket","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameBegin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_success","type":"bool"}],"name":"LogEndGameFail","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_start","type":"bool"},{"indexed":false,"name":"_gameNumber","type":"uint256"},{"indexed":false,"name":"_winNumbers","type":"bytes"}],"name":"LogStartNewGame","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}]
Contract_Creation_Code_16:

Contract_Creation_Code_ARM:



Contract Adress: 0xa85ded59ef1824154615bf2a88d136d1356839ac
Contract Name: Lottery
Contract_Source_Code: 
pragma solidity ^0.4.24;
library SafeMath {
  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (_a == 0) {
      return 0;
    }
    c = _a * _b;
    assert(c / _a == _b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // assert(_b > 0); // Solidity automatically throws when dividing by 0
    // uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
    return _a / _b;
  }
  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    assert(_b <= _a);
    return _a - _b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
    c = _a + _b;
    assert(c >= _a);
    return c;
  }
}
contract Lottery {
    using SafeMath for uint256;
    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%
    uint256[] public DAILY_INTEREST = [111, 133, 222, 333, 444];        // 1.11%, 2.22%, 3.33%, 4.44%
    uint256 public MARKETING_AND_TEAM_FEE = 1000;                       // 10%
    uint256 public referralPercents = 1000;                             // 10%
    uint256 constant public MAX_DIVIDEND_RATE = 25000;                  // 250%
    uint256 constant public MINIMUM_DEPOSIT = 100 finney;               // 0.1 eth
    uint256 public wave = 0;
    struct Deposit {
        uint256 amount;
        uint256 interest;
        uint256 withdrawedRate;
    }
    struct User {
        address referrer;
        uint256 referralAmount;
        uint256 firstTime;
        uint256 lastPayment;
        Deposit[] deposits;
        uint256 referBonus;
    }
    address public marketingAndTeam = 0xFaea7fa229C29526698657e7Ab7063E20581A50c; // need to change
    address public owner = 0x4e3e605b9f7b333e413E1CD9E577f2eba447f876;
    mapping(uint256 => mapping(address => User)) public users;
    event InvestorAdded(address indexed investor);
    event ReferrerAdded(address indexed investor, address indexed referrer);
    event DepositAdded(address indexed investor, uint256 indexed depositsCount, uint256 amount);
    event UserDividendPayed(address indexed investor, uint256 dividend);
    event DepositDividendPayed(address indexed investor, uint256 indexed index, uint256 deposit, uint256 totalPayed, uint256 dividend);
    event FeePayed(address indexed investor, uint256 amount);
    event BalanceChanged(uint256 balance);
    event NewWave();
    function() public payable {
        if(msg.value == 0) {
            // Dividends
            withdrawDividends();
            return;
        }
        // Deposit
        doInvest();
    }
    function withdrawDividends() internal {
        uint256 dividendsSum = getDividends(msg.sender);
        require(dividendsSum > 0);
        if (address(this).balance <= dividendsSum) {
            wave = wave.add(1);
            dividendsSum = address(this).balance;
            emit NewWave();
        }
        msg.sender.transfer(dividendsSum);
        emit UserDividendPayed(msg.sender, dividendsSum);
        emit BalanceChanged(address(this).balance);
    }
    function getDividends(address wallet) internal returns(uint256 sum) {
        User storage user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawRate = dividendRate(msg.sender, i);
            user.deposits[i].withdrawedRate = user.deposits[i].withdrawedRate.add(withdrawRate);
            sum = sum.add(user.deposits[i].amount.mul(withdrawRate).div(ONE_HUNDRED_PERCENTS));
            emit DepositDividendPayed(
                msg.sender,
                i,
                user.deposits[i].amount,
                user.deposits[i].amount.mul(user.deposits[i].withdrawedRate.div(ONE_HUNDRED_PERCENTS)),
                user.deposits[i].amount.mul(withdrawRate.div(ONE_HUNDRED_PERCENTS))
            );
        }
        user.lastPayment = now;
        sum = sum.add(user.referBonus);
        user.referBonus = 0;
    }
    function dividendRate(address wallet, uint256 index) internal view returns(uint256 rate) {
        User memory user = users[wave][wallet];
        uint256 duration = now.sub(user.lastPayment);
        rate = user.deposits[index].interest.mul(duration).div(1 days);
        uint256 leftRate = MAX_DIVIDEND_RATE.sub(user.deposits[index].withdrawedRate);
        rate = min(rate, leftRate);
    }
    function doInvest() internal {
        uint256 investment = msg.value;
        require (investment >= MINIMUM_DEPOSIT);
        User storage user = users[wave][msg.sender];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(msg.sender);
        }
        // Add referral if possible
        if (user.referrer == address(0) && msg.data.length == 20 && user.firstTime == now) {
            address newReferrer = _bytesToAddress(msg.data);
            if (newReferrer != address(0) && newReferrer != msg.sender && users[wave][newReferrer].firstTime > 0) {
                user.referrer = newReferrer;
                emit ReferrerAdded(msg.sender, newReferrer);
            }
        }
        // Referrers fees
        if (user.referrer != address(0)) {
            uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
            users[wave][user.referrer].referralAmount = users[wave][user.referrer].referralAmount.add(investment);
            users[wave][user.referrer].referBonus = users[wave][user.referrer].referBonus.add(refAmount);
        }
        // Reinvest
        investment = investment.add(getDividends(msg.sender));
        // Create deposit
        user.deposits.push(Deposit({
            amount: investment,
            interest: getUserInterest(msg.sender),
            withdrawedRate: 0
        }));
        emit DepositAdded(msg.sender, user.deposits.length, investment);
        // Marketing and Team fee
        uint256 marketingAndTeamFee = msg.value.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
        marketingAndTeam.transfer(marketingAndTeamFee);
        emit FeePayed(msg.sender, marketingAndTeamFee);
        emit BalanceChanged(address(this).balance);
    }
    function getUserInterest(address wallet) public view returns (uint256) {
        User memory user = users[wave][wallet];
        if (user.referralAmount < 1 ether) {
            if(user.referrer == address(0)) return DAILY_INTEREST[0];
            return DAILY_INTEREST[1];
        } else if (user.referralAmount < 10 ether) {
            return DAILY_INTEREST[2];
        } else if (user.referralAmount < 20 ether) {
            return DAILY_INTEREST[3];
        } else {
            return DAILY_INTEREST[4];
        }
    }
    function _bytesToAddress(bytes data) private pure returns(address addr) {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            addr := mload(add(data, 20)) 
        }
    }
    function min(uint256 a, uint256 b) internal pure returns(uint256) {
        if(a < b) return a;
        return b;
    }
    function dividendsSumForUser(address wallet) external view returns(uint256 dividendsSum) {
        User memory user = users[wave][wallet];
        for (uint i = 0; i < user.deposits.length; i++) {
            uint256 withdrawAmount = user.deposits[i].amount.mul(dividendRate(wallet, i)).div(ONE_HUNDRED_PERCENTS);
            dividendsSum = dividendsSum.add(withdrawAmount);
        }
        dividendsSum = dividendsSum.add(user.referBonus);
        dividendsSum = min(dividendsSum, address(this).balance);
    }
    function changeInterest(uint256[] interestList) external {
        require(address(msg.sender) == owner);
        DAILY_INTEREST = interestList;
    }
    function changeTeamFee(uint256 feeRate) external {
        require(address(msg.sender) == owner);
        MARKETING_AND_TEAM_FEE = feeRate;
    }
    function virtualInvest(address from, uint256 amount) public {
        require(address(msg.sender) == owner);
        User storage user = users[wave][from];
        if (user.firstTime == 0) {
            user.firstTime = now;
            user.lastPayment = now;
            emit InvestorAdded(from);
        }
        // Reinvest
        amount = amount.add(getDividends(from));
        user.deposits.push(Deposit({
            amount: amount,
            interest: getUserInterest(from),
            withdrawedRate: 0
        }));
        emit DepositAdded(from, user.deposits.length, amount);
    }
}
Contract_ABI:
[{"constant":false,"inputs":[{"name":"feeRate","type":"uint256"}],"name":"changeTeamFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"marketingAndTeam","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"DAILY_INTEREST","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"wave","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"amount","type":"uint256"}],"name":"virtualInvest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"ONE_HUNDRED_PERCENTS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MARKETING_AND_TEAM_FEE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"address"}],"name":"users","outputs":[{"name":"referrer","type":"address"},{"name":"referralAmount","type":"uint256"},{"name":"firstTime","type":"uint256"},{"name":"lastPayment","type":"uint256"},{"name":"referBonus","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"getUserInterest","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MAX_DIVIDEND_RATE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"referralPercents","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"interestList","type":"uint256[]"}],"name":"changeInterest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"wallet","type":"address"}],"name":"dividendsSumForUser","outputs":[{"name":"dividendsSum","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MINIMUM_DEPOSIT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"}],"name":"InvestorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"referrer","type":"address"}],"name":"ReferrerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"depositsCount","type":"uint256"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"DepositAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"UserDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":true,"name":"index","type":"uint256"},{"indexed":false,"name":"deposit","type":"uint256"},{"indexed":false,"name":"totalPayed","type":"uint256"},{"indexed":false,"name":"dividend","type":"uint256"}],"name":"DepositDividendPayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"investor","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"FeePayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"balance","type":"uint256"}],"name":"BalanceChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"NewWave","type":"event"}]
Contract_Creation_Code_16:
608060405260a060405190810160405280606f61ffff168152602001608561ffff16815260200160de61ffff16815260200161014d61ffff1681526020016101bc61ffff1681525060009060056200005992919062000129565b506103e86001556103e8600255600060035573faea7fa229c29526698657e7ab7063e20581a50c600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550734e3e605b9f7b333e413e1cd9e577f2eba447f876600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200012257600080fd5b50620001a9565b8280548282559060005260206000209081019282156200016e579160200282015b828111156200016d578251829061ffff169055916020019190600101906200014a565b5b5090506200017d919062000181565b5090565b620001a691905b80821115620001a257600081600090555060010162000188565b5090565b90565b611d1580620001b96000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063072419f4146100fc5780630947140f1461012957806331ddcc57146101805780636fe15b44146101c15780637247a50d146101ec57806375272043146102395780638da5cb5b14610264578063a1215b3e146102bb578063b9d02df4146102e6578063bf8853c61461038f578063d0056f89146103e6578063e623f34714610411578063ea727ba21461043c578063ebe4c0d114610477578063f19451d8146104ce575b60003414156100f1576100ec6104f9565b6100fa565b6100f961067e565b5b005b34801561010857600080fd5b5061012760048036038101908080359060200190929190505050610e32565b005b34801561013557600080fd5b5061013e610e98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018c57600080fd5b506101ab60048036038101908080359060200190929190505050610ebe565b6040518082815260200191505060405180910390f35b3480156101cd57600080fd5b506101d6610ee1565b6040518082815260200191505060405180910390f35b3480156101f857600080fd5b50610237600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ee7565b005b34801561024557600080fd5b5061024e6110e9565b6040518082815260200191505060405180910390f35b34801561027057600080fd5b506102796110ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c757600080fd5b506102d0611115565b6040518082815260200191505060405180910390f35b3480156102f257600080fd5b5061033160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111b565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561039b57600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061117e565b6040518082815260200191505060405180910390f35b3480156103f257600080fd5b506103fb611405565b6040518082815260200191505060405180910390f35b34801561041d57600080fd5b5061042661140b565b6040518082815260200191505060405180910390f35b34801561044857600080fd5b50610475600480360381019080803590602001908201803590602001919091929391929390505050611411565b005b34801561048357600080fd5b506104b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611483565b6040518082815260200191505060405180910390f35b3480156104da57600080fd5b506104e36116b5565b6040518082815260200191505060405180910390f35b6000610504336116c1565b905060008111151561051557600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311115156105985761054b600160035461196790919063ffffffff16565b6003819055503073ffffffffffffffffffffffffffffffffffffffff163190507f2fc830d94028b298fd4b7dbe301cdf47799bd13849d7ca4b6f47f199560adc0d60405160405180910390a15b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105de573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f5e93d015f6a0a56fff61b5083f27af603f38199c6135fdc2bccf87274d40696c826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a150565b600080600080600034945067016345785d8a000085101515156106a057600080fd5b60066000600354815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600084600201541415610757574284600201819055504284600301819055503373ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156107bb575060146000369050145b80156107ca5750428460020154145b1561097b5761080b6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611983565b9250600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561087657503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156108d75750600060066000600354815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154115b1561097a57828460000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fec49a3c8c4ae06c18160fe86119c381c9d213ac3e052ff35b594da8687b193c760405160405180910390a35b5b600073ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c13576109fe6127106109f06002548861199190919063ffffffff16565b6119c990919063ffffffff16565b9150610a8c8560066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610b958260066000600354815260200190815260200160002060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015461196790919063ffffffff16565b60066000600354815260200190815260200160002060008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055505b610c2e610c1f336116c1565b8661196790919063ffffffff16565b945083600401606060405190810160405280878152602001610c4f3361117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505083600401805490503373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808876040518082815260200191505060405180910390a3610d24612710610d166001543461199190919063ffffffff16565b6119c990919063ffffffff16565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d8e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2899dc8c12def1caa9accb64257cf2fd9f960f21bb27a560a757eae3c2ec43c1826040518082815260200191505060405180910390a27f2f23375908fc16f7e00482a87cc91dd819a6eeaf132264c16a70b71a3205de8a3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a15050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8e57600080fd5b8060018190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081815481101515610ecd57fe5b906000526020600020016000915090505481565b60035481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4557600080fd5b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600201541415610ffc574281600201819055504281600301819055508273ffffffffffffffffffffffffffffffffffffffff167f62e6a5118be03f9bfedb79b0ed7ed75ee4a9e15fc4c69d2c4976acde26fa2d5f60405160405180910390a25b611017611008846116c1565b8361196790919063ffffffff16565b9150806004016060604051908101604052808481526020016110388661117e565b815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000155602082015181600101556040820151816002015550505080600401805490508373ffffffffffffffffffffffffffffffffffffffff167f3ea05f17364a3fbdabda40874f8e3195fbf3507f56f1e19952788c518ae40808846040518082815260200191505060405180910390a3505050565b61271081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060050154905085565b6000611188611c2a565b60066000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156112d057838290600052602060002090600302016060604051908101604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061127f565b5050505081526020016005820154815250509050670de0b6b3a76400008160200151101561137457600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156113525760008081548110151561134057fe5b906000526020600020015491506113ff565b6000600181548110151561136257fe5b906000526020600020015491506113ff565b678ac7230489e80000816020015110156113aa576000600281548110151561139857fe5b906000526020600020015491506113ff565b6801158e460913d00000816020015110156113e157600060038154811015156113cf57fe5b906000526020600020015491506113ff565b600060048154811015156113f157fe5b906000526020600020015491505b50919050565b6161a881565b60025481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146d57600080fd5b81816000919061147e929190611c77565b505050565b600061148d611c2a565b60008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156115d8578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611587565b5050505081526020016005820154815250509250600091505b8260800151518210156116715761164d61271061163f61161188866119df565b86608001518681518110151561162357fe5b906020019060200201516000015161199190919063ffffffff16565b6119c990919063ffffffff16565b9050611662818561196790919063ffffffff16565b935081806001019250506115f1565b6116888360a001518561196790919063ffffffff16565b93506116ab843073ffffffffffffffffffffffffffffffffffffffff1631611bf5565b9350505050919050565b67016345785d8a000081565b60008060008060066000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091505b82600401805490508210156119335761173933836119df565b905061177081846004018481548110151561175057fe5b90600052602060002090600302016002015461196790919063ffffffff16565b836004018381548110151561178157fe5b9060005260206000209060030201600201819055506117f16117e26127106117d48487600401878154811015156117b457fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119c990919063ffffffff16565b8561196790919063ffffffff16565b9350813373ffffffffffffffffffffffffffffffffffffffff167ffaa4a63f8135e85684de273912ecf6efae3d807cffdf88015c5aa4112801919d856004018581548110151561183d57fe5b9060005260206000209060030201600001546118ba611889612710896004018981548110151561186957fe5b9060005260206000209060030201600201546119c990919063ffffffff16565b886004018881548110151561189a57fe5b90600052602060002090600302016000015461199190919063ffffffff16565b6119036118d2612710886119c990919063ffffffff16565b89600401898154811015156118e357fe5b90600052602060002090600302016000015461199190919063ffffffff16565b60405180848152602001838152602001828152602001935050505060405180910390a38180600101925050611720565b42836003018190555061195383600501548561196790919063ffffffff16565b935060008360050181905550505050919050565b6000818301905082811015151561197a57fe5b80905092915050565b600060148201519050919050565b6000808314156119a457600090506119c3565b81830290508183828115156119b557fe5b041415156119bf57fe5b8090505b92915050565b600081838115156119d657fe5b04905092915050565b60006119e9611c2a565b60008060066000600354815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611b34578382906000526020600020906003020160606040519081016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611ae3565b5050505081526020016005820154815250509250611b5f836060015142611c1190919063ffffffff16565b9150611ba862015180611b9a84866080015189815181101515611b7e57fe5b906020019060200201516020015161199190919063ffffffff16565b6119c990919063ffffffff16565b9350611bde836080015186815181101515611bbf57fe5b90602001906020020151604001516161a8611c1190919063ffffffff16565b9050611bea8482611bf5565b935050505092915050565b600081831015611c0757829050611c0b565b8190505b92915050565b6000828211151515611c1f57fe5b818303905092915050565b60c060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215611cb3579160200282015b82811115611cb2578235825591602001919060010190611c97565b5b509050611cc09190611cc4565b5090565b611ce691905b80821115611ce2576000816000905550600101611cca565b5090565b905600a165627a7a72305820f7010d9778e88ad863a848d2c836dfddfa7da5967844f1d95debca0d6cde105b0029
Contract_Creation_Code_ARM:



